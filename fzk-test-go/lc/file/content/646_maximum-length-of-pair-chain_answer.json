{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：动态规划【通过】\n\n**思路**\n\n在一个长度为 `k`，以 `pairs[i]` 结尾的数对链中，如果 `pairs[i][1] < pairs[j][0]`，则将该数对加入链中，数对链长度变为 `k+1`。\n\n**算法**\n\n根据数对的第一个数排序所有的数对，`dp[i]` 存储以 `pairs[i]` 结尾的最长链的长度。当 `i < j` 且 `pairs[i][1] < pairs[j][0]` 时，扩展数对链，更新 `dp[j] = max(dp[j], dp[i] + 1)`。\n\n```python [solution1-Python]\nclass Solution(object): #Time Limit Exceeded\n    def findLongestChain(self, pairs):\n        pairs.sort()\n        dp = [1] * len(pairs)\n\n        for j in xrange(len(pairs)):\n            for i in xrange(j):\n                if pairs[i][1] < pairs[j][0]:\n                    dp[j] = max(dp[j], dp[i] + 1)\n\n        return max(dp)\n```\n\n```java [solution1-Java]\nclass Solution {\n    public int findLongestChain(int[][] pairs) {\n        Arrays.sort(pairs, (a, b) -> a[0] - b[0]);\n        int N = pairs.length;\n        int[] dp = new int[N];\n        Arrays.fill(dp, 1);\n\n        for (int j = 1; j < N; ++j) {\n            for (int i = 0; i < j; ++i) {\n                if (pairs[i][1] < pairs[j][0])\n                    dp[j] = Math.max(dp[j], dp[i] + 1);\n            }\n        }\n\n        int ans = 0;\n        for (int x: dp) if (x > ans) ans = x;\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是 `pairs` 的长度，两层循环共需要 $N^2$ 次计算。\n\n* 空间复杂度：$O(N)$。用于排序和存储数组 `dp`。\n\n\n#### 方法二：贪心算法【通过】\n\n**思路**\n\n使用贪心思想扩展数对链，在所有可作为下一个数对的集合中选择第二个数最小的数对添加到数对链。\n\n**算法**\n\n根据思路中的描述，按照数对第二个数的升序序列遍历所有数对，如果当前数对可以加入链，则加入。\n\n```python [solution2-Python]\nclass Solution(object):\n    def findLongestChain(self, pairs):\n        cur, ans = float('-inf'), 0\n        for x, y in sorted(pairs, key = operator.itemgetter(1)):\n            if cur < x:\n                cur = y\n                ans += 1\n        return ans\n```\n\n```java [solution2-Java]\nclass Solution {\n    public int findLongestChain(int[][] pairs) {\n        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);\n        int cur = Integer.MIN_VALUE, ans = 0;\n        for (int[] pair: pairs) if (cur < pair[0]) {\n            cur = pair[1];\n            ans++;\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，其中 $N$ 是数对的长度。排序步骤复杂度最高，其余步骤是线性复杂度。\n\n* 空间复杂度：$O(N)$。使用常数空间存储 `cur` 和 `ans`，但是排序的空间复杂度为 $O(N)$，这与使用的语言有关。",
      "createdAt": "2019-12-23T08:41:18.014425+00:00",
      "hitCount": 14599,
      "identifier": "Fn6SCi",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zui-chang-shu-dui-lian-tan-xin-dong-gui-sebhl",
        "title": "【最长数对链】贪心+动归"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-length-of-pair-chain"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 18,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-chang-shu-dui-lian-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 方法一：动态规划【通过】\n思路\n在一个长度为 k，以 pairs[i] 结尾的数对链中，如果 pairs[i][1] < pairs[j][0]，则将该数对加入链中，数对链长度变为 k+1。\n算法\n根据数对的第一个数排序所有的数对，dp[i] 存储以 pairs[i] 结尾的最长链的长度。当 i < j 且 pair",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最长数对链",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 25,
        "id": 60428,
        "viewCount": 10489
      },
      "uuid": "Fn6SCi",
      "videosInfo": []
    }
  }
}
