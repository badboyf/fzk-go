{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：线性扫描\n\n我们可以对 $\\mathrm{bits}$ 数组从左到右扫描来判断最后一位是否为一比特字符。当扫描到第 $i$ 位时，如果 $\\mathrm{bits}[i]=1$，那么说明这是一个两比特字符，将 $i$ 的值增加 2。如果 $\\mathrm{bits}[i]=0$，那么说明这是一个一比特字符，将 $i$ 的值增加 1。\n\n如果 $i$ 最终落在了 $\\mathrm{bits}.\\mathrm{length}-1$ 的位置，那么说明最后一位一定是一比特字符。\n\n```Python [sol1]\nclass Solution(object):\n    def isOneBitCharacter(self, bits):\n        i = 0\n        while i < len(bits) - 1:\n            i += bits[i] + 1\n        return i == len(bits) - 1\n```\n\n```Java [sol1]\nclass Solution {\n    public boolean isOneBitCharacter(int[] bits) {\n        int i = 0;\n        while (i < bits.length - 1) {\n            i += bits[i] + 1;\n        }\n        return i == bits.length - 1;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是 $\\mathrm{bits}$ 数组的长度。\n* 空间复杂度：$O(1)$。\n\n#### 方法二：贪心\n\n三种字符分别为 `0`，`10` 和 `11`，那么 $\\mathrm{bits}$ 数组中出现的所有 0 都表示一个字符的结束位置（无论其为一比特还是两比特）。因此最后一位是否为一比特字符，只和他左侧出现的连续的 1 的个数（即它与倒数第二个 0 出现的位置之间的 1 的个数，如果 $\\mathrm{bits}$ 数组中只有 1 个 0，那么就是整个数组的长度减一）有关。如果 1 的个数为偶数个，那么最后一位是一比特字符，如果 1 的个数为奇数个，那么最后一位不是一比特字符。\n\n```Python [sol2]\nclass Solution(object):\n    def isOneBitCharacter(self, bits):\n        parity = bits.pop()\n        while bits and bits.pop(): parity ^= 1\n        return parity == 0\n```\n\n```Java [sol2]\nclass Solution {\n    public boolean isOneBitCharacter(int[] bits) {\n        int i = bits.length - 2;\n        while (i >= 0 && bits[i] > 0) i--;\n        return (bits.length - i) % 2 == 0;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $N$ 是 $\\mathrm{bits}$ 数组的长度。\n* 空间复杂度：$O(1)$。",
      "createdAt": "2019-06-30T15:28:48.404555+00:00",
      "hitCount": 16509,
      "identifier": "fzi6EX",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-dao-jian-dan-ti-by-euyvvl-p7o9",
        "title": "一道简单题"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "1-bit-and-2-bit-characters"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 28,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "1bi-te-yu-2bi-te-zi-fu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：线性扫描\n我们可以对 $\\mathrm{bits}$ 数组从左到右扫描来判断最后一位是否为一比特字符。当扫描到第 $i$ 位时，如果 $\\mathrm{bits}[i]=1$，那么说明这是一个两比特字符，将 $i$ 的值增加 2。如果 $\\mathrm{bits}[i]=0$，那么说明这是一个一比特字符，将 $",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "1 比特与 2 比特字符",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 45,
        "id": 11608,
        "viewCount": 12368
      },
      "uuid": "fzi6EX",
      "videosInfo": []
    }
  }
}
