{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺视频题解  \n![第四题.mp4](8d2c6208-6af1-452d-91f9-6e80670fd6d9)\n\n### 📖文字题解\n\n#### 方法一：二分查找\n\n给定两个有序数组，要求找到两个有序数组的中位数，最直观的思路有以下两种：\n\n- 使用归并的方式，合并两个有序数组，得到一个大的有序数组。大的有序数组的中间位置的元素，即为中位数。\n\n- 不需要合并两个有序数组，只要找到中位数的位置即可。由于两个数组的长度已知，因此中位数对应的两个数组的下标之和也是已知的。维护两个指针，初始时分别指向两个数组的下标 $0$ 的位置，每次将指向较小值的指针后移一位（如果一个指针已经到达数组末尾，则只需要移动另一个数组的指针），直到到达中位数的位置。\n\n假设两个有序数组的长度分别为 $m$ 和 $n$，上述两种思路的复杂度如何？\n\n第一种思路的时间复杂度是 $O(m+n)$，空间复杂度是 $O(m+n)$。第二种思路虽然可以将空间复杂度降到 $O(1)$，但是时间复杂度仍是 $O(m+n)$。\n\n如何把时间复杂度降低到 $O(\\log(m+n))$ 呢？如果对时间复杂度的要求有 $\\log$，通常都需要用到二分查找，这道题也可以通过二分查找实现。\n\n根据中位数的定义，当 $m+n$ 是奇数时，中位数是两个有序数组中的第 $(m+n)/2$ 个元素，当 $m+n$ 是偶数时，中位数是两个有序数组中的第 $(m+n)/2$ 个元素和第 $(m+n)/2+1$ 个元素的平均值。因此，这道题可以转化成寻找两个有序数组中的第 $k$ 小的数，其中 $k$ 为 $(m+n)/2$ 或 $(m+n)/2+1$。\n\n假设两个有序数组分别是 $\\text{A}$ 和 $\\text{B}$。要找到第 $k$ 个元素，我们可以比较 $\\text{A}[k/2-1]$ 和 $\\text{B}[k/2-1]$，其中 $/$ 表示整数除法。由于 $\\text{A}[k/2-1]$ 和 $\\text{B}[k/2-1]$ 的前面分别有 $\\text{A}[0\\,..\\,k/2-2]$ 和 $\\text{B}[0\\,..\\,k/2-2]$，即 $k/2-1$ 个元素，对于 $\\text{A}[k/2-1]$ 和 $\\text{B}[k/2-1]$ 中的较小值，最多只会有 $(k/2-1)+(k/2-1) \\leq k-2$ 个元素比它小，那么它就不能是第 $k$ 小的数了。\n\n因此我们可以归纳出三种情况：\n\n- 如果 $\\text{A}[k/2-1] < \\text{B}[k/2-1]$，则比 $\\text{A}[k/2-1]$ 小的数最多只有 $\\text{A}$ 的前 $k/2-1$ 个数和 $\\text{B}$ 的前 $k/2-1$ 个数，即比 $\\text{A}[k/2-1]$ 小的数最多只有 $k-2$ 个，因此 $\\text{A}[k/2-1]$ 不可能是第 $k$ 个数，$\\text{A}[0]$ 到 $\\text{A}[k/2-1]$ 也都不可能是第 $k$ 个数，可以全部排除。\n\n- 如果 $\\text{A}[k/2-1] > \\text{B}[k/2-1]$，则可以排除 $\\text{B}[0]$ 到 $\\text{B}[k/2-1]$。\n\n- 如果 $\\text{A}[k/2-1] = \\text{B}[k/2-1]$，则可以归入第一种情况处理。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/4/4_fig1.png)\n\n可以看到，比较 $\\text{A}[k/2-1]$ 和 $\\text{B}[k/2-1]$ 之后，可以排除 $k/2$ 个不可能是第 $k$ 小的数，查找范围缩小了一半。同时，我们将在排除后的新数组上继续进行二分查找，并且根据我们排除数的个数，减少 $k$ 的值，这是因为我们排除的数都不大于第 $k$ 小的数。\n\n有以下三种情况需要特殊处理：\n\n- 如果 $\\text{A}[k/2-1]$ 或者 $\\text{B}[k/2-1]$ 越界，那么我们可以选取对应数组中的最后一个元素。在这种情况下，我们**必须根据排除数的个数减少 $k$ 的值**，而不能直接将 $k$ 减去 $k/2$。\n\n- 如果一个数组为空，说明该数组中的所有元素都被排除，我们可以直接返回另一个数组中第 $k$ 小的元素。\n\n- 如果 $k=1$，我们只要返回两个数组首元素的最小值即可。\n\n用一个例子说明上述算法。假设两个有序数组如下：\n\n```\nA: 1 3 4 9\nB: 1 2 3 4 5 6 7 8 9\n```\n两个有序数组的长度分别是 $4$ 和 $9$，长度之和是 $13$，中位数是两个有序数组中的第 $7$ 个元素，因此需要找到第 $k=7$ 个元素。\n\n比较两个有序数组中下标为 $k/2-1=2$ 的数，即 $\\text{A}[2]$ 和 $\\text{B}[2]$，如下面所示：\n\n```\nA: 1 3 4 9\n       ↑\nB: 1 2 3 4 5 6 7 8 9\n       ↑\n```\n由于 $\\text{A}[2] > \\text{B}[2]$，因此排除 $\\text{B}[0]$ 到 $\\text{B}[2]$，即数组 $\\text{B}$ 的下标偏移（offset）变为 $3$，同时更新 $k$ 的值：$k=k-k/2=4$。\n\n下一步寻找，比较两个有序数组中下标为 $k/2-1=1$ 的数，即 $\\text{A}[1]$ 和 $\\text{B}[4]$，如下面所示，其中方括号部分表示已经被排除的数。\n\n```\nA: 1 3 4 9\n     ↑\nB: [1 2 3] 4 5 6 7 8 9\n             ↑\n```\n由于 $\\text{A}[1] < \\text{B}[4]$，因此排除 $\\text{A}[0]$ 到 $\\text{A}[1]$，即数组 $\\text{A}$ 的下标偏移变为 $2$，同时更新 $k$ 的值：$k=k-k/2=2$。\n\n下一步寻找，比较两个有序数组中下标为 $k/2-1=0$ 的数，即比较 $\\text{A}[2]$ 和 $\\text{B}[3]$，如下面所示，其中方括号部分表示已经被排除的数。\n\n```\nA: [1 3] 4 9\n         ↑\nB: [1 2 3] 4 5 6 7 8 9\n           ↑\n```\n由于 $\\text{A}[2]=\\text{B}[3]$，根据之前的规则，排除 $\\text{A}$ 中的元素，因此排除 $\\text{A}[2]$，即数组 $\\text{A}$ 的下标偏移变为 $3$，同时更新 $k$ 的值： $k=k-k/2=1$。\n\n由于 $k$ 的值变成 $1$，因此比较两个有序数组中的未排除下标范围内的第一个数，其中较小的数即为第 $k$ 个数，由于 $\\text{A}[3] > \\text{B}[3]$，因此第 $k$ 个数是 $\\text{B}[3]=4$。\n\n```\nA: [1 3 4] 9\n           ↑\nB: [1 2 3] 4 5 6 7 8 9\n           ↑\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int length1 = nums1.length, length2 = nums2.length;\n        int totalLength = length1 + length2;\n        if (totalLength % 2 == 1) {\n            int midIndex = totalLength / 2;\n            double median = getKthElement(nums1, nums2, midIndex + 1);\n            return median;\n        } else {\n            int midIndex1 = totalLength / 2 - 1, midIndex2 = totalLength / 2;\n            double median = (getKthElement(nums1, nums2, midIndex1 + 1) + getKthElement(nums1, nums2, midIndex2 + 1)) / 2.0;\n            return median;\n        }\n    }\n\n    public int getKthElement(int[] nums1, int[] nums2, int k) {\n        /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n         * 这里的 \"/\" 表示整除\n         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n         * 这样 pivot 本身最大也只能是第 k-1 小的元素\n         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums1 数组\n         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums2 数组\n         * 由于我们 \"删除\" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n         */\n\n        int length1 = nums1.length, length2 = nums2.length;\n        int index1 = 0, index2 = 0;\n        int kthElement = 0;\n\n        while (true) {\n            // 边界情况\n            if (index1 == length1) {\n                return nums2[index2 + k - 1];\n            }\n            if (index2 == length2) {\n                return nums1[index1 + k - 1];\n            }\n            if (k == 1) {\n                return Math.min(nums1[index1], nums2[index2]);\n            }\n            \n            // 正常情况\n            int half = k / 2;\n            int newIndex1 = Math.min(index1 + half, length1) - 1;\n            int newIndex2 = Math.min(index2 + half, length2) - 1;\n            int pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];\n            if (pivot1 <= pivot2) {\n                k -= (newIndex1 - index1 + 1);\n                index1 = newIndex1 + 1;\n            } else {\n                k -= (newIndex2 - index2 + 1);\n                index2 = newIndex2 + 1;\n            }\n        }\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getKthElement(const vector<int>& nums1, const vector<int>& nums2, int k) {\n        /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n         * 这里的 \"/\" 表示整除\n         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n         * 这样 pivot 本身最大也只能是第 k-1 小的元素\n         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums1 数组\n         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums2 数组\n         * 由于我们 \"删除\" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n         */\n\n        int m = nums1.size();\n        int n = nums2.size();\n        int index1 = 0, index2 = 0;\n\n        while (true) {\n            // 边界情况\n            if (index1 == m) {\n                return nums2[index2 + k - 1];\n            }\n            if (index2 == n) {\n                return nums1[index1 + k - 1];\n            }\n            if (k == 1) {\n                return min(nums1[index1], nums2[index2]);\n            }\n\n            // 正常情况\n            int newIndex1 = min(index1 + k / 2 - 1, m - 1);\n            int newIndex2 = min(index2 + k / 2 - 1, n - 1);\n            int pivot1 = nums1[newIndex1];\n            int pivot2 = nums2[newIndex2];\n            if (pivot1 <= pivot2) {\n                k -= newIndex1 - index1 + 1;\n                index1 = newIndex1 + 1;\n            }\n            else {\n                k -= newIndex2 - index2 + 1;\n                index2 = newIndex2 + 1;\n            }\n        }\n    }\n\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int totalLength = nums1.size() + nums2.size();\n        if (totalLength % 2 == 1) {\n            return getKthElement(nums1, nums2, (totalLength + 1) / 2);\n        }\n        else {\n            return (getKthElement(nums1, nums2, totalLength / 2) + getKthElement(nums1, nums2, totalLength / 2 + 1)) / 2.0;\n        }\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def getKthElement(k):\n            \"\"\"\n            - 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n            - 这里的 \"/\" 表示整除\n            - nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n            - nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n            - 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n            - 这样 pivot 本身最大也只能是第 k-1 小的元素\n            - 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums1 数组\n            - 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums2 数组\n            - 由于我们 \"删除\" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n            \"\"\"\n            \n            index1, index2 = 0, 0\n            while True:\n                # 特殊情况\n                if index1 == m:\n                    return nums2[index2 + k - 1]\n                if index2 == n:\n                    return nums1[index1 + k - 1]\n                if k == 1:\n                    return min(nums1[index1], nums2[index2])\n\n                # 正常情况\n                newIndex1 = min(index1 + k // 2 - 1, m - 1)\n                newIndex2 = min(index2 + k // 2 - 1, n - 1)\n                pivot1, pivot2 = nums1[newIndex1], nums2[newIndex2]\n                if pivot1 <= pivot2:\n                    k -= newIndex1 - index1 + 1\n                    index1 = newIndex1 + 1\n                else:\n                    k -= newIndex2 - index2 + 1\n                    index2 = newIndex2 + 1\n        \n        m, n = len(nums1), len(nums2)\n        totalLength = m + n\n        if totalLength % 2 == 1:\n            return getKthElement((totalLength + 1) // 2)\n        else:\n            return (getKthElement(totalLength // 2) + getKthElement(totalLength // 2 + 1)) / 2\n\n```\n\n```golang [sol1-Golang]\nfunc findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    totalLength := len(nums1) + len(nums2)\n    if totalLength%2 == 1 {\n        midIndex := totalLength/2\n        return float64(getKthElement(nums1, nums2, midIndex + 1))\n    } else {\n        midIndex1, midIndex2 := totalLength/2 - 1, totalLength/2\n        return float64(getKthElement(nums1, nums2, midIndex1 + 1) + getKthElement(nums1, nums2, midIndex2 + 1)) / 2.0\n    }\n    return 0\n}\n\nfunc getKthElement(nums1, nums2 []int, k int) int {\n    index1, index2 := 0, 0\n    for {\n        if index1 == len(nums1) {\n            return nums2[index2 + k - 1]\n        }\n        if index2 == len(nums2) {\n            return nums1[index1 + k - 1]\n        }\n        if k == 1 {\n            return min(nums1[index1], nums2[index2])\n        }\n        half := k/2\n        newIndex1 := min(index1 + half, len(nums1)) - 1\n        newIndex2 := min(index2 + half, len(nums2)) - 1\n        pivot1, pivot2 := nums1[newIndex1], nums2[newIndex2]\n        if pivot1 <= pivot2 {\n            k -= (newIndex1 - index1 + 1)\n            index1 = newIndex1 + 1\n        } else {\n            k -= (newIndex2 - index2 + 1)\n            index2 = newIndex2 + 1\n        }\n    }\n    return 0\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log(m+n))$，其中 $m$ 和 $n$ 分别是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度。初始时有 $k=(m+n)/2$ 或 $k=(m+n)/2+1$，每一轮循环可以将查找范围减少一半，因此时间复杂度是 $O(\\log(m+n))$。\n\n* 空间复杂度：$O(1)$。\n\n#### 方法二：划分数组\n\n**说明**\n\n方法一的时间复杂度已经很优秀了，但本题存在时间复杂度更低的一种方法。这里给出推导过程，勇于挑战自己的读者可以进行尝试。\n\n**思路与算法**\n\n为了使用划分的方法解决这个问题，需要理解「中位数的作用是什么」。在统计中，中位数被用来：\n\n> 将一个集合划分为两个长度相等的子集，其中一个子集中的元素总是大于另一个子集中的元素。\n\n如果理解了中位数的划分作用，就很接近答案了。\n\n首先，在任意位置 $i$ 将 $\\text{A}$ 划分成两个部分：\n\n```\n           left_A            |          right_A\n    A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]\n```\n\n由于 $\\text{A}$ 中有 $m$ 个元素， 所以有 $m+1$ 种划分的方法（$i \\in [0, m]$）。\n\n> $\\text{len}(\\text{left\\_A}) = i, \\text{len}(\\text{right\\_A}) = m - i$.\n>\n> 注意：当 $i = 0$ 时，$\\text{left\\_A}$ 为空集， 而当 $i = m$ 时, $\\text{right\\_A}$ 为空集。\n\n采用同样的方式，在任意位置 $j$ 将 $\\text{B}$ 划分成两个部分：\n\n```\n           left_B            |          right_B\n    B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]\n```\n\n将 $\\text{left\\_A}$ 和 $\\text{left\\_B}$ 放入一个集合，并将 $\\text{right\\_A}$ 和 $\\text{right\\_B}$ 放入另一个集合。 再把这两个新的集合分别命名为 $\\text{left\\_part}$ 和 $\\text{right\\_part}$：\n\n```\n          left_part          |         right_part\n    A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]\n    B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]\n```\n\n当 $\\text{A}$ 和 $\\text{B}$ 的总长度是偶数时，如果可以确认：\n\n- $\\text{len}(\\text{left\\_part}) = \\text{len}(\\text{right\\_part})$\n- $\\max(\\text{left\\_part}) \\leq \\min(\\text{right\\_part})$\n\n那么，$\\{\\text{A}, \\text{B}\\}$ 中的所有元素已经被划分为相同长度的两个部分，且前一部分中的元素总是小于或等于后一部分中的元素。中位数就是前一部分的最大值和后一部分的最小值的平均值：\n\n$$\n\\text{median} = \\frac{\\text{max}(\\text{left}\\_\\text{part}) + \\text{min}(\\text{right}\\_\\text{part})}{2}\n$$\n\n当 $\\text{A}$ 和 $\\text{B}$ 的总长度是奇数时，如果可以确认：\n\n- $\\text{len}(\\text{left\\_part}) = \\text{len}(\\text{right\\_part})+1$\n- $\\max(\\text{left\\_part}) \\leq \\min(\\text{right\\_part})$\n\n那么，$\\{\\text{A}, \\text{B}\\}$ 中的所有元素已经被划分为两个部分，前一部分比后一部分多一个元素，且前一部分中的元素总是小于或等于后一部分中的元素。中位数就是前一部分的最大值：\n\n$$\n\\text{median} = \\text{max}(\\text{left}\\_\\text{part})\n$$\n\n第一个条件对于总长度是偶数和奇数的情况有所不同，但是可以将两种情况合并。第二个条件对于总长度是偶数和奇数的情况是一样的。\n\n要确保这两个条件，只需要保证：\n\n- $i + j = m - i + n - j$（当 $m+n$ 为偶数）或 $i + j = m - i + n - j + 1$（当 $m+n$ 为奇数）。等号左侧为前一部分的元素个数，等号右侧为后一部分的元素个数。将 $i$ 和 $j$ 全部移到等号左侧，我们就可以得到 $i+j = \\frac{m + n + 1}{2}$。这里的分数结果只保留整数部分。\n\n- $0 \\leq i \\leq m$，$0 \\leq j \\leq n$。如果我们规定 $\\text{A}$ 的长度小于等于 $\\text{B}$ 的长度，即 $m \\leq n$。这样对于任意的 $i \\in [0, m]$，都有 $j = \\frac{m + n + 1}{2} - i \\in [0, n]$，那么我们在 $[0, m]$ 的范围内枚举 $i$ 并得到 $j$，就不需要额外的性质了。\n\n    - 如果 $\\text{A}$ 的长度较大，那么我们只要交换 $\\text{A}$ 和 $\\text{B}$ 即可。\n\n    - 如果 $m > n$ ，那么得出的 $j$ 有可能是负数。\n\n- $\\text{B}[j-1] \\leq \\text{A}[i]$ 以及 $\\text{A}[i-1] \\leq \\text{B}[j]$，即前一部分的最大值小于等于后一部分的最小值。\n\n为了简化分析，假设 $\\text{A}[i-1], \\text{B}[j-1], \\text{A}[i], \\text{B}[j]$ 总是存在。对于 $i=0$、$i=m$、$j=0$、$j=n$ 这样的临界条件，我们只需要规定 $\\text{A}[-1]=\\text{B}[-1]=-\\infty$，$A[m]=\\text{B}[n]=\\infty$ 即可。这也是比较直观的：当一个数组不出现在前一部分时，对应的值为负无穷，就不会对前一部分的**最大值**产生影响；当一个数组不出现在后一部分时，对应的值为正无穷，就不会对后一部分的**最小值**产生影响。\n\n所以我们需要做的是：\n\n> 在 $[0, m]$ 中找到 $i$，使得：\n>\n> $\\qquad \\text{B}[j-1] \\leq \\text{A}[i]$ 且 $\\text{A}[i-1] \\leq \\text{B}[j]$，其中 $j = \\frac{m + n + 1}{2} - i$\n\n我们证明它等价于：\n\n> 在 $[0, m]$ 中找到最大的 $i$，使得：\n>\n> $\\qquad \\text{A}[i-1] \\leq \\text{B}[j]$，其中 $j = \\frac{m + n + 1}{2} - i$\n\n这是因为：\n\n- 当 $i$ 从 $0 \\sim m$ 递增时，$\\text{A}[i-1]$ 递增，$\\text{B}[j]$ 递减，所以一定存在一个最大的 $i$ 满足 $\\text{A}[i-1] \\leq \\text{B}[j]$；\n\n- 如果 $i$ 是最大的，那么说明 $i+1$ 不满足。将 $i+1$ 带入可以得到 $\\text{A}[i] > \\text{B}[j-1]$，也就是 $\\text{B}[j - 1] < \\text{A}[i]$，就和我们进行等价变换前 $i$ 的性质一致了（甚至还要更强）。\n\n因此我们可以对 $i$ 在 $[0, m]$ 的区间上进行二分搜索，找到最大的满足 $\\text{A}[i-1] \\leq \\text{B}[j]$ 的 $i$ 值，就得到了划分的方法。此时，划分前一部分元素中的最大值，以及划分后一部分元素中的最小值，才可能作为就是这两个数组的中位数。\n\n```Java [sol2-Java]\nclass Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        if (nums1.length > nums2.length) {\n            return findMedianSortedArrays(nums2, nums1);\n        }\n\n        int m = nums1.length;\n        int n = nums2.length;\n        int left = 0, right = m;\n        // median1：前一部分的最大值\n        // median2：后一部分的最小值\n        int median1 = 0, median2 = 0;\n\n        while (left <= right) {\n            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]\n            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]\n            int i = (left + right) / 2;\n            int j = (m + n + 1) / 2 - i;\n\n            // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]\n            int nums_im1 = (i == 0 ? Integer.MIN_VALUE : nums1[i - 1]);\n            int nums_i = (i == m ? Integer.MAX_VALUE : nums1[i]);\n            int nums_jm1 = (j == 0 ? Integer.MIN_VALUE : nums2[j - 1]);\n            int nums_j = (j == n ? Integer.MAX_VALUE : nums2[j]);\n\n            if (nums_im1 <= nums_j) {\n                median1 = Math.max(nums_im1, nums_jm1);\n                median2 = Math.min(nums_i, nums_j);\n                left = i + 1;\n            } else {\n                right = i - 1;\n            }\n        }\n\n        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        if (nums1.size() > nums2.size()) {\n            return findMedianSortedArrays(nums2, nums1);\n        }\n        \n        int m = nums1.size();\n        int n = nums2.size();\n        int left = 0, right = m;\n        // median1：前一部分的最大值\n        // median2：后一部分的最小值\n        int median1 = 0, median2 = 0;\n\n        while (left <= right) {\n            // 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]\n            // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]\n            int i = (left + right) / 2;\n            int j = (m + n + 1) / 2 - i;\n\n            // nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]\n            int nums_im1 = (i == 0 ? INT_MIN : nums1[i - 1]);\n            int nums_i = (i == m ? INT_MAX : nums1[i]);\n            int nums_jm1 = (j == 0 ? INT_MIN : nums2[j - 1]);\n            int nums_j = (j == n ? INT_MAX : nums2[j]);\n\n            if (nums_im1 <= nums_j) {\n                median1 = max(nums_im1, nums_jm1);\n                median2 = min(nums_i, nums_j);\n                left = i + 1;\n            } else {\n                right = i - 1;\n            }\n        }\n\n        return (m + n) % 2 == 0 ? (median1 + median2) / 2.0 : median1;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)\n\n        infinty = 2**40\n        m, n = len(nums1), len(nums2)\n        left, right = 0, m\n        # median1：前一部分的最大值\n        # median2：后一部分的最小值\n        median1, median2 = 0, 0\n\n        while left <= right:\n            # 前一部分包含 nums1[0 .. i-1] 和 nums2[0 .. j-1]\n            # // 后一部分包含 nums1[i .. m-1] 和 nums2[j .. n-1]\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n\n            # nums_im1, nums_i, nums_jm1, nums_j 分别表示 nums1[i-1], nums1[i], nums2[j-1], nums2[j]\n            nums_im1 = (-infinty if i == 0 else nums1[i - 1])\n            nums_i = (infinty if i == m else nums1[i])\n            nums_jm1 = (-infinty if j == 0 else nums2[j - 1])\n            nums_j = (infinty if j == n else nums2[j])\n\n            if nums_im1 <= nums_j:\n                median1, median2 = max(nums_im1, nums_jm1), min(nums_i, nums_j)\n                left = i + 1\n            else:\n                right = i - 1\n\n        return (median1 + median2) / 2 if (m + n) % 2 == 0 else median1\n```\n\n```golang [sol2-Golang]\nfunc findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    if len(nums1) > len(nums2) {\n        return findMedianSortedArrays(nums2, nums1)\n    }\n    m, n := len(nums1), len(nums2)\n    left, right := 0, m\n    median1, median2 := 0, 0\n    for left <= right {\n        i := (left + right) / 2\n        j := (m + n + 1) / 2 - i\n        nums_im1 := math.MinInt32\n        if i != 0 {\n            nums_im1 = nums1[i-1]\n        }\n        nums_i := math.MaxInt32\n        if i != m {\n            nums_i = nums1[i]\n        }\n        nums_jm1 := math.MinInt32\n        if j != 0 {\n            nums_jm1 = nums2[j-1]\n        }\n        nums_j := math.MaxInt32\n        if j != n {\n            nums_j = nums2[j]\n        }\n        if nums_im1 <= nums_j {\n            median1 = max(nums_im1, nums_jm1)\n            median2 = min(nums_i, nums_j)\n            left = i + 1\n        } else {\n            right = i - 1\n        }\n    }\n    if (m + n) % 2 == 0 {\n        return float64(median1 + median2) / 2.0\n    }\n    return  float64(median1)\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log\\min(m,n)))$，其中 $m$ 和 $n$ 分别是数组 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 的长度。查找的区间是 $[0, m]$，而该区间的长度在每次循环之后都会减少为原来的一半。所以，只需要执行 $\\log m$ 次循环。由于每次循环中的操作次数是常数，所以时间复杂度为 $O(\\log m)$。由于我们可能需要交换 $\\textit{nums}_1$ 和 $\\textit{nums}_2$ 使得 $m \\leq n$，因此时间复杂度是 $O(\\log\\min(m,n)))$。\n\n* 空间复杂度：$O(1)$。",
      "createdAt": "2020-05-23T14:51:48.540680+00:00",
      "hitCount": 552431,
      "identifier": "y5kqyo",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2",
        "title": "详细通俗的思路分析，多解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "median-of-two-sorted-arrays"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 758,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 86,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 50,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 8,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114",
      "status": "PUBLISHED",
      "summary": "📺视频题解 📖文字题解 方法一：二分查找 给定两个有序数组，要求找到两个有序数组的中位数，最直观的思路有以下两种： 使用归并的方式，合并两个有序数组，得到一个大的有序数组。大的有序数组的中间位置的元素，即为中位数。 不需要合并两个有序数组，只要找到中位数的位置即可。由于两个数组的长度已知，因此中位数对应的两个数组的下标",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://assets.leetcode-cn.com/solution-static/4/4_fig1.png",
      "title": "寻找两个有序数组的中位数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 616,
        "id": 258842,
        "viewCount": 357262
      },
      "uuid": "y5kqyo",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/F7ABE13411124388B00CF1D8FE5008C9-6-2.png",
          "duration": 1236.48,
          "videoId": "947f91a7d5344925a284ff354d739d54"
        }
      ]
    }
  }
}
