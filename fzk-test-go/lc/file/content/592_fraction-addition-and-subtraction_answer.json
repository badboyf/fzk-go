{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：全部通分\n\n首先我们需要预处理整个字符串，将它拆分成若干个分数和符号。我们通过 `+` 和 `-` 将字符串拆分成若干个分数，并将 `+` 和 `-` 依次存放在符号数组中。随后对于每一个分数，我们通过 `/` 将其拆分成分子和分母部分，并存储到数组中。接下来我们就可以通过分数的加减法得到最终的结果了。\n\n在进行分数加减时，我们可以先将这些分数的分母全部通分，再对分子进行加减，例如：\n\n$\\frac{3}{2} + \\frac{5}{3} - \\frac{7}{6}$\n\n可以变成：\n\n$\\frac{9}{6} + \\frac{10}{6} - \\frac{7}{6}$\n\n要计算出通分后分母的值，我们需要计算出所有分母的最小公倍数 `LCM`。两个数的最小公倍数等于它们的乘积除以它们的最大公约数 `GCD`，即 `LCM(a, b) = a * b / GCD(a, b)`。在计算多个数的最小公倍数时，我们可以先计算出前两个数的最小公倍数，再计算出其与第三个数的最小公倍数，以此类推，即 `LCM(a, b, c, d) = LCM(LCM(LCM(a, b), c), d)`，这样我们就可以很方便地计算出分母的值。在这之后，我们对所有分数进行通分，对分子进行加减，就可以得到答案。\n\n注意此时的答案可能没有化成最简形式（没有约分），在上面的例子中，答案是 $\\frac{12}{6}$，应当约分成 $\\frac{2}{1}$。因此在得到答案后，我们还需要计算出分子和分母的最大公约数，将答案约分成最简形式。\n\n``` Java [sol1]\npublic class Solution {\n    public String fractionAddition(String expression) {\n        List < Character > sign = new ArrayList < > ();\n        for (int i = 1; i < expression.length(); i++) {\n            if (expression.charAt(i) == '+' || expression.charAt(i) == '-')\n                sign.add(expression.charAt(i));\n        }\n        List < Integer > num = new ArrayList < > ();\n        List < Integer > den = new ArrayList < > ();\n        for (String sub: expression.split(\"\\\\+\")) {\n            for (String subsub: sub.split(\"-\")) {\n                if (subsub.length() > 0) {\n                    String[] fraction = subsub.split(\"/\");\n                    num.add(Integer.parseInt(fraction[0]));\n                    den.add(Integer.parseInt(fraction[1]));\n                }\n            }\n        }\n        if (expression.charAt(0) == '-')\n            num.set(0, -num.get(0));\n        int lcm = 1;\n        for (int x: den) {\n            lcm = lcm_(lcm, x);\n        }\n\n        int res = lcm / den.get(0) * num.get(0);\n        for (int i = 1; i < num.size(); i++) {\n            if (sign.get(i - 1) == '+')\n                res += lcm / den.get(i) * num.get(i);\n            else\n                res -= lcm / den.get(i) * num.get(i);\n        }\n        int g = gcd(Math.abs(res), Math.abs(lcm));\n        return (res / g) + \"/\" + (lcm / g);\n    }\n    public int lcm_(int a, int b) {\n        return a * b / gcd(a, b);\n    }\n    public int gcd(int a, int b) {\n        while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N\\log C)$，其中 $N$ 是字符串中分数的个数，$\\log C$ 来源于计算最大公约数的时间复杂度，虽然在这道题中，分子和分母的范围不是很大，但需要时刻牢记计算最大公约数的时间复杂度并不是 $O(1)$。\n\n* 空间复杂度：$O(N)$，用来存储分子，分母和符号。也可以优化到 $O(1)$。\n\n#### 方法二：逐个通分\n\n方法一存在一个缺点，就是当分母的范围较大时，将所有分数通分会导致得到的分母整数溢出（虽然在这道题中，分母的范围是 `[1, 10]` 的正整数，不会出现溢出的情况），因此我们可以考虑每次只对两个分数进行通分，计算出它们相加或相减的最简结果后，再跟下一个分数进行通分并计算，以此类推。假设我们需要计算\n\n$\\frac{a}{b} + \\frac{c}{d}$\n\n的值，可以先算出 `b` 和 `d` 的最小公倍数 `LCM`，设 `x = LCM / b`，`y = LCM / d`，即有\n\n$\\frac{a}{b} + \\frac{c}{d} = \\frac{a * x + c * y}{b * d / \\text{LCM}}$\n\n随后将结果进行约分，并继续计算即可。\n\n```Java [sol2]\npublic class Solution {\n    public String fractionAddition(String expression) {\n        List < Character > sign = new ArrayList < > ();\n        if (expression.charAt(0) != '-')\n            sign.add('+');\n        for (int i = 0; i < expression.length(); i++) {\n            if (expression.charAt(i) == '+' || expression.charAt(i) == '-')\n                sign.add(expression.charAt(i));\n        }\n        int prev_num = 0, prev_den = 1, i = 0;\n        for (String sub: expression.split(\"(\\\\+)|(-)\")) {\n            if (sub.length() > 0) {\n                String[] fraction = sub.split(\"/\");\n                int num = (Integer.parseInt(fraction[0]));\n                int den = (Integer.parseInt(fraction[1]));\n                int g = Math.abs(gcd(den, prev_den));\n                if (sign.get(i++) == '+')\n                    prev_num = prev_num * den / g + num * prev_den / g;\n                else\n                    prev_num = prev_num * den / g - num * prev_den / g;\n                prev_den = den * prev_den / g;\n                g = Math.abs(gcd(prev_den, prev_num));\n                prev_num /= g;\n                prev_den /= g;\n            }\n        }\n        return prev_num + \"/\" + prev_den;\n    }\n    public int gcd(int a, int b) {\n        while (b != 0) {\n            int t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N\\log C)$，其中 $N$ 是字符串中分数的个数，$\\log C$ 来源于计算最大公约数的时间复杂度，虽然在这道题中，分子和分母的范围不是很大，但需要时刻牢记计算最大公约数的时间复杂度并不是 $O(1)$。\n\n* 空间复杂度：$O(N)$，用来存储分子，分母和符号。也可以优化到 $O(1)$。",
      "createdAt": "2019-10-29T06:10:24.057638+00:00",
      "hitCount": 5069,
      "identifier": "u4Aq8b",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "592-cchao-100de-zui-da-gong-yue-shu-jie-42p7o",
        "title": "592. c++超100的最大公约数解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "fraction-addition-and-subtraction"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "fen-shu-jia-jian-yun-suan-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：全部通分\n首先我们需要预处理整个字符串，将它拆分成若干个分数和符号。我们通过 + 和 - 将字符串拆分成若干个分数，并将 + 和 - 依次存放在符号数组中。随后对于每一个分数，我们通过 / 将其拆分成分子和分母部分，并存储到数组中。接下来我们就可以通过分数的加减法得到最终的结果了。\n在进行分数加减时，我们可",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "分数加减运算",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 9,
        "id": 38810,
        "viewCount": 4000
      },
      "uuid": "u4Aq8b",
      "videosInfo": []
    }
  }
}
