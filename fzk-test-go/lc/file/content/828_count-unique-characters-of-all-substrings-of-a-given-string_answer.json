{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：递推\n\n**分析**\n\n我们用 $U(S)$ 表示字符串 `S` 中独特字符的个数，例如 $U(\\text{\"LETTER\"}) = 2$。在计算 $U(S)$ 时，我们可以对字母表中的每个字符，分别判断它是否只在 `S` 中出现一次。我们用 $U_{\"A\"}(S)$ 表示 $A$ 是否为 `S` 中的独特字符，如果是，那么它的值为 `1`；如果不是，那么它的值为 `0`。那么我们有 $U(S) = \\sum_{c \\in \\mathcal{A}} U_c(S)$，其中 $\\mathcal{A} = \\{ \\text{\"A\"}, \\text{\"B\"}, \\dots \\}$ 为字母表。\n\n将 $U(S)$ 分解为若干个 $U_c(S)$ 的和之后，问题就变得简单很多了。我们只需要考虑这样一个问题：对于一个字符（例如 `\"A\"`），`x` 中有多少个子串只包含一个 `\"A\"`？举一个例子，如果我们知道 `S` 中的某些位置 `S[10], S[14], S[20]` 的字符为 `\"A\"`，其余位置的字符均不为 `\"A\"`，那么我们就可以计算出，以 `S[8]` 开始且只包含一个 `\"A\"` 的子串有 `4` 个，它们分别以 `S[10], S[11], S[12], S[13]` 结尾；以 `S[12]` 开始且只包含一个 `\"A\"` 的子串有 `6` 个，它们分别以 `S[14], S[15], S[16], S[17], S[18], S[19]` 结尾，以此类推。对于一个开始位置 `S[i]`，我们对字母表中的每个字符，都计算出只包含一个该字符的子串的数量，再进行累加，就可以得到所有以 `S[i]` 开始的子串的 $U(S)$ 值之和。再对所有的 $U(S)$ 进行累加，就可以得到最终的答案。\n\n我们用 $F(i)$ 表示开始位置为 `S[i]` 的子串的 $U(S)$ 值之和。在初始 `i = 0` 时，$F(0)$ 为 $\\sum_{c \\in \\mathcal{A}} \\text{index}[c][1] - \\text{index}[c][0]$，其中 `index[c]` 是一个列表，它按照递增的顺序存储了 `S` 中出现字符 `c` 的位置，例如在上面一个例子中，`index[\"A\"] = [10, 14, 20]`。\n\n接下来，我们观察 $F(1)$ 相对于 $F(0)$ 的变化是哪些项，希望用 $F(0)$ 的值递推出 $F(1)$ 的值。假设 `S[0]` 的字符为 `\"B\"`，那么对于所有的 $c \\neq \\text{\"B\"}$，$\\text{index}[c][1] - \\text{index}[c][0]$ 的值都没有发生变化，只有 $c = \\text{\"B\"}$ 的那一项从 $\\text{index}[\\text{\"B\"}][1] - \\text{index}[\\text{\"B\"}][0]$ 变成了 $\\text{index}[\\text{\"B\"}][2] - \\text{index}[\\text{\"B\"}][1]$。以此类推，当我们从 $F(i)$ 递推到 $F(i + 1)$ 时，只需要变化 $c = S[i]$ 的那一项即可。\n\n```Java [sol1]\nclass Solution {\n    Map<Character, List<Integer>> index;\n    int[] peek;\n    int N;\n\n    public int uniqueLetterString(String S) {\n        index = new HashMap();\n        peek = new int[26];\n        N = S.length();\n\n        for (int i = 0; i < S.length(); ++i) {\n            char c = S.charAt(i);\n            index.computeIfAbsent(c, x-> new ArrayList<Integer>()).add(i);\n        }\n\n        long cur = 0, ans = 0;\n        for (char c: index.keySet()) {\n            index.get(c).add(N);\n            index.get(c).add(N);\n            cur += get(c);\n        }\n\n        for (char c: S.toCharArray()) {\n            ans += cur;\n            long oldv = get(c);\n            peek[c - 'A']++;\n            cur += get(c) - oldv;\n        }\n        return (int) ans % 1_000_000_007;\n    }\n\n    public long get(char c) {\n        List<Integer> indexes = index.get(c);\n        int i = peek[c - 'A'];\n        return indexes.get(i+1) - indexes.get(i);\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def uniqueLetterString(self, S):\n        N = len(S)\n        index = collections.defaultdict(list)\n        peek = collections.defaultdict(int)\n        for i, c in enumerate(S):\n            index[c].append(i)\n        for c in index:\n            index[c].extend([N, N])\n\n        def get(c):\n            return index[c][peek[c] + 1] - index[c][peek[c]]\n\n        ans = 0\n        cur = sum(get(c) for c in index)\n        for i, c in enumerate(S):\n            ans += cur\n            oldv = get(c)\n            peek[c] += 1\n            cur += get(c) - oldv\n        return ans % (10**9 + 7)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是字符串 `S` 的长度。\n\n* 空间复杂度：$O(N)$。\n\n#### 方法二：对于每个字母分别计数\n\n我们可以在方法一上进行改进，在不改变时间复杂度的情况下，让代码变得更加简洁。\n\n我们直接对于每个字符 `c`，计算出仅包含 `c` 一次的子串个数。使用和方法一相同的例子，考虑字母 `\"A\"`，并且有 `S[10] = S[14] = S[20] = \"A\"`，我们可以计算出仅包含 `S[14]` 的子串个数为 `4 * 6 = 24`，其中 `4` 表示子串的开始位置可以选择 `11, 12, 13, 14`，`6` 表示子串的结束位置可以选择 `14, 15, 16, 17, 18, 19`，根据乘法原理，子串的个数为 `24`。我们对于字母 `\"A\"` 出现的其它位置（例如 `S[10]` 和 `S[20]`）分别进行同样的计数，并且需要考虑边界情况，就可以得到仅包含字母 `\"A\"` 一次的子串个数。\n\n最后对于每个字符 `c`，将计数结果进行累加，就得到了最终的答案。\n\n```Java [sol2]\nclass Solution {\n    public int uniqueLetterString(String S) {\n        Map<Character, List<Integer>> index = new HashMap();\n        for (int i = 0; i < S.length(); ++i) {\n            char c = S.charAt(i);\n            index.computeIfAbsent(c, x-> new ArrayList<Integer>()).add(i);\n        }\n\n        long ans = 0;\n        for (List<Integer> A: index.values()) {\n            for (int i = 0; i < A.size(); ++i) {\n                long prev = i > 0 ? A.get(i-1) : -1;\n                long next = i < A.size() - 1 ? A.get(i+1) : S.length();\n                ans += (A.get(i) - prev) * (next - A.get(i));\n            }\n        }\n\n        return (int) ans % 1_000_000_007;\n    }\n}\n```\n\n```Python [sol2]\nclass Solution(object):\n    def uniqueLetterString(self, S):\n        index = collections.defaultdict(list)\n        for i, c in enumerate(S):\n            index[c].append(i)\n\n        ans = 0\n        for A in index.values():\n            A = [-1] + A + [len(S)]\n            for i in xrange(1, len(A) - 1):\n                ans += (A[i] - A[i-1]) * (A[i+1] - A[i])\n        return ans % (10**9 + 7)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是字符串 `S` 的长度。\n\n* 空间复杂度：$O(N)$，可以优化到 $O(\\mathcal{A})$。",
      "createdAt": "2019-08-23T09:56:44.830604+00:00",
      "hitCount": 5399,
      "identifier": "AAOW53",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-bian-li-ji-shu-on-o1-by-muriyatensei-16uu",
        "title": "【C++】遍历计数 O(n) O(1)"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "count-unique-characters-of-all-substrings-of-a-given-string"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "du-te-zi-fu-chuan-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：递推\n分析\n我们用 U(S) 表示字符串 S 中独特字符的个数，例如 U(\\text{\"LETTER\"}) = 2。在计算 U(S) 时，我们可以对字母表中的每个字符，分别判断它是否只在 S 中出现一次。我们用 U_{\"A\"}(S) 表示 A 是否为 S 中的独特字符，如果是，那么它的值为 1；如果不是，那",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "独特字符串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 4,
        "id": 22524,
        "viewCount": 3759
      },
      "uuid": "AAOW53",
      "videosInfo": []
    }
  }
}
