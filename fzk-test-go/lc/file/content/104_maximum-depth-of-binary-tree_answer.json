{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![104. 二叉树的最大深度.mp4](a49668bd-2702-4c98-8f93-9826cb3fa207)\n\n### 📖 文字题解\n#### 方法一：深度优先搜索\n\n**思路与算法**\n\n如果我们知道了左子树和右子树的最大深度 $l$ 和 $r$，那么该二叉树的最大深度即为\n$$\n\\max(l,r) + 1\n$$\n而左子树和右子树的最大深度又可以以同样的方式进行计算。因此我们可以用「深度优先搜索」的方法来计算二叉树的最大深度。具体而言，在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 $O(1)$ 时间内计算出当前二叉树的最大深度。递归在访问到空节点时退出。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/104/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/104/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/104/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/104/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/104/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/104/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/104/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/104/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/104/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/104/10.png)>\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr) return 0;\n        return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n    }\n};\n```\n```java [sol1-Java]\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        } else {\n            int leftHeight = maxDepth(root.left);\n            int rightHeight = maxDepth(root.right);\n            return Math.max(leftHeight, rightHeight) + 1;\n        }\n    }\n}\n```\n```python [sol1-Python]\nclass Solution:\n    def maxDepth(self, root):\n        if root is None: \n            return 0 \n        else: \n            left_height = self.maxDepth(root.left) \n            right_height = self.maxDepth(root.right) \n            return max(left_height, right_height) + 1 \n```\n\n```golang [sol1-Golang]\nfunc maxDepth(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    return max(maxDepth(root.Left), maxDepth(root.Right)) + 1\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint maxDepth(struct TreeNode *root) {\n    if (root == NULL) return 0;\n    return fmax(maxDepth(root->left), maxDepth(root->right)) + 1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为二叉树节点的个数。每个节点在递归中只被遍历一次。\n\n- 空间复杂度：$O(\\textit{height})$，其中 $\\textit{height}$ 表示二叉树的高度。递归函数需要栈空间，而栈空间取决于递归的深度，因此空间复杂度等价于二叉树的高度。 \n\n#### 方法二：广度优先搜索\n\n**思路与算法**\n\n我们也可以用「广度优先搜索」的方法来解决这道题目，但我们需要对其进行一些修改，此时我们广度优先搜索的队列里存放的是「当前层的所有节点」。每次拓展下一层的时候，不同于广度优先搜索的每次只从队列里拿出一个节点，我们需要将队列里的所有节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，即我们是一层一层地进行拓展，最后我们用一个变量 $\\textit{ans}$ 来维护拓展的次数，该二叉树的最大深度即为 $\\textit{ans}$。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        if (root == nullptr) return 0;\n        queue<TreeNode*> Q;\n        Q.push(root);\n        int ans = 0;\n        while (!Q.empty()) {\n            int sz = Q.size();\n            while (sz > 0) {\n                TreeNode* node = Q.front();Q.pop();\n                if (node->left) Q.push(node->left);\n                if (node->right) Q.push(node->right);\n                sz -= 1;\n            }\n            ans += 1;\n        } \n        return ans;\n    }\n};\n```\n```java [sol2-Java]\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        int ans = 0;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            while (size > 0) {\n                TreeNode node = queue.poll();\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n                size--;\n            }\n            ans++;\n        }\n        return ans;\n    }\n}\n```\n\n```golang [sol2-Golang]\nfunc maxDepth(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    queue := []*TreeNode{}\n    queue = append(queue, root)\n    ans := 0\n    for len(queue) > 0 {\n        sz := len(queue)\n        for sz > 0 {\n            node := queue[0]\n            queue = queue[1:]\n            if node.Left != nil {\n                queue = append(queue, node.Left)\n            }\n            if node.Right != nil {\n                queue = append(queue, node.Right)\n            }\n            sz--\n        }\n        ans++\n    }\n    return ans\n}\n```\n\n```C [sol2-C]\nstruct QueNode {\n    struct TreeNode *p;\n    struct QueNode *next;\n};\n\nvoid init(struct QueNode **p, struct TreeNode *t) {\n    (*p) = (struct QueNode *)malloc(sizeof(struct QueNode));\n    (*p)->p = t;\n    (*p)->next = NULL;\n}\n\nint maxDepth(struct TreeNode *root) {\n    if (root == NULL) return 0;\n    struct QueNode *left, *right;\n    init(&left, root);\n    right = left;\n    int ans = 0, sz = 1, tmp = 0;\n    while (left != NULL) {\n        tmp = 0;\n        while (sz > 0) {\n            if (left->p->left != NULL) {\n                init(&right->next, left->p->left);\n                right = right->next;\n                tmp++;\n            }\n            if (left->p->right != NULL) {\n                init(&right->next, left->p->right);\n                right = right->next;\n                tmp++;\n            }\n            left = left->next;\n            sz--;\n        }\n        sz += tmp;\n        ans++;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为二叉树的节点个数。与方法一同样的分析，每个节点只会被访问一次。\n\n- 空间复杂度：此方法空间的消耗取决于队列存储的元素数量，其在最坏情况下会达到 $O(n)$。",
      "createdAt": "2020-07-27T11:06:48.795687+00:00",
      "hitCount": 168463,
      "identifier": "5uipop",
      "isEditorsPick": false,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hua-jie-suan-fa-104-er-cha-shu-de-zui-da-shen-du-b",
        "title": "画解算法：104. 二叉树的最大深度"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-depth-of-binary-tree"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 155,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 13,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 12,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-cha-shu-de-zui-da-shen-du-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 方法一：深度优先搜索 思路与算法 如果我们知道了左子树和右子树的最大深度 $l$ 和 $r$，那么该二叉树的最大深度即为 \\max(l,r) + 1 而左子树和右子树的最大深度又可以以同样的方式进行计算。因此我们可以用「深度优先搜索」的方法来计算二叉树的最大深度。具体而言，在计算当前二叉树的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二叉树的最大深度",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 183,
        "id": 349250,
        "viewCount": 127438
      },
      "uuid": "5uipop",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/081BA0F0D1FC43B88F3FB94F9AE7628F-6-2.png",
          "duration": 181.0773,
          "videoId": "9a3f5a7d4ab94438b1ee42cf94b67890"
        }
      ]
    }
  }
}
