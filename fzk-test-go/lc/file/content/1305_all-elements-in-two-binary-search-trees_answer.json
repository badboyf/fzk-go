{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：遍历 + 排序\n\n我们可以想到的最简单的方法是，对两棵树进行任意形式的遍历（深度优先搜索、广度优先搜索、前序遍历、中序遍历、后序遍历），并将遍历到的所有元素放入一个数组中，最后对这个数组进行排序即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void dfs(TreeNode* node, vector<int>& ans) {\n        if (!node) {\n            return;\n        }\n        ans.push_back(node->val);\n        dfs(node->left, ans);\n        dfs(node->right, ans);\n    }\n\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        vector<int> ans;\n        dfs(root1, ans);\n        dfs(root2, ans);\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        ans = list()\n\n        def dfs(node):\n            if not node:\n                return\n            ans.append(node.val)\n            dfs(node.left)\n            dfs(node.right)\n        \n        dfs(root1)\n        dfs(root2)\n        ans.sort()\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O((M + N) \\log (M + N))$，其中 $M$ 和 $N$ 是两棵树中的节点个数。\n\n- 空间复杂度：$O(H_M + H_N + \\log(M + N))$，其中 $H_M$ 和 $H_N$ 是两棵树的高度，这里只计算除了存储答案的数组以外需要的额外空间。上面给出的代码使用深度优先搜索对两棵树进行遍历，需要 $O(H_M + H_N)$ 的栈空间；在对数组进行排序时，需要 $\\log (M + N)$ 的栈空间。\n\n#### 方法二：中序遍历 + 归并排序\n\n方法一中并没有用到二叉搜索树本身的性质。如果我们对二叉搜索树进行中序遍历，就可以直接得到树中所有元素升序排序后的结果。因此我们可以对两棵树分别进行中序遍历，得到数组 `v1` 和 `v2`，它们分别存放了两棵树中的所有元素，且均已有序。在这之后，我们通过归并排序的方法对 `v1` 和 `v2` 进行排序，就可以得到最终的结果。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void dfs(TreeNode* node, vector<int>& v) {\n        if (!node) {\n            return;\n        }\n        dfs(node->left, v);\n        v.push_back(node->val);\n        dfs(node->right, v);\n    }\n\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        vector<int> v1, v2;\n        dfs(root1, v1);\n        dfs(root2, v2);\n        \n        vector<int> ans;\n        int i = 0, j = 0;\n        while (i < v1.size() || j < v2.size()) {\n            if (i < v1.size() && (j == v2.size() || v1[i] <= v2[j])) {\n                ans.push_back(v1[i++]);\n            }\n            else {\n                ans.push_back(v2[j++]);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        def dfs(node, v):\n            if not node:\n                return\n            dfs(node.left, v)\n            v.append(node.val)\n            dfs(node.right, v)\n        \n        v1, v2 = list(), list()\n        dfs(root1, v1)\n        dfs(root2, v2)\n        ans, i, j = list(), 0, 0\n        while i < len(v1) or j < len(v2):\n            if i < len(v1) and (j == len(v2) or v1[i] <= v2[j]):\n                ans.append(v1[i])\n                i += 1\n            else:\n                ans.append(v2[j])\n                j += 1\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(M + N)$，其中 $M$ 和 $N$ 是两棵树中的节点个数。中序遍历的时间复杂度为 $O(M + N)$，归并排序的时间复杂度同样为 $O(M + N)$。\n\n- 空间复杂度：$O(M + N)$。我们需要使用额外的空间存储数组 `v1` 和 `v2`。",
      "createdAt": "2020-02-19T03:23:25.034933+00:00",
      "hitCount": 8396,
      "identifier": "8t5bgd",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zhong-xu-bian-li-pai-xu-by-mei-56-5jdk",
        "title": "中序遍历 + 排序"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "all-elements-in-two-binary-search-trees"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "liang-ke-er-cha-sou-suo-shu-zhong-de-suo-you-yua-3",
      "status": "PUBLISHED",
      "summary": " 方法一：遍历 + 排序\n我们可以想到的最简单的方法是，对两棵树进行任意形式的遍历（深度优先搜索、广度优先搜索、前序遍历、中序遍历、后序遍历），并将遍历到的所有元素放入一个数组中，最后对这个数组进行排序即可。\n复杂度分析\n\n\n时间复杂度：O((M + N) \\log (M + N))，其中 M 和 N 是两棵树中的节点",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "两棵二叉搜索树中的所有元素",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 31,
        "id": 101793,
        "viewCount": 6884
      },
      "uuid": "8t5bgd",
      "videosInfo": []
    }
  }
}
