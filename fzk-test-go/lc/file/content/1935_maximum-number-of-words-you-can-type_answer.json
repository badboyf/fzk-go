{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：遍历 + 哈希表\n\n**思路与算法**\n\n我们可以遍历字符串 $\\textit{text}$ 统计可以完全输入的单词数目。\n\n为了方便判断某个字符是否可被输入，我们用哈希集合维护因为损坏而无法输入的字符。同时，我们引入布尔变量 $\\textit{flag}$ 来表示当前字符所对应的单词是否可以被完全输入。$\\textit{flag}$ 初值为 $\\texttt{true}$，当取值为 $\\texttt{true}$ 时代表当前单词可被完全输入，当取值为 $\\texttt{false}$ 时则不可以。\n\n在遍历字符串时，根据当前字符的不同，会有三种情况：\n\n- 当前字符为空格，此时代表上一个单词已经结束。如果此时 $\\textit{flag}$ 为 $\\texttt{true}$ 则代表上一个单词可以被完全输入，我们需要将可以完全输入的单词数目加上 $1$。除此以外，我们还需要将 $\\textit{flag}$ 重置为初值 $\\texttt{true}$。\n\n- 当前字符为字母且不可被输入，那么当前字符所在单词不可被完全输入。我们需要将 $\\textit{flag}$ 置为 $\\texttt{false}$。\n\n- 当前字符为字母且可被输入，此时无需进行任何操作。\n\n注意在遍历结束后，我们还要检查 $\\textit{flag}$ 以判断最后一个单词是否可被完全输入并更新可以完全输入的单词数目。最终，我们返回该数目作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int canBeTypedWords(string text, string brokenLetters) {\n        unordered_set<char> broken;   // 无法输入的字符集合\n        for (char ch: brokenLetters){\n            broken.insert(ch);\n        }\n        int res = 0;   // 可以完全输入的单词数目\n        bool flag = true;   // 当前字符所在单词是否可被完全输入\n        for (char ch: text){\n            if (ch == ' '){\n                // 当前字符为空格，检查上一个单词状态，更新数目并初始化 flag\n                if (flag){\n                    ++res;\n                }\n                flag = true;\n            }\n            else if (broken.count(ch)){\n                // 当前字符不可被输入，所在单词无法被完全输入，更新 flag\n                flag = false;\n            }\n        }\n        // 判断最后一个单词状态并更新数目\n        if (flag){\n            ++res;\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:\n        broken = set(brokenLetters)   # 无法输入的字符集合\n        res = 0   # 可以完全输入的单词数目\n        flag = True   # 当前字符所在单词是否可被完全输入\n        for ch in text:\n            if ch == ' ':\n                # 当前字符为空格，检查上一个单词状态，更新数目并初始化 flag\n                if flag:\n                    res += 1\n                flag = True\n            elif ch in broken:\n                # 当前字符不可被输入，所在单词无法被完全输入，更新 flag\n                flag = False\n        # 判断最后一个单词状态并更新数目\n        if flag:\n            res += 1\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n + m)$，其中 $n$ 为 $\\textit{text}$ 的长度， $m$ 为无法输入字符的数目。维护无法输入字符哈希集合的时间复杂度为 $O(m)$，遍历 $\\textit{text}$ 计算可以完全输入单词数目的时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-07-18T15:55:33.044266+00:00",
      "hitCount": 1402,
      "identifier": "gwbnRj",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ezi-zai-fei-hua-e-shi-yong-ha-xi-shu-zu-f1som",
        "title": "ʚ自在飞花ɞ | 使用哈希数组空间换时间 O(n*m) -> O(n+m)"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-number-of-words-you-can-type"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "ke-yi-shu-ru-de-zui-da-dan-ci-shu-by-lee-5dpc",
      "status": "PUBLISHED",
      "summary": "方法一：遍历 + 哈希表 思路与算法 我们可以遍历字符串 $\\textit{text}$ 统计可以完全输入的单词数目。 为了方便判断某个字符是否可被输入，我们用哈希集合维护因为损坏而无法输入的字符。同时，我们引入布尔变量 $\\textit{flag}$ 来表示当前字符所对应的单词是否可以被完全输入。$\\textit{f",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "可以输入的最大单词数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 1,
        "id": 883398,
        "viewCount": 1179
      },
      "uuid": "gwbnRj",
      "videosInfo": []
    }
  }
}
