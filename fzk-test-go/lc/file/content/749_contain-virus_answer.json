{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法：模拟 [Accepted]\n让我们来模拟这个过程的一个回合，若仍有感染区域则重复这一步骤。\n\n**算法：**\n虽然实现过程很长，但是算法很简单。我们执行以下步骤：\n- 找到所有病毒区域（连续的部分），另外跟踪每个区域的边界（周围未受感染的区域）和该区域的周长。\n- 对病毒最多的区域进行隔离，计算所需要的防火墙，将其数量添加到答案中。\n- 剩余的病毒向外感染一个区域\n\n```Python [ ]\nclass Solution(object):\n    def containVirus(self, grid):\n        R, C = len(grid), len(grid[0])\n        def neighbors(r, c):\n            for nr, nc in ((r-1, c), (r+1, c), (r, c-1), (r, c+1)):\n                if 0 <= nr < R and 0 <= nc < C:\n                    yield nr, nc\n\n        def dfs(r, c):\n            if (r, c) not in seen:\n                seen.add((r, c))\n                regions[-1].add((r, c))\n                for nr, nc in neighbors(r, c):\n                    if grid[nr][nc] == 1:\n                        dfs(nr, nc)\n                    elif grid[nr][nc] == 0:\n                        frontiers[-1].add((nr, nc))\n                        perimeters[-1] += 1\n\n        ans = 0\n        while True:\n            #Find all regions, with associated frontiers and perimeters.\n            seen = set()\n            regions = []\n            frontiers = []\n            perimeters = []\n            for r, row in enumerate(grid):\n                for c, val in enumerate(row):\n                    if val == 1 and (r, c) not in seen:\n                        regions.append(set())\n                        frontiers.append(set())\n                        perimeters.append(0)\n                        dfs(r, c)\n\n            #If there are no regions left, break.\n            if not regions: break\n\n            #Add the perimeter of the region which will infect the most squares.\n            triage_index = frontiers.index(max(frontiers, key = len))\n            ans += perimeters[triage_index]\n\n            #Triage the most infectious region, and spread the rest of the regions.\n            for i, reg in enumerate(regions):\n                if i == triage_index:\n                    for r, c in reg:\n                        grid[r][c] = -1\n                else:\n                    for r, c in reg:\n                        for nr, nc in neighbors(r, c):\n                            if grid[nr][nc] == 0:\n                                grid[nr][nc] = 1\n\n        return ans\n```\n\n```Java [ ]\nclass Solution {\n    Set<Integer> seen;\n    List<Set<Integer>> regions;\n    List<Set<Integer>> frontiers;\n    List<Integer> perimeters;\n    int[][] grid;\n    int R, C;\n    int[] dr = new int[]{-1, 1, 0, 0};\n    int[] dc = new int[]{0, 0, -1, 1};\n\n    public int containVirus(int[][] grid) {\n        this.grid = grid;\n        R = grid.length;\n        C = grid[0].length;\n\n        int ans = 0;\n        while (true) {\n            seen = new HashSet();\n            regions = new ArrayList();\n            frontiers = new ArrayList();\n            perimeters = new ArrayList();\n\n            for (int r = 0; r < R; ++r) {\n                for (int c = 0; c < C; ++c) {\n                    if (grid[r][c] == 1 && !seen.contains(r*C + c)) {\n                        regions.add(new HashSet());\n                        frontiers.add(new HashSet());\n                        perimeters.add(0);\n                        dfs(r, c);\n                    }\n                }\n            }\n\n            if (regions.isEmpty()) break;\n            int triageIndex = 0;\n            for (int i = 0; i < frontiers.size(); ++i) {\n                if (frontiers.get(triageIndex).size() < frontiers.get(i).size())\n                    triageIndex = i;\n            }\n            ans += perimeters.get(triageIndex);\n\n            for (int i = 0; i < regions.size(); ++i) {\n                if (i == triageIndex) {\n                    for (int code: regions.get(i))\n                        grid[code / C][code % C] = -1;\n                } else {\n                    for (int code: regions.get(i)) {\n                        int r = code / C, c = code % C;\n                        for (int k = 0; k < 4; ++k) {\n                            int nr = r + dr[k], nc = c + dc[k];\n                            if (nr >= 0 && nr < R && nc >= 0 && nc < C && grid[nr][nc] == 0)\n                                grid[nr][nc] = 1;\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n\n    public void dfs(int r, int c) {\n        if (!seen.contains(r*C + c)) {\n            seen.add(r*C + c);\n            int N = regions.size()\n            regions.get(N - 1).add(r*C + c);\n            for (int k = 0; k < 4; ++k) {\n                int nr = r + dr[k], nc = c + dc[k];\n                if (nr >= 0 && nr < R && nc >= 0 && nc < C) {\n                    if (grid[nr][nc] == 1) {\n                        dfs(nr, nc);\n                    } else if (grid[nr][nc] == 0){\n                        frontiers.get(N - 1).add(nr*C + nc);\n                        perimeters.set(N - 1, perimeters.get(N - 1) + 1);\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O((RC)^{\\frac{4}{3}})$。其中 $R, C$ 是矩阵的行和列。在时间 $t$ 之后，存活的病毒区域的大小必须至少为 $t^2 + (t-1)^2$，因此在所有时间内移除的总数为 $\\Omega(t^3) \\leq RC$。\n* 空间复杂度：$O(R*C)$。",
      "createdAt": "2019-11-25T04:22:05.137012+00:00",
      "hitCount": 3428,
      "identifier": "IfIxeR",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "749-czui-jian-dan-yi-dong-de-jian-ji-dai-9lbg",
        "title": "749. c++最简单易懂的简洁代码实现 "
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "contain-virus"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "ge-chi-bing-du-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法：模拟 [Accepted] 让我们来模拟这个过程的一个回合，若仍有感染区域则重复这一步骤。 算法： 虽然实现过程很长，但是算法很简单。我们执行以下步骤： - 找到所有病毒区域（连续的部分），另外跟踪每个区域的边界（周围未受感染的区域）和该区域的周长。 - 对病毒最多的区域进行隔离，计算所需要的防火墙，将其数量添加",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "隔离病毒",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 2,
        "id": 47075,
        "viewCount": 2715
      },
      "uuid": "IfIxeR",
      "videosInfo": []
    }
  }
}
