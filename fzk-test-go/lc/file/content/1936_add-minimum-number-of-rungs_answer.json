{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟 + 贪心\n\n**思路与算法**\n\n我们可以模拟爬台阶的过程。\n\n每当计划爬上新一级台阶时，需要增设的台阶数目可以表示为当前位置与新一级台阶位置（目标位置）的高度差的函数。假设高度差为 $d\\ (> 0)$，可直接到达的两个台阶的**最大间隔**为 $\\textit{dist}$。此时我们可以判断 $d$ 与 $\\textit{dist}$ 的大小来判断是否需要新增台阶。\n\n如果 $d \\le \\textit{dist}$，此时无需新增台阶。如果 $d > \\textit{dist}$，此时无法直接到达，我们可以每隔 $\\textit{dist}$ 高度插入新台阶，直至新台阶与目标位置的间隔不大于$\\textit{dist}$。显然，这种方案所需增设台阶数目最小，对应的需要增设台阶数目为 \n\n$$\n\\left\\lfloor \\frac{d - 1}{\\textit{dist}} \\right\\rfloor.\n$$\n\n上式当 $0 < d \\le \\textit{dist}$ 时为 $0$，与对应情况相符，因此实际计算时无需额外讨论 $d$ 与 $\\textit{dist}$ 的大小关系。\n\n由于台阶数组 $\\textit{rungs}$ 严格递增，因此我们将当前高度初值设为 $0$，并按顺序遍历 $\\textit{rungs}$ 数组以模拟爬台阶的过程。每当遍历到新一级台阶时，我们计算与当前位置的高度差，进而计算最少需要增设的台阶数目，并将当前高度更新为新一级台阶的高度。我们维护这些台阶数目的总和，并最终返回作为答案。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int addRungs(vector<int>& rungs, int dist) {\n        int res = 0;   // 需要增设的梯子数目\n        int curr = 0;   // 当前高度\n        for (int h: rungs){\n            // 遍历数组计算高度差和最少添加数目，并更新当前高度\n            int d = h - curr;\n            res += (d - 1) / dist;\n            curr = h;\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def addRungs(self, rungs: List[int], dist: int) -> int:\n        res = 0   # 需要增设的梯子数目\n        curr = 0   # 当前高度\n        for h in rungs:\n            # 遍历数组计算高度差和最少添加数目，并更新当前高度\n            d = h - curr\n            res += (h - curr - 1) // dist\n            curr = h\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组 $\\textit{rungs}$ 的长度。即为遍历数组计算需要增设台阶数目的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-07-18T15:56:10.368267+00:00",
      "hitCount": 1016,
      "identifier": "wGTZvQ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-by-yuxiaochen99-pw68",
        "title": "c+贪心(新增的最少台阶数)"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "add-minimum-number-of-rungs"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "xin-zeng-de-zui-shao-tai-jie-shu-by-leet-y0de",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 + 贪心 思路与算法 我们可以模拟爬台阶的过程。 每当计划爬上新一级台阶时，需要增设的台阶数目可以表示为当前位置与新一级台阶位置（目标位置）的高度差的函数。假设高度差为 $d\\ (> 0)$，可直接到达的两个台阶的最大间隔为 $\\textit{dist}$。此时我们可以判断 $d$ 与 $\\textit{",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Simulation",
          "nameTranslated": "模拟",
          "slug": "simulation",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "新增的最少台阶数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 4,
        "id": 883402,
        "viewCount": 834
      },
      "uuid": "wGTZvQ",
      "videosInfo": []
    }
  }
}
