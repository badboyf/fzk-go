{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![...中查找元素的第一个和最后一个位置.mp4](213522fb-128b-4c73-bb88-efd20280c04d)\n\n### 📖 文字题解\n#### 方法一：二分查找\n\n直观的思路肯定是从前往后遍历一遍。用两个变量记录第一次和最后一次遇见 $\\textit{target}$ 的下标，但这个方法的时间复杂度为 $O(n)$，没有利用到数组**升序排列**的条件。\n\n由于数组已经排序，因此整个数组是**单调递增**的，我们可以利用二分法来加速查找的过程。\n\n考虑 $\\textit{target}$ 开始和结束位置，其实我们要找的就是数组中「第一个等于 $\\textit{target}$ 的位置」（记为 $\\textit{leftIdx}$）和「第一个大于 $\\textit{target}$ 的位置**减一**」（记为 $\\textit{rightIdx}$）。\n\n二分查找中，寻找 $\\textit{leftIdx}$ 即为在数组中寻找第一个**大于等于** $\\textit{target}$ 的下标，寻找 $\\textit{rightIdx}$ 即为在数组中寻找第一个**大于** $\\textit{target}$ 的下标，然后将下标减一。两者的判断条件不同，为了代码的复用，我们定义 `binarySearch(nums, target, lower)` 表示在 $\\textit{nums}$ 数组中二分查找 $\\textit{target}$ 的位置，如果 $\\textit{lower}$ 为 $\\rm true$，则查找第一个**大于等于** $\\textit{target}$ 的下标，否则查找第一个**大于** $\\textit{target}$ 的下标。\n\n最后，因为 $\\textit{target}$ 可能不存在数组中，因此我们需要重新校验我们得到的两个下标 $\\textit{leftIdx}$ 和 $\\textit{rightIdx}$，看是否符合条件，如果符合条件就返回 $[\\textit{leftIdx},\\textit{rightIdx}]$，不符合就返回 $[-1,-1]$。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/34/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/34/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/34/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/34/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/34/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/34/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/34/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/34/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/34/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/34/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/34/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/34/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/34/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/34/14.png)>\n\n```C++ [sol1-C++]\nclass Solution { \npublic:\n    int binarySearch(vector<int>& nums, int target, bool lower) {\n        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return vector<int>{leftIdx, rightIdx};\n        } \n        return vector<int>{-1, -1};\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int leftIdx = binarySearch(nums, target, true);\n        int rightIdx = binarySearch(nums, target, false) - 1;\n        if (leftIdx <= rightIdx && rightIdx < nums.length && nums[leftIdx] == target && nums[rightIdx] == target) {\n            return new int[]{leftIdx, rightIdx};\n        } \n        return new int[]{-1, -1};\n    }\n\n    public int binarySearch(int[] nums, int target, boolean lower) {\n        int left = 0, right = nums.length - 1, ans = nums.length;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] > target || (lower && nums[mid] >= target)) {\n                right = mid - 1;\n                ans = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst binarySearch = (nums, target, lower) => {\n    let left = 0, right = nums.length - 1, ans = nums.length;\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        if (nums[mid] > target || (lower && nums[mid] >= target)) {\n            right = mid - 1;\n            ans = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n\nvar searchRange = function(nums, target) {\n    let ans = [-1, -1];\n    const leftIdx = binarySearch(nums, target, true);\n    const rightIdx = binarySearch(nums, target, false) - 1;\n    if (leftIdx <= rightIdx && rightIdx < nums.length && nums[leftIdx] === target && nums[rightIdx] === target) {\n        ans = [leftIdx, rightIdx];\n    } \n    return ans;\n};\n```\n\n```Golang [sol1-Golang]\nfunc searchRange(nums []int, target int) []int {\n    leftmost := sort.SearchInts(nums, target)\n    if leftmost == len(nums) || nums[leftmost] != target {\n        return []int{-1, -1}\n    }\n    rightmost := sort.SearchInts(nums, target + 1) - 1\n    return []int{leftmost, rightmost}\n}\n```\n\n```C [sol1-C]\nint binarySearch(int* nums, int numsSize, int target, bool lower) {\n    int left = 0, right = numsSize - 1, ans = numsSize;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (nums[mid] > target || (lower && nums[mid] >= target)) {\n            right = mid - 1;\n            ans = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return ans;\n}\n\nint* searchRange(int* nums, int numsSize, int target, int* returnSize) {\n    int leftIdx = binarySearch(nums, numsSize, target, true);\n    int rightIdx = binarySearch(nums, numsSize, target, false) - 1;\n    int* ret = malloc(sizeof(int) * 2);\n    *returnSize = 2;\n    if (leftIdx <= rightIdx && rightIdx < numsSize && nums[leftIdx] == target && nums[rightIdx] == target) {\n        ret[0] = leftIdx, ret[1] = rightIdx;\n        return ret;\n    }\n    ret[0] = -1, ret[1] = -1;\n    return ret;\n}\n```\n\n\n**复杂度分析**\n\n* 时间复杂度： $O(\\log n)$ ，其中 $n$ 为数组的长度。二分查找的时间复杂度为 $O(\\log n)$，一共会执行两次，因此总时间复杂度为 $O(\\log n)$。\n\n* 空间复杂度：$O(1)$ 。只需要常数空间存放若干变量。",
      "createdAt": "2020-11-30T15:32:06.047209+00:00",
      "hitCount": 179792,
      "identifier": "SNvsCN",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-8qie",
        "title": "34. 在排序数组中查找元素的第一个和最后一个位置"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-first-and-last-position-of-element-in-sorted-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 132,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-su-de-di-3-4",
      "status": "PUBLISHED",
      "summary": "📺 视频题解\n📖 文字题解\n 方法一：二分查找\n直观的思路肯定是从前往后遍历一遍。用两个变量记录第一次和最后一次遇见 \\textit{target} 的下标，但这个方法的时间复杂度为 O(n)，没有利用到数组升序排列的条件。\n由于数组已经排序，因此整个数组是单调递增的，我们可以利用二分法来加速查找的过程。\n考虑 \\",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "在排序数组中查找元素的第一个和最后一个位置",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 346,
        "id": 504484,
        "viewCount": 115637
      },
      "uuid": "SNvsCN",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/95729530B4234ECBA89EA3A78C3ED7A7-6-2.png",
          "duration": 492.928,
          "videoId": "8d9a1d2a67674e47ad1cdb92dfc629bf"
        }
      ]
    }
  }
}
