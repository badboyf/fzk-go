{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：按列排序\n\n我们将这些点按照 `x` 轴（即列）排序，那么对于同一列的两个点 `(x, y1)` 和 `(x, y2)`，我们找出它作为右边界的最小的矩形。这可以通过记录下我们之前遇到的所有 `(y1, y2)` 点对来做到。\n\n```Java [sol1]\nclass Solution {\n    public int minAreaRect(int[][] points) {\n        Map<Integer, List<Integer>> rows = new TreeMap();\n        for (int[] point: points) {\n            int x = point[0], y = point[1];\n            rows.computeIfAbsent(x, z-> new ArrayList()).add(y);\n        }\n\n        int ans = Integer.MAX_VALUE;\n        Map<Integer, Integer> lastx = new HashMap();\n        for (int x: rows.keySet()) {\n            List<Integer> row = rows.get(x);\n            Collections.sort(row);\n            for (int i = 0; i < row.size(); ++i)\n                for (int j = i+1; j < row.size(); ++j) {\n                    int y1 = row.get(i), y2 = row.get(j);\n                    int code = 40001 * y1 + y2;\n                    if (lastx.containsKey(code))\n                        ans = Math.min(ans, (x - lastx.get(code)) * (y2-y1));\n                    lastx.put(code, x);\n                }\n        }\n\n        return ans < Integer.MAX_VALUE ? ans : 0;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def minAreaRect(self, points):\n        columns = collections.defaultdict(list)\n        for x, y in points:\n            columns[x].append(y)\n        lastx = {}\n        ans = float('inf')\n\n        for x in sorted(columns):\n            column = columns[x]\n            column.sort()\n            for j, y2 in enumerate(column):\n                for i in xrange(j):\n                    y1 = column[i]\n                    if (y1, y2) in lastx:\n                        ans = min(ans, (x - lastx[y1,y2]) * (y2 - y1))\n                    lastx[y1, y2] = x\n        return ans if ans < float('inf') else 0\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是数组 `points` 的长度。\n\n* 空间复杂度：$O(N)$。\n\n#### 方法二：枚举对角线\n\n我们将所有点放入集合中，并枚举矩形对角线上的两个点，并判断另外两个点是否出现在集合中。例如我们在枚举到 `(1, 1)` 和 `(5, 5)` 时，我们需要判断 `(1, 5)` 和 `(5, 1)` 是否也出现在集合中。\n\n```Java [sol2]\nclass Solution {\n    public int minAreaRect(int[][] points) {\n        Set<Integer> pointSet = new HashSet();\n        for (int[] point: points)\n            pointSet.add(40001 * point[0] + point[1]);\n\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < points.length; ++i)\n            for (int j = i+1; j < points.length; ++j) {\n                if (points[i][0] != points[j][0] && points[i][1] != points[j][1]) {\n                    if (pointSet.contains(40001 * points[i][0] + points[j][1]) &&\n                            pointSet.contains(40001 * points[j][0] + points[i][1])) {\n                        ans = Math.min(ans, Math.abs(points[j][0] - points[i][0]) *\n                                            Math.abs(points[j][1] - points[i][1]));\n                    }\n                }\n            }\n\n        return ans < Integer.MAX_VALUE ? ans : 0;\n    }\n}\n```\n\n```Python [sol2]\nclass Solution(object):\n    def minAreaRect(self, points):\n        S = set(map(tuple, points))\n        ans = float('inf')\n        for j, p2 in enumerate(points):\n            for i in xrange(j):\n                p1 = points[i]\n                if (p1[0] != p2[0] and p1[1] != p2[1] and\n                        (p1[0], p2[1]) in S and (p2[0], p1[1]) in S):\n                    ans = min(ans, abs(p2[0] - p1[0]) * abs(p2[1] - p1[1]))\n        return ans if ans < float('inf') else 0\n```\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是数组 `points` 的长度。\n\n* 空间复杂度：$O(N)$。",
      "createdAt": "2019-07-22T09:12:37.705639+00:00",
      "hitCount": 9374,
      "identifier": "YWJE0Y",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "sao-miao-xian-by-xiaowufeixia-2dme",
        "title": "扫描线"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-area-rectangle"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-xiao-mian-ji-ju-xing-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：按列排序\n我们将这些点按照 x 轴（即列）排序，那么对于同一列的两个点 (x, y1) 和 (x, y2)，我们找出它作为右边界的最小的矩形。这可以通过记录下我们之前遇到的所有 (y1, y2) 点对来做到。\n复杂度分析\n\n\n时间复杂度：O(N^2)，其中 N 是数组 points 的长度。\n\n\n空间复杂度",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最小面积矩形",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 12,
        "id": 15996,
        "viewCount": 6642
      },
      "uuid": "YWJE0Y",
      "videosInfo": []
    }
  }
}
