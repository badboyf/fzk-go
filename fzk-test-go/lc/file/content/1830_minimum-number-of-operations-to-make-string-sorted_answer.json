{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 前言\n\n读者需要掌握如下进阶知识点才能解决本题：\n\n- 排列数计算。假设有 $a_0$ 个物品 $0$，$a_1$ 个物品 $1$，...，$a_{n-1}$ 个物品 $n-1$，我们需要将它们排成一排，那么方案数为\n\n    $$\n    \\frac{(a_0 + a_1 + \\cdots + a_{n-1})!}{a_0! \\cdot a_1! \\cdot \\cdots \\cdot a_{n-1}!}\n    $$\n\n- 乘法逆元。如果需要计算 $\\dfrac{b}{a}$ 对 $m$ 取模的值，$b$ 和 $a$ 均为表达式（例如上面排列数的分子与分母）并且它们实际的值非常大，无法直接进行计算，那么我们可以求出 $a$ 在模 $m$ 意义下的乘法逆元 $a^{-1}$，此时有\n\n    $$\n    \\frac{b}{a} \\equiv b \\cdot a^{-1} \\quad (\\bmod ~m)\n    $$\n\n    这样将除法运算转化为乘法运算，就可以在计算的过程中进行取模了。\n    乘法逆元的具体计算方法可以参考题解的最后一节「进阶知识点：乘法逆元」。\n\n#### 方法一：组合数学\n\n**提示 $1$**\n\n观察给定的示例 $1$，我们可以发现，每一轮操作会将字符串 $s$ 变为新的字符串 $s'$，满足 $s$ 和 $s'$ 包含的字符（种类以及数量）完全相同，并且根据字典序，$s'$ 是 $s$ 的前一个字符串。\n\n**提示 $1$ 证明**\n\n设字符串 $s$ 的字符依次为 $s[0], s[1], \\cdots, s[n-1]$。\n\n在第一步操作中，我们会找出最大的 $i$，满足 $s[i-1] > s[i]$。这也说明了\n\n$$\ns[i] \\leq s[i+1] \\leq \\cdots \\leq s[n-1]\n$$\n\n即字符串 $s$ **从 $i$ 开始的后缀已经是字典序最小的了**。要想得到 $s'$，我们必须考虑将 $s[i-1]$ 替换为一个更小的字符，可选字符的范围即为 $s[i]$ 到 $s[n-1]$。\n\n在第二步操作中，我们会找出最大的 $j$，满足\n\n$$\ns[i] \\leq s[i+1] \\leq \\cdots s[j] < s[i-1] \\leq s[j+1] \\leq \\cdots \\leq s[n-1]\n$$\n\n也就是说，我们会将 $s[i-1]$ 替换成更小的 $s[j]$，此外不存在比 $s[i-1]$ 小且比 $s[j]$ 大的字符。\n\n在第三步操作中，我们交换 $s[i-1]$ 与 $s[j]$，此时 $s[i]$ 到 $s[n-1]$ 仍然是有序的。但此时并没有得到 $s'$，还需要进行第四步操作，翻转 $s[i]$ 到 $s[n-1]$。这样一来，$s[i]$ 到 $s[n-1]$ 反向有序，这就得到了 $s$ 的前一个字符串 $s'$。\n\n如果我们将上述证明过程中的不等号全部反向，就可以得到 $s$ 的后一个字符串，这也是求数组或字符串元素的下一个排列的常用方法，读者可以尝试使用该方法解决「[31. 下一个排列](https://leetcode-cn.com/problems/next-permutation/)」。\n\n**提示 $2$**\n\n根据提示 $1$，我们需要求出的答案 $\\it ans$，等价于 $s$ 是从小到大的第 $\\it ans$ 个排列。\n\n因此，我们可以考虑求出比 $s$ 小的排列的个数，即可得到最终的答案。\n\n**思路与算法**\n\n我们可以使用迭代的方法求出比 $s$ 小的排列的个数。\n\n我们从 $s[0]$ 开始考虑，如果某一个排列 $t$ 的首个字符 $t[0] < s[0]$，那么 $t$ 一定比 $s$ 小。\n\n如何求出满足 $t[0] < s[0]$ 的排列个数呢？在 $s$ 的全部 $n$ 个字符中，如果有 $\\textit{rank}(s[0])$ 个比 $s[0]$ 小的字符，那么 $t$ 个首个字符在可以在这些字符中任意选择，方案数为 $\\textit{rank}(s[0])$；剩余的 $t[1]$ 到 $t[n-1]$ 可以任意排列，方案数为 $(n-1)!$，因此满足 $t[0] < s[0]$ 的排列个数为：\n\n$$\n\\textit{rank}(s[0]) \\times (n-1)!\n$$\n\n这样的计算方法并没有考虑到重复字符的情况。因此我们需要统计 $s[0]$ 到 $s[n-1]$ 中每一种字符出现的次数，设字符 $c$ 出现的次数为 $\\textit{freq}[c]$，那么无重复计数的排列个数应当为：\n\n$$\n\\frac{\\textit{rank}(s[0]) \\times (n-1)!}{\\prod_c \\textit{freq}[c]!}\n$$\n\n这样我们就求出了所有满足 $t[0] < s[0]$ 的排列个数。\n\n除此之外，如果 $t$ 要比 $s$ 小，那么需要满足 $t[0] = s[0]$ 并且 $t[1]$ 到 $t[n-1]$ 对应的排列需要比 $s[1]$ 到 $s[n-1]$ 对应的排列小。这就变成了一个完全相同，但规模减少了 $1$ 的问题，我们就可以迭代地计算下去，将计算出的「无重复计数的排列个数」进行累加，直到字符串的末尾。\n\n**例子**\n\n我们以字符串 $s = \\texttt{leetcode}$ 为例，模拟以下迭代计算的过程。\n\n- 考虑 $s[0]$ 时，字符数量为 $\\{ \\texttt{c}: 1, \\texttt{d}: 1, \\texttt{e}: 3, \\texttt{l}: 1, \\texttt{o}: 1, \\texttt{t}: 1 \\}$。比 $s[0]=\\texttt{l}$ 小的字符有 $1+1+3=5$ 个，那么排列个数为：\n\n    $$\n    \\frac{5 \\times 7!}{1! \\times 1! \\times 3! \\times 1! \\times 1! \\times 1!} = 4200\n    $$\n\n- 考虑 $s[1]$ 时，字符数量为 $\\{ \\texttt{c}: 1, \\texttt{d}: 1, \\texttt{e}: 3, \\texttt{o}: 1, \\texttt{t}: 1 \\}$。比 $s[1]=\\texttt{e}$ 小的字符有 $1+1=2$ 个，那么排列个数为：\n\n    $$\n    \\frac{2 \\times 6!}{1! \\times 1! \\times 3! \\times 1! \\times 1!} = 240\n    $$\n\n- 考虑 $s[2]$ 时，字符数量为 $\\{ \\texttt{c}: 1, \\texttt{d}: 1, \\texttt{e}: 2, \\texttt{o}: 1, \\texttt{t}: 1 \\}$。比 $s[2]=\\texttt{e}$ 小的字符有 $1+1=2$ 个，那么排列个数为：\n\n    $$\n    \\frac{2 \\times 5!}{1! \\times 1! \\times 2! \\times 1! \\times 1!} = 120\n    $$\n\n- 考虑 $s[3]$ 时，字符数量为 $\\{ \\texttt{c}: 1, \\texttt{d}: 1, \\texttt{e}: 1, \\texttt{o}: 1, \\texttt{t}: 1 \\}$。比 $s[3]=\\texttt{t}$ 小的字符有 $1+1+1+1+1=4$ 个，那么排列个数为：\n\n    $$\n    \\frac{4 \\times 4!}{1! \\times 1! \\times 1! \\times 1! \\times 1!} = 96\n    $$\n\n- 考虑 $s[4]$ 时，字符数量为 $\\{ \\texttt{c}: 1, \\texttt{d}: 1, \\texttt{e}: 1, \\texttt{o}: 1 \\}$。没有比 $s[4]=\\texttt{c}$ 小的字符，排列个数为 $0$；\n\n- 考虑 $s[5]$ 时，字符数量为 $\\{ \\texttt{d}: 1, \\texttt{e}: 1, \\texttt{o}: 1 \\}$。比 $s[5]=\\texttt{o}$ 小的字符有 $1+1=2$ 个，那么排列个数为：\n\n    $$\n    \\frac{2 \\times 2!}{1! \\times 1! \\times 1!} = 4\n    $$\n\n- 考虑 $s[6]$ 时，字符数量为 $\\{ \\texttt{d}: 1, \\texttt{e}: 1 \\}$。没有比 $s[6]=\\texttt{o}$ 小的字符，排列个数为 $0$；\n\n- $s[7]$ 已经到达字符串 $s$ 的末尾，一定没有比它小的字符，无需考虑。\n\n因此，$s = \\texttt{leetcode}$ 是第\n\n$$\n4200+240+120+96+4=4660\n$$\n\n个排列。\n\n**细节**\n\n由于我们需要用到大量的阶乘，因此我们可以预处理出所有 $n$ 以内的阶乘对 $m$ 取模的值。同时，由于阶乘会出现在分母的位置，我们还需要预处理出所有 $n$ 以内的阶乘在模 $m$ 意义下的乘法逆元。\n\n更多的细节可以参考代码中的注释。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n    using LL = long long;\n    \npublic:\n    // 快速幂，用来计算 x^y mod m\n    int quickmul(int x, int y) {\n        int ret = 1, mul = x;\n        while (y) {\n            if (y & 1) {\n                ret = (LL)ret * mul % mod;\n            }\n            mul = (LL)mul * mul % mod;\n            y >>= 1;\n        }\n        return ret;\n    }\n    \n    int makeStringSorted(string s) {\n        int n = s.size();\n        \n        // fac[i] 表示 i! mod m\n        // facinv[i] 表示 i! 在 mod m 意义下的乘法逆元\n        vector<int> fac(n + 1), facinv(n + 1);\n        fac[0] = facinv[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            fac[i] = (LL)fac[i - 1] * i % mod;\n            // 使用费马小定理 + 快速幂计算乘法逆元\n            facinv[i] = quickmul(fac[i], mod - 2);\n        }\n        \n        // freq 存储每个字符出现的次数\n        vector<int> freq(26);\n        for (char ch: s) {\n            ++freq[ch - 'a'];\n        }\n        \n        int ans = 0;\n        for (int i = 0; i < n - 1; ++i) {\n            // rank 求出比 s[i] 小的字符数量\n            int rank = 0;\n            for (int j = 0; j < s[i] - 'a'; ++j) {\n                rank += freq[j];\n            }\n            // 排列个数的分子\n            int cur = (LL)rank * fac[n - i - 1] % mod;\n            // 依次乘分母每一项阶乘的乘法逆元\n            for (int j = 0; j < 26; ++j) {\n                cur = (LL)cur * facinv[freq[j]] % mod;\n            }\n            ans = (ans + cur) % mod;\n            --freq[s[i] - 'a'];\n        }\n        \n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def makeStringSorted(self, s: str) -> int:\n        mod = 10**9 + 7\n        \n        # 快速幂，用来计算 x^y mod m\n        def quickmul(x: int, y: int) -> int:\n            # Python 有方便的内置函数\n            return pow(x, y, mod)\n    \n        n = len(s)\n        \n        # fac[i] 表示 i! mod m\n        # facinv[i] 表示 i! 在 mod m 意义下的乘法逆元\n        fac, facinv = [0] * (n + 1), [0] * (n + 1)\n        fac[0] = facinv[0] = 1\n        for i in range(1, n):\n            fac[i] = fac[i - 1] * i % mod\n            # 使用费马小定理 + 快速幂计算乘法逆元\n            facinv[i] = quickmul(fac[i], mod - 2)\n        \n        # freq 存储每个字符出现的次数\n        freq = collections.Counter(s)\n        \n        ans = 0\n        for i in range(n - 1):\n            # rank 求出比 s[i] 小的字符数量\n            rank = sum(occ for ch, occ in freq.items() if ch < s[i])\n            # 排列个数的分子\n            cur = rank * fac[n - i - 1] % mod\n            # 依次乘分母每一项阶乘的乘法逆元\n            for ch, occ in freq.items():\n                cur = cur * facinv[occ] % mod\n            \n            ans += cur\n            freq[s[i]] -= 1\n            if freq[s[i]] == 0:\n                freq.pop(s[i])\n        \n        return ans % mod\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log \\textit{mod} + n|\\Sigma|)$，其中 $n$ 是字符串的长度，$\\textit{mod}=10^9+7$ 为取模数，$\\Sigma$ 是字符集，本题中字符串只包含小写字母，因此 $|\\Sigma|=26$。时间复杂度包含如下部分：\n\n    - 预处理阶乘的时间复杂度为 $O(n)$；\n    - 预处理阶乘的乘法逆元的时间复杂度为 $O(n \\log \\textit{mod})$，这一步也可以根据一些性质优化至 $O(n)$，感兴趣的读者可以尝试搜索「线性逆元」进行解决；\n    - 迭代计算的时间复杂度为 $O(n|\\Sigma|)$。\n\n- 空间复杂度：$O(n + |\\Sigma|)$。我们需要 $O(n)$ 的空间存储预处理的阶乘以及阶乘的乘法逆元，$O(|\\Sigma|)$ 的空间存储每种字符的出现次数。\n\n#### 进阶知识点：乘法逆元\n\n设模数为 $m$（在本题中 $m=10^9+7$），对于一个整数 $a$，如果存在另一个整数 $a^{-1}~(0 < a^{-1} < m)$，满足\n\n$$\na a^{-1} \\equiv 1 ~ (\\bmod ~ m)\n$$\n\n那么我们称 $a^{-1}$ 是 $a$ 的「乘法逆元」。\n\n当 $a$ 是 $m$ 的倍数时，显然 $a^{-1}$ 不存在。而当 $a$ 不是 $m$ 的倍数时，根据上式可得\n\n$$\naa^{-1} = km + 1, \\quad k \\in \\mathbb{N}\n$$\n\n整理得\n\n$$\na^{-1} \\cdot a - k \\cdot m = 1\n$$\n\n**若 $m$ 为质数**，根据「裴蜀定理」，$\\text{gcd}(a, m) = 1$，因此必存在整数 $a^{-1}$ 和 $k$ 使得上式成立。\n\n如果 $(a^{-1}_0, k_0)$ 是一组解，那么\n\n$$\n(a^{-1}_0 + cm, k_0 + ca), \\quad c \\in \\mathbb{Z}\n$$\n\n都是上式的解。因此必然存在一组解中的 $a_0^{-1}$ 满足 $0 < a_0^{-1} < m$，即为我们所求的 $a^{-1}$。\n\n那么如何求出 $a^{-1}$ 呢？**当 $m$ 为质数时**，一种简单的方法是使用「费马小定理」，即\n\n$$\na^{m-1} \\equiv 1 ~ (\\bmod ~ m)\n$$\n\n那么有\n\n$$\n\\left.\n\\begin{aligned}\n& a^{m-1} a^{-1} \\equiv a^{-1} \\\\\n\\Leftrightarrow ~ & a^{m-2} a a^{-1} \\equiv a^{-1} \\\\\n\\Leftrightarrow ~ & a^{m-2} \\equiv a^{-1}\n\\end{aligned}\n\\right. \\quad (\\bmod ~ m)\n$$\n\n因此，$a^{-1}$ 就等于 $a^{m-2}$ 对 $m$ 取模的结果。而计算 $a^{m-2}$ 的方法相对简单，我们可以使用「快速幂」，时间复杂度为 $O(\\log m)$，具体可以参考「[50. Pow(x, n) 的官方题解](https://leetcode-cn.com/problems/powx-n/solution/powx-n-by-leetcode-solution/)」。\n\n**当 $m$ 不为质数时**，我们可以使用「[扩展欧几里得算法](https://baike.baidu.com/item/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95)」求出乘法逆元，但该知识点与本题无关，这里不再赘述。\n\n乘法逆元可以使得我们在取模的意义下，化除法为乘法。例如当我们需要求出 $\\dfrac{b}{a}$ 对 $m$ 取模的结果，那么可以使用乘法逆元\n\n$$\n\\frac{b}{a} \\equiv b \\cdot a^{-1} ~ (\\bmod ~ m)\n$$\n\n帮助我们进行求解。由于**乘法在取模的意义下满足分配律**，即\n\n$$\n(a \\times b) \\bmod m = \\big((a \\bmod m) \\times (b \\bmod m)\\big) \\bmod m\n$$\n\n而除法在取模的意义下并不满足分配律。因此当 $a$ 和 $b$ 的求解过程中本身就包含取模运算时，我们仍然可以得到正确的 $\\dfrac{b}{a}$ 对 $m$ 取模的结果。",
      "createdAt": "2021-04-17T16:24:32.962409+00:00",
      "hitCount": 3581,
      "identifier": "3ANF6q",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "bi-jiao-hao-li-jie-de-pythondai-ma-by-se-f4tw",
        "title": "比较好理解的python代码"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-number-of-operations-to-make-string-sorted"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 27,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "shi-zi-fu-chuan-you-xu-de-zui-shao-cao-z-qgra",
      "status": "PUBLISHED",
      "summary": "前言 读者需要掌握如下进阶知识点才能解决本题： 排列数计算。假设有 $a_0$ 个物品 $0$，$a_1$ 个物品 $1$，...，$a_{n-1}$ 个物品 $n-1$，我们需要将它们排成一排，那么方案数为 \\frac{(a_0 + a_1 + \\cdots + a_{n-1})!}{a_0! \\cdot a_1! ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "使字符串有序的最少操作次数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 30,
        "id": 728290,
        "viewCount": 2405
      },
      "uuid": "3ANF6q",
      "videosInfo": []
    }
  }
}
