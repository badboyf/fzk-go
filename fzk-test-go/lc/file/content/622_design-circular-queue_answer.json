{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：数组\n\n**思路**\n\n根据问题描述，该问题使用的数据结构应该是首尾相连的 ***环***。\n\n任何数据结构中都不存在环形结构，但是可以使用一维 ***数组*** 模拟，通过操作数组的索引构建一个 ***虚拟*** 的环。很多复杂数据结构都可以通过数组实现。\n\n对于一个固定大小的数组，任何位置都可以是队首，只要知道队列长度，就可以根据下面公式计算出队尾位置：\n\n$$\n\\text{tailIndex} = (\\text{headIndex} + \\text{count} - 1) \\mod \\text{capacity}\n$$\n\n其中 `capacity` 是数组长度，`count` 是队列长度，`headIndex` 和 `tailIndex` 分别是队首 `head` 和队尾 `tail` 索引。下图展示了使用数组实现循环的队列的例子。\n\n![](https://pic.leetcode-cn.com/Figures/622/622_queue_with_array.png){:width=480}\n\n**算法**\n\n设计数据结构的关键是如何设计 *属性*，好的设计属性数量更少。\n\n- 属性数量少说明属性之间冗余更低。\n\n- 属性冗余度越低，操作逻辑越简单，发生错误的可能性更低。\n\n- 属性数量少，使用的空间也少，操作性能更高。\n\n*但是，也不建议使用最少的属性数量。*一定的冗余可以降低操作的时间复杂度，达到时间复杂度和空间复杂度的相对平衡。\n\n根据以上原则，列举循环队列的每个属性，并解释其含义。\n\n- `queue`：一个固定大小的数组，用于保存循环队列的元素。\n\n- `headIndex`：一个整数，保存队首 `head` 的索引。\n\n- `count`：循环队列当前的长度，即循环队列中的元素数量。使用 `hadIndex` 和 `count` 可以计算出队尾元素的索引，因此不需要队尾属性。\n\n- `capacity`：循环队列的容量，即队列中最多可以容纳的元素数量。该属性不是必需的，因为队列容量可以通过数组属性得到，但是由于该属性经常使用，所以我们选择保留它。这样可以不用在 Python 中每次调用 `len(queue)` 中获取容量。但是在 Java 中通过 `queue.length` 获取容量更加高效。为了保持一致性，在两种方案中都保留该属性。\n\n```python [solution1-Python]\nclass MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.queue = [0]*k\n        self.headIndex = 0\n        self.count = 0\n        self.capacity = k\n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.count == self.capacity:\n            return False\n        self.queue[(self.headIndex + self.count) % self.capacity] = value\n        self.count += 1\n        return True\n\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.count == 0:\n            return False\n        self.headIndex = (self.headIndex + 1) % self.capacity\n        self.count -= 1\n        return True\n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        if self.count == 0:\n            return -1\n        return self.queue[self.headIndex]\n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        # empty queue\n        if self.count == 0:\n            return -1\n        return self.queue[(self.headIndex + self.count - 1) % self.capacity]\n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        return self.count == 0\n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        return self.count == self.capacity\n```\n\n```java [solution1-Java]\nclass MyCircularQueue {\n\n  private int[] queue;\n  private int headIndex;\n  private int count;\n  private int capacity;\n\n  /** Initialize your data structure here. Set the size of the queue to be k. */\n  public MyCircularQueue(int k) {\n    this.capacity = k;\n    this.queue = new int[k];\n    this.headIndex = 0;\n    this.count = 0;\n  }\n\n  /** Insert an element into the circular queue. Return true if the operation is successful. */\n  public boolean enQueue(int value) {\n    if (this.count == this.capacity)\n      return false;\n    this.queue[(this.headIndex + this.count) % this.capacity] = value;\n    this.count += 1;\n    return true;\n  }\n\n  /** Delete an element from the circular queue. Return true if the operation is successful. */\n  public boolean deQueue() {\n    if (this.count == 0)\n      return false;\n    this.headIndex = (this.headIndex + 1) % this.capacity;\n    this.count -= 1;\n    return true;\n  }\n\n  /** Get the front item from the queue. */\n  public int Front() {\n    if (this.count == 0)\n      return -1;\n    return this.queue[this.headIndex];\n  }\n\n  /** Get the last item from the queue. */\n  public int Rear() {\n    if (this.count == 0)\n      return -1;\n    int tailIndex = (this.headIndex + this.count - 1) % this.capacity;\n    return this.queue[tailIndex];\n  }\n\n  /** Checks whether the circular queue is empty or not. */\n  public boolean isEmpty() {\n    return (this.count == 0);\n  }\n\n  /** Checks whether the circular queue is full or not. */\n  public boolean isFull() {\n    return (this.count == this.capacity);\n  }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$\\mathcal{O}(1)$。该数据结构中，所有方法都具有恒定的时间复杂度。\n\n- 空间复杂度：$\\mathcal{O}(N)$，其中 $N$ 是队列的预分配容量。*循环队列的整个生命周期中，都持有该预分配的空间。*\n\n**改进：线程安全**\n\n上面实现满足所有的要求。\n\n> 但是可能存在一些风险。\n\n从并发性来看，该循环队列是线程不安全的。\n\n例如：下图的执行序列超出了队列的设计容量，会覆盖队尾元素。\n\n![](https://pic.leetcode-cn.com/Figures/622/622_concurrency.png){:width=480}\n\n这种情况称为竞态条件。更多并发性的问题可以在力扣的[多线程](https://leetcode-cn.com/problemset/concurrency/)模块练习。\n\n并发安全的解决方案很多。以方法 `enQueue(int value)` 为例，说明该方法的并发安全实现。\n\n```python [snippet1-Python]\nfrom threading import Lock\n\nclass MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.queue = [0]*k\n        self.headIndex = 0\n        self.count = 0\n        self.capacity = k\n        # the additional attribute to protect the access of our queue\n        self.queueLock = Lock()\n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        # automatically acquire the lock when entering the block\n        with self.queueLock:\n            if self.count == self.capacity:\n                return False\n            self.queue[(self.headIndex + self.count) % self.capacity] = value\n            self.count += 1\n        # automatically release the lock when leaving the block\n        return True\n```\n\n```java [snippet1-Java]\nclass MyCircularQueue {\n\n  private Node head, tail;\n  private int count;\n  private int capacity;\n  // Additional variable to secure the access of our queue\n  private ReentrantLock queueLock = new ReentrantLock();\n\n  /** Initialize your data structure here. Set the size of the queue to be k. */\n  public MyCircularQueue(int k) {\n    this.capacity = k;\n  }\n\n  /** Insert an element into the circular queue. Return true if the operation is successful. */\n  public boolean enQueue(int value) {\n    // ensure the exclusive access for the following block.\n    queueLock.lock();\n    try {\n      if (this.count == this.capacity)\n        return false;\n\n      Node newNode = new Node(value);\n      if (this.count == 0) {\n        head = tail = newNode;\n      } else {\n        tail.nextNode = newNode;\n        tail = newNode;\n      }\n      this.count += 1;\n\n    } finally {\n      queueLock.unlock();\n    }\n    return true;\n  }\n}\n```\n\n加锁后，就可以在并发下安全使用该循环队列。\n\n为了实现并发安全，引入了额外的计算成本，但是上述改进没有改变原始数据结构的时间和空间复杂度。\n\n\n#### 方法二：单链表\n\n**思路**\n\n*单链表* 和数组都是很常用的数据结构。\n\n> 与固定大小的数组相比，单链表不会为未使用的容量预分配内存，因此它的内存效率更高。\n\n单链表与数组实现方法的时间和空间复杂度相同，但是单链表的效率更高，因为这种方法不会预分配内存。\n\n下图展示了单链表实现下的 `enQueue()` 和 `deQueue()` 操作。\n\n![](https://pic.leetcode-cn.com/Figures/622/622_queue_linked_list.png){:width=480}\n\n**算法**\n\n列举循环队列中用到的所有属性，并解释其含义。\n\n- `capacity`：循环队列可容纳的最大元素数量。\n\n- `head`：队首元素索引。\n\n- `count`：当前队列长度。该属性很重要，可以用来做边界检查。\n\n- `tail`：队尾元素索引。与数组实现方式相比，如果不保存队尾索引，则需要花费 $\\mathcal{O}(N)$ 时间找到队尾元素。\n\n```python [solution2-Python]\nclass Node:\n    def __init__(self, value, nextNode=None):\n        self.value = value\n        self.next = nextNode\n\nclass MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.capacity = k\n        self.head = None\n        self.tail = None\n        self.count = 0\n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.count == self.capacity:\n            return False\n        \n        if self.count == 0:\n            self.head = Node(value)\n            self.tail = self.head\n        else:\n            newNode = Node(value)\n            self.tail.next = newNode\n            self.tail = newNode\n        self.count += 1\n        return True\n\n\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.count == 0:\n            return False\n        self.head = self.head.next\n        self.count -= 1\n        return True\n\n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        if self.count == 0:\n            return -1\n        return self.head.value\n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        # empty queue\n        if self.count == 0:\n            return -1\n        return self.tail.value\n    \n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        return self.count == 0\n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        return self.count == self.capacity\n```\n\n```java [solution2-Java]\nclass Node {\n  public int value;\n  public Node nextNode;\n\n  public Node(int value) {\n    this.value = value;\n    this.nextNode = null;\n  }\n}\n\nclass MyCircularQueue {\n\n  private Node head, tail;\n  private int count;\n  private int capacity;\n\n  /** Initialize your data structure here. Set the size of the queue to be k. */\n  public MyCircularQueue(int k) {\n    this.capacity = k;\n  }\n\n  /** Insert an element into the circular queue. Return true if the operation is successful. */\n  public boolean enQueue(int value) {\n    if (this.count == this.capacity)\n      return false;\n\n    Node newNode = new Node(value);\n    if (this.count == 0) {\n      head = tail = newNode;\n    } else {\n      tail.nextNode = newNode;\n      tail = newNode;\n    }\n    this.count += 1;\n    return true;\n  }\n\n  /** Delete an element from the circular queue. Return true if the operation is successful. */\n  public boolean deQueue() {\n    if (this.count == 0)\n      return false;\n    this.head = this.head.nextNode;\n    this.count -= 1;\n    return true;\n  }\n\n  /** Get the front item from the queue. */\n  public int Front() {\n    if (this.count == 0)\n      return -1;\n    else\n      return this.head.value;\n  }\n\n  /** Get the last item from the queue. */\n  public int Rear() {\n    if (this.count == 0)\n      return -1;\n    else\n      return this.tail.value;\n  }\n\n  /** Checks whether the circular queue is empty or not. */\n  public boolean isEmpty() {\n    return (this.count == 0);\n  }\n\n  /** Checks whether the circular queue is full or not. */\n  public boolean isFull() {\n    return (this.count == this.capacity);\n  }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$\\mathcal{O}(1)$，所有方法都具有恒定的时间复杂度。\n\n- 空间复杂度：$\\mathcal{O}(N)$，与数组实现相同。但是单链表实现f方式的内存效率更高。",
      "createdAt": "2020-02-10T06:15:02.942060+00:00",
      "hitCount": 36005,
      "identifier": "9odvF8",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "622-she-ji-xun-huan-dui-lie-by-chen-wei-7323t",
        "title": "622. 设计循环队列"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "design-circular-queue"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 49,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "she-ji-xun-huan-dui-lie-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 方法一：数组\n思路\n根据问题描述，该问题使用的数据结构应该是首尾相连的 环。\n任何数据结构中都不存在环形结构，但是可以使用一维 数组 模拟，通过操作数组的索引构建一个 虚拟 的环。很多复杂数据结构都可以通过数组实现。\n对于一个固定大小的数组，任何位置都可以是队首，只要知道队列长度，就可以根据下面公式计算出队尾位置：\n",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/Figures/622/622_queue_with_array.png",
      "title": "设计循环队列",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 41,
        "id": 90639,
        "viewCount": 25325
      },
      "uuid": "9odvF8",
      "videosInfo": []
    }
  }
}
