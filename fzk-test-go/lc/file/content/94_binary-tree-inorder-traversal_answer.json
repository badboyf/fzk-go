{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：递归\n\n**思路与算法**\n\n首先我们需要了解什么是二叉树的中序遍历：按照访问左子树——根节点——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。\n\n定义 `inorder(root)` 表示当前遍历到 $\\textit{root}$ 节点的答案，那么按照定义，我们只要递归调用 `inorder(root.left)` 来遍历 $\\textit{root}$ 节点的左子树，然后将 $\\textit{root}$ 节点的值加入答案，再递归调用`inorder(root.right)` 来遍历 $\\textit{root}$ 节点的右子树即可，递归终止的条件为碰到空节点。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void inorder(TreeNode* root, vector<int>& res) {\n        if (!root) {\n            return;\n        }\n        inorder(root->left, res);\n        res.push_back(root->val);\n        inorder(root->right, res);\n    }\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        inorder(root, res);\n        return res;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        inorder(root, res);\n        return res;\n    }\n\n    public void inorder(TreeNode root, List<Integer> res) {\n        if (root == null) {\n            return;\n        }\n        inorder(root.left, res);\n        res.add(root.val);\n        inorder(root.right, res);\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar inorderTraversal = function(root) {\n    const res = [];\n    const inorder = (root) => {\n        if (!root) {\n            return;\n        }\n        inorder(root.left);\n        res.push(root.val);\n        inorder(root.right);\n    }\n    inorder(root);\n    return res;\n};\n```\n\n```Golang [sol1-Golang]\nfunc inorderTraversal(root *TreeNode) (res []int) {\n\tvar inorder func(node *TreeNode)\n\tinorder = func(node *TreeNode) {\n\t\tif node == nil {\n\t\t\treturn\n\t\t}\n\t\tinorder(node.Left)\n\t\tres = append(res, node.Val)\n\t\tinorder(node.Right)\n\t}\n\tinorder(root)\n\treturn\n}\n```\n\n```C [sol1-C]\nvoid inorder(struct TreeNode* root, int* res, int* resSize) {\n    if (!root) {\n        return;\n    }\n    inorder(root->left, res, resSize);\n    res[(*resSize)++] = root->val;\n    inorder(root->right, res, resSize);\n}\n\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    int* res = malloc(sizeof(int) * 501);\n    *returnSize = 0;\n    inorder(root, res, returnSize);\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。\n\n- 空间复杂度：$O(n)$。空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到 $O(n)$ 的级别。\n\n#### 方法二：迭代\n\n**思路与算法**\n\n方法一的递归函数我们也可以用迭代的方式实现，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其他都相同，具体实现可以看下面的代码。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/94/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/94/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/94/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/94/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/94/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/94/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/94/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/94/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/94/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/94/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/94/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/94/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/94/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/94/14.png)>\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        stack<TreeNode*> stk;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.push(root);\n                root = root->left;\n            }\n            root = stk.top();\n            stk.pop();\n            res.push_back(root->val);\n            root = root->right;\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        Deque<TreeNode> stk = new LinkedList<TreeNode>();\n        while (root != null || !stk.isEmpty()) {\n            while (root != null) {\n                stk.push(root);\n                root = root.left;\n            }\n            root = stk.pop();\n            res.add(root.val);\n            root = root.right;\n        }\n        return res;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar inorderTraversal = function(root) {\n    const res = [];\n    const stk = [];\n    while (root || stk.length) {\n        while (root) {\n            stk.push(root);\n            root = root.left;\n        }\n        root = stk.pop();\n        res.push(root.val);\n        root = root.right;\n    }\n    return res;\n};\n```\n\n```Golang [sol2-Golang]\nfunc inorderTraversal(root *TreeNode) (res []int) {\n\tstack := []*TreeNode{}\n\tfor root != nil || len(stack) > 0 {\n\t\tfor root != nil {\n\t\t\tstack = append(stack, root)\n\t\t\troot = root.Left\n\t\t}\n\t\troot = stack[len(stack)-1]\n\t\tstack = stack[:len(stack)-1]\n\t\tres = append(res, root.Val)\n\t\troot = root.Right\n\t}\n\treturn\n}\n```\n\n```C [sol2-C]\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    *returnSize = 0;\n    int* res = malloc(sizeof(int) * 501);\n    struct TreeNode** stk = malloc(sizeof(struct TreeNode*) * 501);\n    int top = 0;\n    while (root != NULL || top > 0) {\n        while (root != NULL) {\n            stk[top++] = root;\n            root = root->left;\n        }\n        root = stk[--top];\n        res[(*returnSize)++] = root->val;\n        root = root->right;\n    }\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。\n\n- 空间复杂度：$O(n)$。空间复杂度取决于栈深度，而栈深度在二叉树为一条链的情况下会达到 $O(n)$ 的级别。\n\n#### 方法三：Morris 中序遍历\n\n**思路与算法**\n\n**Morris 遍历算法**是另一种遍历二叉树的方法，它能将非递归的中序遍历空间复杂度降为 $O(1)$。\n\n**Morris 遍历算法**整体步骤如下（假设当前遍历到的节点为 $x$）：\n\n1. 如果 $x$ 无左孩子，先将 $x$ 的值加入答案数组，再访问 $x$ 的右孩子，即 $x = x.\\textit{right}$。\n2. 如果 $x$ 有左孩子，则找到 $x$ 左子树上最右的节点（**即左子树中序遍历的最后一个节点，$x$ 在中序遍历中的前驱节点**），我们记为 $\\textit{predecessor}$。根据 $\\textit{predecessor}$ 的右孩子是否为空，进行如下操作。\n   - 如果 $\\textit{predecessor}$ 的右孩子为空，则将其右孩子指向 $x$，然后访问 $x$ 的左孩子，即 $x = x.\\textit{left}$。\n   - 如果 $\\textit{predecessor}$ 的右孩子不为空，则此时其右孩子指向 $x$，说明我们已经遍历完 $x$ 的左子树，我们将 $\\textit{predecessor}$ 的右孩子置空，将 $x$ 的值加入答案数组，然后访问 $x$ 的右孩子，即 $x = x.\\textit{right}$。\n3. 重复上述操作，直至访问完整棵树。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/94/2_1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/94/2_2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/94/2_3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/94/2_4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/94/2_5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/94/2_6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/94/2_7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/94/2_8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/94/2_9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/94/2_10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/94/2_11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/94/2_12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/94/2_13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/94/2_14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/94/2_15.png),![ppt16](https://assets.leetcode-cn.com/solution-static/94/2_16.png),![ppt17](https://assets.leetcode-cn.com/solution-static/94/2_17.png),![ppt18](https://assets.leetcode-cn.com/solution-static/94/2_18.png),![ppt19](https://assets.leetcode-cn.com/solution-static/94/2_19.png)>\n\n其实整个过程我们就多做一步：假设当前遍历到的节点为 $x$，将 $x$ 的左子树中最右边的节点的右孩子指向 $x$，这样在左子树遍历完成后我们通过这个指向走回了 $x$，且能通过这个指向知晓我们已经遍历完成了左子树，而不用再通过栈来维护，省去了栈的空间复杂度。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        TreeNode *predecessor = nullptr;\n\n        while (root != nullptr) {\n            if (root->left != nullptr) {\n                // predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止\n                predecessor = root->left;\n                while (predecessor->right != nullptr && predecessor->right != root) {\n                    predecessor = predecessor->right;\n                }\n                \n                // 让 predecessor 的右指针指向 root，继续遍历左子树\n                if (predecessor->right == nullptr) {\n                    predecessor->right = root;\n                    root = root->left;\n                }\n                // 说明左子树已经访问完了，我们需要断开链接\n                else {\n                    res.push_back(root->val);\n                    predecessor->right = nullptr;\n                    root = root->right;\n                }\n            }\n            // 如果没有左孩子，则直接访问右孩子\n            else {\n                res.push_back(root->val);\n                root = root->right;\n            }\n        }\n        return res;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<Integer>();\n        TreeNode predecessor = null;\n\n        while (root != null) {\n            if (root.left != null) {\n                // predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止\n                predecessor = root.left;\n                while (predecessor.right != null && predecessor.right != root) {\n                    predecessor = predecessor.right;\n                }\n                \n                // 让 predecessor 的右指针指向 root，继续遍历左子树\n                if (predecessor.right == null) {\n                    predecessor.right = root;\n                    root = root.left;\n                }\n                // 说明左子树已经访问完了，我们需要断开链接\n                else {\n                    res.add(root.val);\n                    predecessor.right = null;\n                    root = root.right;\n                }\n            }\n            // 如果没有左孩子，则直接访问右孩子\n            else {\n                res.add(root.val);\n                root = root.right;\n            }\n        }\n        return res;\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar inorderTraversal = function(root) {\n    const res = [];\n    let predecessor = null;\n\n    while (root) {\n        if (root.left) {\n            // predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止\n            predecessor = root.left;\n            while (predecessor.right && predecessor.right !== root) {\n                predecessor = predecessor.right;\n            }\n\n            // 让 predecessor 的右指针指向 root，继续遍历左子树\n            if (!predecessor.right) {\n                predecessor.right = root;\n                root = root.left;\n            }\n            // 说明左子树已经访问完了，我们需要断开链接\n            else {\n                res.push(root.val);\n                predecessor.right = null;\n                root = root.right;\n            }\n        }\n        // 如果没有左孩子，则直接访问右孩子\n        else {\n            res.push(root.val);\n            root = root.right;\n        }\n    }\n\n    return res;\n};\n```\n\n```Golang [sol3-Golang]\nfunc inorderTraversal(root *TreeNode) (res []int) {\n\tfor root != nil {\n\t\tif root.Left != nil {\n\t\t\t// predecessor 节点表示当前 root 节点向左走一步，然后一直向右走至无法走为止的节点\n\t\t\tpredecessor := root.Left\n\t\t\tfor predecessor.Right != nil && predecessor.Right != root {\n\t\t\t\t// 有右子树且没有设置过指向 root，则继续向右走\n\t\t\t\tpredecessor = predecessor.Right\n\t\t\t}\n\t\t\tif predecessor.Right == nil {\n\t\t\t\t// 将 predecessor 的右指针指向 root，这样后面遍历完左子树 root.Left 后，就能通过这个指向回到 root\n\t\t\t\tpredecessor.Right = root\n\t\t\t\t// 遍历左子树\n\t\t\t\troot = root.Left\n\t\t\t} else { // predecessor 的右指针已经指向了 root，则表示左子树 root.Left 已经访问完了\n\t\t\t\tres = append(res, root.Val)\n\t\t\t\t// 恢复原样\n\t\t\t\tpredecessor.Right = nil\n\t\t\t\t// 遍历右子树\n\t\t\t\troot = root.Right\n\t\t\t}\n\t\t} else { // 没有左子树\n\t\t\tres = append(res, root.Val)\n\t\t\t// 若有右子树，则遍历右子树\n\t\t\t// 若没有右子树，则整颗左子树已遍历完，root 会通过之前设置的指向回到这颗子树的父节点\n\t\t\troot = root.Right\n\t\t}\n\t}\n\treturn\n}\n```\n\n```C [sol3-C]\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    int* res = malloc(sizeof(int) * 501);\n    *returnSize = 0;\n    struct TreeNode* predecessor = NULL;\n\n    while (root != NULL) {\n        if (root->left != NULL) {\n            // predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止\n            predecessor = root->left;\n            while (predecessor->right != NULL && predecessor->right != root) {\n                predecessor = predecessor->right;\n            }\n\n            // 让 predecessor 的右指针指向 root，继续遍历左子树\n            if (predecessor->right == NULL) {\n                predecessor->right = root;\n                root = root->left;\n            }\n            // 说明左子树已经访问完了，我们需要断开链接\n            else {\n                res[(*returnSize)++] = root->val;\n                predecessor->right = NULL;\n                root = root->right;\n            }\n        }\n        // 如果没有左孩子，则直接访问右孩子\n        else {\n            res[(*returnSize)++] = root->val;\n            root = root->right;\n        }\n    }\n    return res;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为二叉搜索树的节点个数。Morris 遍历中每个节点会被访问两次，因此总时间复杂度为 $O(2n)=O(n)$。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2020-09-13T15:50:41.414713+00:00",
      "hitCount": 263441,
      "identifier": "fDAix6",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yan-se-biao-ji-fa-yi-chong-tong-yong-qie-jian-ming",
        "title": "颜色标记法-一种通用且简明的树遍历方法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "binary-tree-inorder-traversal"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 248,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 17,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-cha-shu-de-zhong-xu-bian-li-by-leetcode-solutio",
      "status": "PUBLISHED",
      "summary": "方法一：递归 思路与算法 首先我们需要了解什么是二叉树的中序遍历：按照访问左子树——根节点——右子树的方式遍历这棵树，而在访问左子树或者右子树的时候我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。 定义 inorder(root) 表示当前遍历到 $\\",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二叉树的中序遍历",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 170,
        "id": 412886,
        "viewCount": 173502
      },
      "uuid": "fDAix6",
      "videosInfo": []
    }
  }
}
