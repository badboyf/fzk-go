{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：遍历\n\n根据定义，当且仅当矩阵中每个元素都与其左上角相邻的元素（如果存在）相等时，该矩阵为托普利茨矩阵。因此，我们遍历该矩阵，将每一个元素和它左上角的元素相比对即可。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isToeplitzMatrix(vector<vector<int>>& matrix) {\n        int m = matrix.size(), n = matrix[0].size();\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] != matrix[i - 1][j - 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isToeplitzMatrix(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (matrix[i][j] != matrix[i - 1][j - 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isToeplitzMatrix = function(matrix) {\n    const m = matrix.length, n = matrix[0].length;\n    for (let i = 1; i < m; i++) {\n        for (let j = 1; j < n; j++) {\n            if (matrix[i][j] != matrix[i - 1][j - 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n```\n\n```go [sol1-Golang]\nfunc isToeplitzMatrix(matrix [][]int) bool {\n    n, m := len(matrix), len(matrix[0])\n    for i := 1; i < n; i++ {\n        for j := 1; j < m; j++ {\n            if matrix[i][j] != matrix[i-1][j-1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n```\n\n```C [sol1-C]\nbool isToeplitzMatrix(int** matrix, int matrixSize, int* matrixColSize) {\n    int m = matrixSize, n = matrixColSize[0];\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            if (matrix[i][j] != matrix[i - 1][j - 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 为矩阵的行数，$n$ 为矩阵的列数。矩阵中每个元素至多被访问两次。\n\n- 空间复杂度：$O(1)$，我们只需要常数的空间保存若干变量。\n\n#### 进阶问题\n\n对于进阶问题一，一次最多只能将矩阵的一行加载到内存中，我们将每一行复制到一个连续数组中，随后在读取下一行时，就与内存中此前保存的数组进行比较。\n\n对于进阶问题二，一次只能将不完整的一行加载到内存中，我们将整个矩阵竖直切分成若干子矩阵，并保证两个相邻的矩阵至少有一列或一行是重合的，然后判断每个子矩阵是否符合要求。",
      "createdAt": "2021-02-21T10:24:36.144298+00:00",
      "hitCount": 20631,
      "identifier": "eYmhCI",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "pan-duan-mei-ge-yuan-su-he-ta-de-you-xia-x3fi",
        "title": "判断每个元素和它的右下角元素相等"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "toeplitz-matrix"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 25,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "tuo-pu-li-ci-ju-zhen-by-leetcode-solutio-57bb",
      "status": "PREPUBLISH",
      "summary": "方法一：遍历 根据定义，当且仅当矩阵中每个元素都与其左上角相邻的元素（如果存在）相等时，该矩阵为托普利茨矩阵。因此，我们遍历该矩阵，将每一个元素和它左上角的元素相比对即可。 C++ [sol1-C++] class Solution { public:     bool isToeplitzMatrix(vector<",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "托普利茨矩阵",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 101,
        "id": 613732,
        "viewCount": 17598
      },
      "uuid": "eYmhCI",
      "videosInfo": []
    }
  }
}
