{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：统计字符数量重新构造字符串【通过】\n\n**思路**\n\n首先找出在 `T` 中出现的所有的 `S` 的元素，并且将这些元素按照 `S` 中出现的相对顺序排序，然后把 `T` 中出现的但不在 `S` 中的元素添加到排好序的字符串中，就得到了我们想要的结果。\n\n在将 `T` 中出现的但不在 `S` 中的元素添加到字符串时，无序关注顺序，因为这些元素并没有在 `S` 中出现，不需要满足排序关系。\n\n**算法**\n\n一种巧妙的实现方法是统计 `T` 中每个字符出现的次数，把结果存储在数组 `count` 中，`count[char]` 表示字符 `char` 出现的次数。然后把在 `S` 中出现的字符按照在 `S` 中的相对顺序排列，剩余字符添加到当前字符串的后面，最终排好序的字符串顺序为 `S + (未在 S 中出现的字符)`。\n\n```java [solution1-Java]\nclass Solution {\n    public String customSortString(String S, String T) {\n        // count[char] = the number of occurrences of 'char' in T.\n        // This is offset so that count[0] = occurrences of 'a', etc.\n        // 'count' represents the current state of characters\n        // (with multiplicity) we need to write to our answer.\n        int[] count = new int[26];\n        for (char c: T.toCharArray())\n            count[c - 'a']++;\n\n        // ans will be our final answer.  We use StringBuilder to join\n        // the answer so that we more efficiently calculate a\n        // concatenation of strings.\n        StringBuilder ans = new StringBuilder();\n\n        // Write all characters that occur in S, in the order of S.\n        for (char c: S.toCharArray()) {\n            for (int i = 0; i < count[c - 'a']; ++i)\n                ans.append(c);\n            // Setting count[char] to zero to denote that we do\n            // not need to write 'char' into our answer anymore.\n            count[c - 'a'] = 0;\n        }\n\n        // Write all remaining characters that don't occur in S.\n        // That information is specified by 'count'.\n        for (char c = 'a'; c <= 'z'; ++c)\n            for (int i = 0; i < count[c - 'a']; ++i)\n                ans.append(c);\n\n        return ans.toString();\n    }\n}\n\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def customSortString(self, S, T):\n        # count[char] will be the number of occurrences of\n        # 'char' in T.\n        count = collections.Counter(T)\n        ans = []\n\n        # Write all characters that occur in S, in the order of S.\n        for c in S:\n            ans.append(c * count[c])\n            # Set count[c] = 0 to denote that we do not need\n            # to write 'c' to our answer anymore.\n            count[c] = 0\n\n        # Write all remaining characters that don't occur in S.\n        # That information is specified by 'count'.\n        for c in count:\n            ans.append(c * count[c])\n\n        return \"\".join(ans)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(S.\\text{length} + T.\\text{length})$，遍历 `S` 和 `T` 花费的时间。\n\n* 空间复杂度：$O(T.\\text{length})$，统计 26 个小写字母的空间和存储最终排好序的字符串 `T` 的空间。",
      "createdAt": "2019-11-25T07:18:28.671828+00:00",
      "hitCount": 6202,
      "identifier": "6Aq590",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "tong-ji-ji-shu-pai-xu-by-hai-na-bai-chua-9d6x",
        "title": "统计计数排序"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "custom-sort-string"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "zi-ding-yi-zi-fu-chuan-pai-xu-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 方法一：统计字符数量重新构造字符串【通过】\n思路\n首先找出在 T 中出现的所有的 S 的元素，并且将这些元素按照 S 中出现的相对顺序排序，然后把 T 中出现的但不在 S 中的元素添加到排好序的字符串中，就得到了我们想要的结果。\n在将 T 中出现的但不在 S 中的元素添加到字符串时，无序关注顺序，因为这些元素并没有在",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "自定义字符串排序",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 12,
        "id": 47124,
        "viewCount": 4999
      },
      "uuid": "6Aq590",
      "videosInfo": []
    }
  }
}
