{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：一次遍历\n\n**思路与算法**\n\n由于给定的链表是排好序的，因此**重复的元素在链表中出现的位置是连续的**，因此我们只需要对链表进行一次遍历，就可以删除重复的元素。\n\n具体地，我们从指针 $\\textit{cur}$ 指向链表的头节点，随后开始对链表进行遍历。如果当前 $\\textit{cur}$ 与 $\\textit{cur.next}$ 对应的元素相同，那么我们就将 $\\textit{cur.next}$ 从链表中移除；否则说明链表中已经不存在其它与 $\\textit{cur}$ 对应的元素相同的节点，因此可以将 $\\textit{cur}$ 指向 $\\textit{cur.next}$。\n\n当遍历完整个链表之后，我们返回链表的头节点即可。\n\n**细节**\n\n当我们遍历到链表的最后一个节点时，$\\textit{cur.next}$ 为空节点，如果不加以判断，访问 $\\textit{cur.next}$ 对应的元素会产生运行错误。因此我们只需要遍历到链表的最后一个节点，而不需要遍历完整个链表。\n\n**代码**\n\n注意下面 $\\texttt{C++}$ 代码中并没有释放被删除的链表节点的空间。如果在面试中遇到本题，读者需要针对这一细节与面试官进行沟通。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        if (!head) {\n            return head;\n        }\n\n        ListNode* cur = head;\n        while (cur->next) {\n            if (cur->val == cur->next->val) {\n                cur->next = cur->next->next;\n            }\n            else {\n                cur = cur->next;\n            }\n        }\n\n        return head;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n\n        ListNode cur = head;\n        while (cur.next != null) {\n            if (cur.val == cur.next.val) {\n                cur.next = cur.next.next;\n            } else {\n                cur = cur.next;\n            }\n        }\n\n        return head;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        if not head:\n            return head\n\n        cur = head\n        while cur.next:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n\n        return head\n```\n\n```JavaScript [sol1-JavaScript]\nvar deleteDuplicates = function(head) {\n    if (!head) {\n        return head;\n    }\n\n    let cur = head;\n    while (cur.next) {\n        if (cur.val === cur.next.val) {\n            cur.next = cur.next.next;\n        } else {\n            cur = cur.next;\n        }\n    }\n    return head;\n};\n```\n\n```go [sol1-Golang]\nfunc deleteDuplicates(head *ListNode) *ListNode {\n    if head == nil {\n        return nil\n    }\n\n    cur := head\n    for cur.Next != nil {\n        if cur.Val == cur.Next.Val {\n            cur.Next = cur.Next.Next\n        } else {\n            cur = cur.Next\n        }\n    }\n\n    return head\n}\n```\n\n```C [sol1-C]\nstruct ListNode* deleteDuplicates(struct ListNode* head) {\n    if (!head) {\n        return head;\n    }\n\n    struct ListNode* cur = head;\n    while (cur->next) {\n        if (cur->val == cur->next->val) {\n            cur->next = cur->next->next;\n        } else {\n            cur = cur->next;\n        }\n    }\n\n    return head;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-03-25T15:28:32.099041+00:00",
      "hitCount": 69259,
      "identifier": "duV2qa",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hua-jie-suan-fa-83-shan-chu-pai-xu-lian-biao-zhong",
        "title": "画解算法：83. 删除排序链表中的重复元素"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "remove-duplicates-from-sorted-list"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 42,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "shan-chu-pai-xu-lian-biao-zhong-de-zhong-49v5",
      "status": "PREPUBLISH",
      "summary": "方法一：一次遍历 思路与算法 由于给定的链表是排好序的，因此重复的元素在链表中出现的位置是连续的，因此我们只需要对链表进行一次遍历，就可以删除重复的元素。 具体地，我们从指针 $\\textit{cur}$ 指向链表的头节点，随后开始对链表进行遍历。如果当前 $\\textit{cur}$ 与 $\\textit{cur.n",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "删除排序链表中的重复元素",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 135,
        "id": 680357,
        "viewCount": 52769
      },
      "uuid": "duV2qa",
      "videosInfo": []
    }
  }
}
