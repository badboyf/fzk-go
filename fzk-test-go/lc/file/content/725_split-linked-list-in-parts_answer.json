{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：拆分链表\n\n题目要求将给定的链表分隔成 $k$ 个连续的部分。由于分隔成的每个部分的长度和原始链表的长度有关，因此需要首先遍历链表，得到链表的长度 $n$。\n\n得到链表的长度 $n$ 之后，记 $\\textit{quotient} = \\Big\\lfloor \\dfrac{n}{k} \\Big\\rfloor$，$\\textit{remainder} = n \\bmod k$，则在分隔成的 $k$ 个部分中，前 $\\textit{remainder}$ 个部分的长度各为 $\\textit{quotient} + 1$，其余每个部分的长度各为 $\\textit{quotient}$。\n\n分隔链表时，从链表的头结点开始遍历，记当前结点为 $\\textit{curr}$，对于每个部分，进行如下操作：\n\n1. 将 $\\textit{curr}$ 作为当前部分的头结点；\n\n2. 计算当前部分的长度 $\\textit{partSize}$；\n\n3. 将 $\\textit{curr}$ 向后移动 $\\textit{partSize}$ 步，则 $\\textit{curr}$ 为当前部分的尾结点；\n\n4. 当 $\\textit{curr}$ 到达当前部分的尾结点时，需要拆分 $\\textit{curr}$ 和后面一个结点之间的连接关系，在拆分之前需要存储 $\\textit{curr}$ 的后一个结点 $\\textit{next}$；\n\n5. 令 $\\textit{curr}$ 的 $\\textit{next}$ 指针指向 $\\text{null}$，完成 $\\textit{curr}$ 和 $\\textit{next}$ 的拆分；\n\n6. 将 $\\textit{next}$ 赋值给 $\\textit{curr}$。\n\n完成上述操作之后，即得到分隔链表后的一个部分。重复上述操作，直到分隔出 $k$ 个部分，或者链表遍历结束，即 $\\textit{curr}$ 指向 $\\text{null}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode[] splitListToParts(ListNode head, int k) {\n        int n = 0;\n        ListNode temp = head;\n        while (temp != null) {\n            n++;\n            temp = temp.next;\n        }\n        int quotient = n / k, remainder = n % k;\n\n        ListNode[] parts = new ListNode[k];\n        ListNode curr = head;\n        for (int i = 0; i < k && curr != null; i++) {\n            parts[i] = curr;\n            int partSize = quotient + (i < remainder ? 1 : 0);\n            for (int j = 1; j < partSize; j++) {\n                curr = curr.next;\n            }\n            ListNode next = curr.next;\n            curr.next = null;\n            curr = next;\n        }\n        return parts;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public ListNode[] SplitListToParts(ListNode head, int k) {\n        int n = 0;\n        ListNode temp = head;\n        while (temp != null) {\n            n++;\n            temp = temp.next;\n        }\n        int quotient = n / k, remainder = n % k;\n\n        ListNode[] parts = new ListNode[k];\n        ListNode curr = head;\n        for (int i = 0; i < k && curr != null; i++) {\n            parts[i] = curr;\n            int partSize = quotient + (i < remainder ? 1 : 0);\n            for (int j = 1; j < partSize; j++) {\n                curr = curr.next;\n            }\n            ListNode next = curr.next;\n            curr.next = null;\n            curr = next;\n        }\n        return parts;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def splitListToParts(self, head: ListNode, k: int) -> List[ListNode]:\n        n = 0\n        node = head\n        while node:\n            n += 1\n            node = node.next\n        quotient, remainder = n // k, n % k\n\n        parts = [None for _ in range(k)]\n        i, curr = 0, head\n        while i < k and curr:\n            parts[i] = curr\n            part_size = quotient + (1 if i < remainder else 0)\n            for _ in range(part_size - 1):\n                curr = curr.next\n            next = curr.next\n            curr.next = None\n            curr = next\n            i += 1\n        return parts\n```\n\n```JavaScript [sol1-JavaScript]\nvar splitListToParts = function(head, k) {\n    let n = 0;\n    let temp = head;\n    while (temp != null) {\n        n++;\n        temp = temp.next;\n    }\n    let quotient = Math.floor(n / k), remainder = n % k;\n\n    const parts = new Array(k).fill(null);\n    let curr = head;\n    for (let i = 0; i < k && curr != null; i++) {\n        parts[i] = curr;\n        let partSize = quotient + (i < remainder ? 1 : 0);\n        for (let j = 1; j < partSize; j++) {\n            curr = curr.next;\n        }\n        const next = curr.next;\n        curr.next = null;\n        curr = next;\n    }\n    return parts;\n};\n```\n\n```go [sol1-Golang]\nfunc splitListToParts(head *ListNode, k int) []*ListNode {\n    n := 0\n    for node := head; node != nil; node = node.Next {\n        n++\n    }\n    quotient, remainder := n/k, n%k\n\n    parts := make([]*ListNode, k)\n    for i, curr := 0, head; i < k && curr != nil; i++ {\n        parts[i] = curr\n        partSize := quotient\n        if i < remainder {\n            partSize++\n        }\n        for j := 1; j < partSize; j++ {\n            curr = curr.Next\n        }\n        curr, curr.Next = curr.Next, nil\n    }\n    return parts\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<ListNode*> splitListToParts(ListNode* head, int k) {\n        int n = 0;\n        ListNode *temp = head;\n        while (temp != nullptr) {\n            n++;\n            temp = temp->next;\n        }\n        int quotient = n / k, remainder = n % k;\n\n        vector<ListNode*> parts(k,nullptr);\n        ListNode *curr = head;\n        for (int i = 0; i < k && curr != nullptr; i++) {\n            parts[i] = curr;\n            int partSize = quotient + (i < remainder ? 1 : 0);\n            for (int j = 1; j < partSize; j++) {\n                curr = curr->next;\n            }\n            ListNode *next = curr->next;\n            curr->next = nullptr;\n            curr = next;\n        }\n        return parts;\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的长度。需要遍历链表两次，得到链表的长度和分隔链表。\n\n- 空间复杂度：$O(1)$。只使用了常量的额外空间，注意返回值不计入空间复杂度。",
      "createdAt": "2021-09-21T14:47:49.503395+00:00",
      "hitCount": 25259,
      "identifier": "kjl64Q",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-jing-dian-lian-biao-ju-9yj4",
        "title": "【宫水三叶】经典链表“均分”模拟题（附链表问题目录）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "split-linked-list-in-parts"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 44,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "fen-ge-lian-biao-by-leetcode-solution-wevt",
      "status": "PREPUBLISH",
      "summary": "方法一：拆分链表 题目要求将给定的链表分隔成 $k$ 个连续的部分。由于分隔成的每个部分的长度和原始链表的长度有关，因此需要首先遍历链表，得到链表的长度 $n$。 得到链表的长度 $n$ 之后，记 $\\textit{quotient} = \\Big\\lfloor \\dfrac{n}{k} \\Big\\rfloor$，$\\",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "分隔链表",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 103,
        "id": 1010003,
        "viewCount": 17024
      },
      "uuid": "kjl64Q",
      "videosInfo": []
    }
  }
}
