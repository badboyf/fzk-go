{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：栈\n\n充分理解题意后，我们可以发现，当字符串中同时有多组相邻重复项时，我们无论是先删除哪一个，都不会影响最终的结果。因此我们可以从左向右顺次处理该字符串。\n\n而消除一对相邻重复项可能会导致新的相邻重复项出现，如从字符串 $\\text{abba}$ 中删除 $\\text{bb}$ 会导致出现新的相邻重复项 $\\text{aa}$ 出现。因此我们需要保存当前还未被删除的字符。一种显而易见的数据结构呼之欲出：栈。我们只需要遍历该字符串，如果当前字符和栈顶字符相同，我们就贪心地将其消去，否则就将其入栈即可。\n\n**代码**\n\n在下面的 $\\texttt{C++}$ 代码中，由于 $\\texttt{std::string}$ 类本身就提供了类似「入栈」和「出栈」的接口，因此我们直接将需要被返回的字符串作为栈即可。对于其他的语言，如果字符串类没有提供相应的接口，则需要在遍历完成字符串后，使用栈中的字符显式地构造出需要被返回的字符串。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string removeDuplicates(string s) {\n        string stk;\n        for (char ch : s) {\n            if (!stk.empty() && stk.back() == ch) {\n                stk.pop_back();\n            } else {\n                stk.push_back(ch);\n            }\n        }\n        return stk;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String removeDuplicates(String s) {\n        StringBuffer stack = new StringBuffer();\n        int top = -1;\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            if (top >= 0 && stack.charAt(top) == ch) {\n                stack.deleteCharAt(top);\n                --top;\n            } else {\n                stack.append(ch);\n                ++top;\n            }\n        }\n        return stack.toString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar removeDuplicates = function(s) {\n    const stk = [];\n    for (const ch of s) {\n        if (stk.length && stk[stk.length - 1] === ch) {\n            stk.pop();\n        } else {\n            stk.push(ch);\n        }\n    }\n    return stk.join('');\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def removeDuplicates(self, s: str) -> str:\n        stk = list()\n        for ch in s:\n            if stk and stk[-1] == ch:\n                stk.pop()\n            else:\n                stk.append(ch)\n        return \"\".join(stk)\n```\n\n```go [sol1-Golang]\nfunc removeDuplicates(s string) string {\n    stack := []byte{}\n    for i := range s {\n        if len(stack) > 0 && stack[len(stack)-1] == s[i] {\n            stack = stack[:len(stack)-1]\n        } else {\n            stack = append(stack, s[i])\n        }\n    }\n    return string(stack)\n}\n```\n\n```C [sol1-C]\nchar* removeDuplicates(char* s) {\n    int n = strlen(s);\n    char* stk = malloc(sizeof(char) * (n + 1));\n    int retSize = 0;\n    for (int i = 0; i < n; i++) {\n        if (retSize > 0 && stk[retSize - 1] == s[i]) {\n            retSize--;\n        } else {\n            stk[retSize++] = s[i];\n        }\n    }\n    stk[retSize] = '\\0';\n    return stk;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。我们只需要遍历该字符串一次。\n\n- 空间复杂度：$O(n)$ 或 $O(1)$，取决于使用的语言提供的字符串类是否提供了类似「入栈」和「出栈」的接口。注意返回值不计入空间复杂度。",
      "createdAt": "2021-03-08T15:28:43.992634+00:00",
      "hitCount": 44655,
      "identifier": "JPuW1c",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "tu-jie-guan-fang-tui-jian-ti-jie-shan-ch-x8iz",
        "title": "【栈】删除字符串中的所有相邻重复项"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "remove-all-adjacent-duplicates-in-string"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 54,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "shan-chu-zi-fu-chuan-zhong-de-suo-you-xi-4ohr",
      "status": "PUBLISHED",
      "summary": "方法一：栈 充分理解题意后，我们可以发现，当字符串中同时有多组相邻重复项时，我们无论是先删除哪一个，都不会影响最终的结果。因此我们可以从左向右顺次处理该字符串。 而消除一对相邻重复项可能会导致新的相邻重复项出现，如从字符串 $\\text{abba}$ 中删除 $\\text{bb}$ 会导致出现新的相邻重复项 $\\tex",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "删除字符串中的所有相邻重复项",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 210,
        "id": 643955,
        "viewCount": 33984
      },
      "uuid": "JPuW1c",
      "videosInfo": []
    }
  }
}
