{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：枚举\n\n**思路与算法**\n\n我们可以通过枚举两栋房子来计算两栋不同颜色房子的最远距离。\n\n具体地，我们首先枚举下标较小的房子，然后在下标较小的房子右侧枚举下标较大的房子。随后，我们比较这两栋房子的颜色：如果两栋房子颜色不同，则我们计算两栋房子的距离，并尝试更新最远距离；反之则不进行任何操作。最终，我们返回最远距离作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int maxDistance(vector<int>& colors) {\n        int n = colors.size();\n        int res = 0;   // 两栋颜色不同房子的最远距离\n        // 遍历两栋房子下标并维护最远距离\n        for (int i = 0; i < n; ++i){\n            for (int j = i + 1; j < n; ++j){\n                if (colors[i] != colors[j]){\n                    res = max(res, j - i);\n                }\n            }\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxDistance(self, colors: List[int]) -> int:\n        n = len(colors)\n        res = 0   # 两栋颜色不同房子的最远距离\n        # 遍历两栋房子下标并维护最远距离\n        for i in range(n):\n            for j in range(i + 1, n):\n                if colors[i] != colors[j]:\n                    res = max(res, j - i)\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 为 $\\textit{colors}$ 的长度。即为枚举不同房子对并维护不同颜色房子最大距离的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-11-22T03:16:13.883969+00:00",
      "hitCount": 588,
      "identifier": "rMerwk",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "liang-chong-fang-fa-bao-li-tan-xin-by-li-vlkl",
        "title": "两种方法（暴力 / 贪心）【Java】"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "two-furthest-houses-with-different-colors"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "liang-dong-yan-se-bu-tong-qie-ju-chi-zui-84qv",
      "status": "PUBLISHED",
      "summary": "方法一：枚举 思路与算法 我们可以通过枚举两栋房子来计算两栋不同颜色房子的最远距离。 具体地，我们首先枚举下标较小的房子，然后在下标较小的房子右侧枚举下标较大的房子。随后，我们比较这两栋房子的颜色：如果两栋房子颜色不同，则我们计算两栋房子的距离，并尝试更新最远距离；反之则不进行任何操作。最终，我们返回最远距离作为答案。",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "两栋颜色不同且距离最远的房子",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 4,
        "id": 1115321,
        "viewCount": 482
      },
      "uuid": "rMerwk",
      "videosInfo": []
    }
  }
}
