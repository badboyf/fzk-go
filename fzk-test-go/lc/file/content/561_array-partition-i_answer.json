{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：排序\n\n**思路与算法**\n\n不失一般性，我们令每一组 $(a_i, b_i)$ 满足 $a_i \\leq b_i$（若不满足，交换二者即可），这样我们需要求得的总和\n\n$$\n\\sum_{i=1}^n \\min(a_i, b_i)\n$$\n\n就等于所有 $a_i$ 的和\n\n$$\n\\sum_{i=1}^n a_i \\tag{1}\n$$\n\n接下来，我们将所有的 $(a_i, b_i)$ 按照升序排序，使得 $a_1 \\leq a_2 \\leq \\cdots \\leq a_n$。这样一来，对于任意的 $a_j$\n\n- 它不大于 $a_{j+1}, a_{j+2}, \\cdots, a_n$；\n\n- 它不大于 $b_j$；\n\n- 由于 $a_i \\leq b_i$ 对于任意的 $i$ 恒成立，因此它不大于 $b_{j+1}, b_{j+2}, \\cdots, b_n$。\n\n由于 $a_j$ 不大于 $\\{a\\}$ 中的 $n-j$ 个元素，也不大于 $\\{b\\}$ 中的 $n-j+1$ 个元素，而这些元素都是从 $\\textit{nums}$ 中而来的，因此 $a_j$ 在数组 $\\textit{nums}$ 中「从大到小」至少排在第 $(n-j) + (n-j+1) + 1 = 2(n-j+1)$ 个位置，也就是「从小到大」至多排在第 $2n - 2(n-j+1) + 1 = 2(j-1) + 1$ 个位置，这里位置的编号从 $1$ 开始，即\n\n$$\na_j \\leq c_{2(j-1)+1}\n$$\n\n其中数组 $c$ 是将数组 $\\textit{nums}$ 升序排序得到的结果，代入 $(1)$ 式即可得到\n\n$$\n\\sum_{i=1}^n a_i \\leq \\sum_{i=1}^n c_{2(i-1)+1} \\tag{2}\n$$\n\n另一方面，令 $(a_1, b_1) = (c_1, c_2), (a_2, b_2) = (c_3, c_4), \\cdots, (a_n, b_n) = (c_{2n-1}, c_{2n})$，此时每一组 $(a_i, b_i)$ 都满足 $a_i \\leq b_i$ 的要求，并且有 $a_1 \\leq a_2 \\leq \\cdots \\leq a_n$，此时\n\n$$\n\\sum_{i=1}^n a_i = \\sum_{i=1}^n c_{2(i-1)+1}\n$$\n\n即 $(2)$ 式的等号是可满足的。因此所要求得的最大总和即为\n\n$$\n\\sum_{i=1}^n c_{2(i-1)+1}\n$$\n\n**代码**\n\n需要注意大部分语言的数组编号是从 $0$（而不是上文中的 $1$）开始的。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int arrayPairSum(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        int ans = 0;\n        for (int i = 0; i < nums.size(); i += 2) {\n            ans += nums[i];\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int arrayPairSum(int[] nums) {\n        Arrays.sort(nums);\n        int ans = 0;\n        for (int i = 0; i < nums.length; i += 2) {\n            ans += nums[i];\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def arrayPairSum(self, nums: List[int]) -> int:\n        nums.sort()\n        return sum(nums[::2])\n```\n\n```JavaScript [sol1-JavaScript]\nvar arrayPairSum = function(nums) {\n    nums.sort((a, b) => a - b);\n    let ans = 0;\n    for (let i = 0; i < nums.length; i += 2) {\n        ans += nums[i];\n    }\n    return ans;\n};\n```\n\n```go [sol1-Golang]\nfunc arrayPairSum(nums []int) (ans int) {\n    sort.Ints(nums)\n    for i := 0; i < len(nums); i += 2 {\n        ans += nums[i]\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint arrayPairSum(int *nums, int numsSize) {\n    qsort(nums, numsSize, sizeof(int), cmp);\n    int ans = 0;\n    for (int i = 0; i < numsSize; i += 2) {\n        ans += nums[i];\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，即为对数组 $\\textit{nums}$ 进行排序的时间复杂度。\n\n- 空间复杂度：$O(\\log n)$，即为排序需要使用的栈空间。",
      "createdAt": "2021-02-15T15:27:45.967332+00:00",
      "hitCount": 20824,
      "identifier": "pfpZN4",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jue-dui-neng-kan-dong-de-zheng-ming-fan-f7trz",
        "title": "【宫水三叶の相信科学系列】反证法证明贪心算法的正确性"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "array-partition-i"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 28,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "shu-zu-chai-fen-i-by-leetcode-solution-9m9y",
      "status": "PUBLISHED",
      "summary": "方法一：排序 思路与算法 不失一般性，我们令每一组 $(a_i, b_i)$ 满足 $a_i \\leq b_i$（若不满足，交换二者即可），这样我们需要求得的总和 \\sum_{i=1}^n \\min(a_i, b_i) 就等于所有 $a_i$ 的和 \\sum_{i=1}^n a_i \\tag{1} 接下来，我们将所有的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "数组拆分 I",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 119,
        "id": 605046,
        "viewCount": 18230
      },
      "uuid": "pfpZN4",
      "videosInfo": []
    }
  }
}
