{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：最短路 + 有向无环图上的动态规划\n\n**提示 $1$**\n\n记 $\\textit{dist}[i]$ 表示从起点 $0$ 到节点 $i$ 的最短路径的长度。\n\n如果我们希望花费最短的时间从起点 $0$ 到达终点 $n-1$，那么我们走过的每一条边 $u \\to v$ 都需要满足：\n\n$$\n\\textit{dist}[v] - \\textit{dist}[u] = \\textit{length}(u \\to v)\n$$\n\n其中 $\\textit{length}(u \\to v)$ 表示连接 $u$ 与 $v$ 的这条边的长度。\n\n**提示 $1$ 解释**\n\n假设我们当前位于节点 $u$。要想走出从起点 $0$ 经过节点 $u$ 到达终点 $n-1$ 的最短路径，我们首先一定要在最短的时间内到达节点 $u$，也就是 $\\textit{dist}[u]$。\n\n那么我们如何选择下一个节点呢？假设某一节点 $v$ 与节点 $u$ 相邻，即存在一条 $u \\to v$ 的边。经过这条边后，我们花费的时间变为 $\\textit{dist}[u] + \\textit{length}(u \\to v)$，那么与 $\\textit{dist}[v]$ 本身对比，会有下面的几种情况：\n\n- 如果 $\\textit{dist}[u] + \\textit{length}(u \\to v) < \\textit{dist}[v]$，那这是不可能的。因为 $\\textit{dist}[v]$ 表示从起点 $0$ 到节点 $v$ 的最短路径长度，这就与我们求出的答案相矛盾了。\n\n- 如果 $\\textit{dist}[u] + \\textit{length}(u \\to v) = \\textit{dist}[v]$，那么我们在最短的时间内到达了节点 $v$，即目前我们还是有可能在最短的时间内到达终点 $n-1$ 的。\n\n- 如果 $\\textit{dist}[u] + \\textit{length}(u \\to v) > \\textit{dist}[v]$，难么我们就没有机会在最短的时间内（在经过节点 $v$ 的前提下）到达终点 $n-1$ 了。\n\n**提示 $2$**\n\n我们对于给定的城市路线的「无向图」建立一个新的「有向图」$G$：\n\n- 「无向图」与「有向图」的节点相同；\n\n- 「有向图」中有一条 $u \\to v$ 的有向边，当且仅当 $\\textit{dist}[v] - \\textit{dist}[u] = \\textit{length}(u \\to v)$ 成立。\n\n可以发现 $G$ 一定是一个无环图，因为每一条有向边总是从 $\\textit{dist}$ 值较小的节点指向 $\\textit{dist}$ 值较大的节点，因此图 $G$ 中不可能存在环。\n\n这样一来，我们在图 $G$ 上从起点 $0$ 开始，顺便边的方法任意地进行移动，只要到达终点 $n-1$，就一定是一条最短路径。我们就可以使用动态规划的方法，求出从起点 $0$ 到终点 $n-1$ 的路径数目了。\n\n**思路与算法**\n\n记 $f[i]$ 表示在图 $G$ 上从节点 $i$ 走到终点 $n-1$ 的路径数目。在进行动态规划时，我们可以考虑下一个走到的节点 $j$，那么有：\n\n$$\nf[i] = \\sum_{(i \\to j) \\in G} f[j]\n$$\n\n特别地，当 $i=n-1$ 时，我们已经到达了终点，那么有：\n\n$$\nf[i] = 1\n$$\n\n最终的答案即为 $f[0]$。\n\n**细节**\n\n上述的状态转移方程使用自顶向下的记忆化搜索编写起来较为容易。本质上来说，在有向无环图上的动态规划的求解顺序可以为该图的任意一种拓扑排序（或者拓扑排序的逆序）。「记忆化搜索」对应着「深度优先搜索」求解拓扑排序，而「动态规划」对应着「广度优先搜索」求解拓扑排序。\n\n$\\textit{dist}$ 的值可以通过任一最短路径算法求得。在本题中，节点个数不超过 $200$，因此可以使用 $\\text{Floyd}$ 算法在 $O(n^3)$ 的时间内求出 $\\textit{dist}$。当然，我们也可以使用 $\\text{Dijkstra}$ 算法在 $O(n^2)$ 的时间内求出 $\\textit{dist}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr int mod = 1000000007;\n\npublic:\n    int countPaths(int n, vector<vector<int>>& roads) {\n        vector<vector<long long>> dist(n, vector<long long>(n, LLONG_MAX / 2));\n        for (int i = 0; i < n; ++i) {\n            dist[i][i] = 0;\n        }\n        for (auto&& road: roads) {\n            int x = road[0], y = road[1], z = road[2];\n            dist[x][y] = dist[y][x] = z;\n        }\n\n        // Floyd 算法求解最短路\n        // 完成后，dist[0][i] 即为正文部分的 dist[i]\n        // for (int k = 0; k < n; ++k) {\n        //     for (int i = 0; i < n; ++i) {\n        //         for (int j = 0; j < n; ++j) {\n        //             dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);\n        //         }\n        //     }\n        // }\n\n        // Dijkstra 算法求解最短路\n        // 完成后，dist[0][i] 即为正文部分的 dist[i]\n        vector<int> used(n);\n        for (int _ = 0; _ < n; ++_) {\n            int u = -1;\n            for (int i = 0; i < n; ++i) {\n                if (!used[i] && (u == -1 || dist[0][i] < dist[0][u])) {\n                    u = i;\n                }\n            }\n            used[u] = true;\n            for (int i = 0; i < n; ++i) {\n                dist[0][i] = min(dist[0][i], dist[0][u] + dist[u][i]);\n            }\n        }\n\n        // 构造图 G\n        vector<vector<int>> g(n);\n        for (auto&& road: roads) {\n            int x = road[0], y = road[1], z = road[2];\n            if (dist[0][y] - dist[0][x] == z) {\n                g[x].push_back(y);\n            }\n            else if (dist[0][x] - dist[0][y] == z) {\n                g[y].push_back(x);\n            }\n        }\n\n        vector<int> f(n, -1);\n        function<int(int)> dfs = [&](int u) {\n            if (u == n - 1) {\n                return 1;\n            }\n            if (f[u] != -1) {\n                return f[u];\n            }\n\n            f[u] = 0;\n            for (int v: g[u]) {\n                f[u] += dfs(v);\n                if (f[u] >= mod) {\n                    f[u] -= mod;\n                }\n            }\n            return f[u];\n        };\n        return dfs(0);\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countPaths(self, n: int, roads: List[List[int]]) -> int:\n        mod = 10**9 + 7\n        \n        dist = [[float(\"inf\")] * n for _ in range(n)]\n        for i in range(n):\n            dist[i][i] = 0\n        \n        for x, y, z in roads:\n            dist[x][y] = dist[y][x] = z\n        \n        # Floyd 算法求解最短路\n        # 完成后，dist[0][i] 即为正文部分的 dist[i]\n        # for k in range(n):\n        #     for i in range(n):\n        #         for j in range(n):\n        #             dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n        # Dijkstra 算法求解最短路\n        # 完成后，dist[0][i] 即为正文部分的 dist[i]\n        seen = set()\n        for _ in range(n - 1):\n            u = None\n            for i in range(n):\n                if i not in seen and (not u or dist[0][i] < dist[0][u]):\n                    u = i\n            seen.add(u)\n            for i in range(n):\n                dist[0][i] = min(dist[0][i], dist[0][u] + dist[u][i])\n\n        # 构造图 G\n        g = defaultdict(list)\n        for x, y, z in roads:\n            if dist[0][y] - dist[0][x] == z:\n                g[x].append(y)\n            elif dist[0][x] - dist[0][y] == z:\n                g[y].append(x)\n\n        @cache\n        def dfs(u: int) -> int:\n            if u == n - 1:\n                return 1\n\n            ret = 0\n            for v in g[u]:\n                ret += dfs(v)\n            return ret % mod\n        \n        ans = dfs(0)\n        dfs.cache_clear()\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^3)$ 或 $O(n^2)$。由于动态规划需要的时间为 $O(n^2)$，因此算法的瓶颈在于求解 $\\textit{dist}$。如果使用 $\\text{Floyd}$ 算法，那么时间复杂度为 $O(n^3)$；如果使用 $\\text{Dijkstra}$ 算法，那么时间复杂度为 $O(n^2)$。\n\n- 空间复杂度：$O(n^2)$。在使用 $\\text{Floyd}$ 算法时，我们需要将图以邻接矩阵的形式进行存储，因此需要 $O(n^2)$ 的空间。而对于 $\\text{Dijkstra}$ 算法而言，使用的空间正比于图中的边数，而本题的数据范围中的边数最多为 $\\dfrac{n(n-1)}{2} = O(n^2)$，因此同样需要 $O(n^2)$ 的空间。",
      "createdAt": "2021-08-22T09:17:42.997002+00:00",
      "hitCount": 2790,
      "identifier": "lmnGZ7",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "5836-dao-da-mu-de-di-de-fang-an-shu-zui-c1d2m",
        "title": "5836. 到达目的地的方案数 - 最短路径 + 动态规划"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "number-of-ways-to-arrive-at-destination"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "dao-da-mu-de-di-de-fang-an-shu-by-leetco-5ptp",
      "status": "PREPUBLISH",
      "summary": "方法一：最短路 + 有向无环图上的动态规划 提示 $1$ 记 $\\textit{dist}[i]$ 表示从起点 $0$ 到节点 $i$ 的最短路径的长度。 如果我们希望花费最短的时间从起点 $0$ 到达终点 $n-1$，那么我们走过的每一条边 $u \\to v$ 都需要满足： \\textit{dist}[v] - \\t",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Graph",
          "nameTranslated": "图",
          "slug": "graph",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Memoization",
          "nameTranslated": "记忆化搜索",
          "slug": "memoization",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Shortest Path",
          "nameTranslated": "最短路",
          "slug": "shortest-path",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "到达目的地的方案数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 951921,
        "viewCount": 1630
      },
      "uuid": "lmnGZ7",
      "videosInfo": []
    }
  }
}
