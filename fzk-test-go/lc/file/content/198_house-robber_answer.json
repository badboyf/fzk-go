{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺视频题解  \n\n![198.打家劫舍.mp4](0c807bbf-a976-48e3-8db5-cfbe7a9c80d7)\n\n### 📖文字题解\n\n#### 方法一：动态规划\n\n首先考虑最简单的情况。如果只有一间房屋，则偷窃该房屋，可以偷窃到最高总金额。如果只有两间房屋，则由于两间房屋相邻，不能同时偷窃，只能偷窃其中的一间房屋，因此选择其中金额较高的房屋进行偷窃，可以偷窃到最高总金额。\n\n如果房屋数量大于两间，应该如何计算能够偷窃到的最高总金额呢？对于第 $k~(k>2)$ 间房屋，有两个选项：\n\n1. 偷窃第 $k$ 间房屋，那么就不能偷窃第 $k-1$ 间房屋，偷窃总金额为前 $k-2$ 间房屋的最高总金额与第 $k$ 间房屋的金额之和。\n\n2. 不偷窃第 $k$ 间房屋，偷窃总金额为前 $k-1$ 间房屋的最高总金额。\n\n在两个选项中选择偷窃总金额较大的选项，该选项对应的偷窃总金额即为前 $k$ 间房屋能偷窃到的最高总金额。\n\n用 $\\textit{dp}[i]$ 表示前 $i$ 间房屋能偷窃到的最高总金额，那么就有如下的状态转移方程：\n\n$$\n\\textit{dp}[i] = \\max(\\textit{dp}[i-2]+\\textit{nums}[i], \\textit{dp}[i-1])\n$$\n\n边界条件为：\n\n$$\n\\begin{cases}\n\\textit{dp}[0] = \\textit{nums}[0] & 只有一间房屋，则偷窃该房屋 \\\\\n\\textit{dp}[1] = \\max(\\textit{nums}[0], \\textit{nums}[1]) & 只有两间房屋，选择其中金额较高的房屋进行偷窃\n\\end{cases}\n$$\n\n最终的答案即为 $\\textit{dp}[n-1]$，其中 $n$ 是数组的长度。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/198/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/198/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/198/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/198/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/198/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/198/6.PNG)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int rob(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int length = nums.length;\n        if (length == 1) {\n            return nums[0];\n        }\n        int[] dp = new int[length];\n        dp[0] = nums[0];\n        dp[1] = Math.max(nums[0], nums[1]);\n        for (int i = 2; i < length; i++) {\n            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);\n        }\n        return dp[length - 1];\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if (nums.empty()) {\n            return 0;\n        }\n        int size = nums.size();\n        if (size == 1) {\n            return nums[0];\n        }\n        vector<int> dp = vector<int>(size, 0);\n        dp[0] = nums[0];\n        dp[1] = max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);\n        }\n        return dp[size - 1];\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        size = len(nums)\n        if size == 1:\n            return nums[0]\n        \n        dp = [0] * size\n        dp[0] = nums[0]\n        dp[1] = max(nums[0], nums[1])\n        for i in range(2, size):\n            dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])\n        \n        return dp[size - 1]\n```\n\n```golang [sol1-Golang]\nfunc rob(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) == 1 {\n        return nums[0]\n    }\n    dp := make([]int, len(nums))\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i := 2; i < len(nums); i++ {\n        dp[i] = max(dp[i-2] + nums[i], dp[i-1])\n    }\n    return dp[len(nums)-1]\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n上述方法使用了数组存储结果。考虑到每间房屋的最高总金额只和该房屋的前两间房屋的最高总金额相关，因此可以使用滚动数组，在每个时刻只需要存储前两间房屋的最高总金额。\n\n```Java [sol2-Java]\nclass Solution {\n    public int rob(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int length = nums.length;\n        if (length == 1) {\n            return nums[0];\n        }\n        int first = nums[0], second = Math.max(nums[0], nums[1]);\n        for (int i = 2; i < length; i++) {\n            int temp = second;\n            second = Math.max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if (nums.empty()) {\n            return 0;\n        }\n        int size = nums.size();\n        if (size == 1) {\n            return nums[0];\n        }\n        int first = nums[0], second = max(nums[0], nums[1]);\n        for (int i = 2; i < size; i++) {\n            int temp = second;\n            second = max(first + nums[i], second);\n            first = temp;\n        }\n        return second;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        size = len(nums)\n        if size == 1:\n            return nums[0]\n        \n        first, second = nums[0], max(nums[0], nums[1])\n        for i in range(2, size):\n            first, second = second, max(first + nums[i], second)\n        \n        return second\n```\n\n```golang [sol2-Golang]\nfunc rob(nums []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) == 1 {\n        return nums[0]\n    }\n    first := nums[0]\n    second := max(nums[0], nums[1])\n    for i := 2; i < len(nums); i++ {\n        first, second = second, max(first + nums[i], second)\n    }\n    return second\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是数组长度。只需要对数组遍历一次。\n\n* 空间复杂度：$O(1)$。使用滚动数组，可以只存储前两间房屋的最高总金额，而不需要存储整个数组的结果，因此空间复杂度是 $O(1)$。",
      "createdAt": "2020-05-27T09:01:57.065694+00:00",
      "hitCount": 188754,
      "identifier": "K2QaPH",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap",
        "title": "图解动态规划的解题四步骤（C++/Java/Python）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "house-robber"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 220,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 22,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "da-jia-jie-she-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺视频题解 📖文字题解 方法一：动态规划 首先考虑最简单的情况。如果只有一间房屋，则偷窃该房屋，可以偷窃到最高总金额。如果只有两间房屋，则由于两间房屋相邻，不能同时偷窃，只能偷窃其中的一间房屋，因此选择其中金额较高的房屋进行偷窃，可以偷窃到最高总金额。 如果房屋数量大于两间，应该如何计算能够偷窃到的最高总金额呢？对于第",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "打家劫舍",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 313,
        "id": 263856,
        "viewCount": 135663
      },
      "uuid": "K2QaPH",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/6DA7D807D51944DAA3C4B827923051B6-6-2.png",
          "duration": 375.0187,
          "videoId": "ecff672957cd4fe39801af0af26af307"
        }
      ]
    }
  }
}
