{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "## 解题思路\n\n设两字符串 $s_1$ , $s_2$ ，则两者互为重排的「充要条件」为：两字符串 $s_1$ , $s_2$ 包含的字符是一致的，即 $s_1$ , $s_2$ 所有对应字符数量都相同，仅排列顺序不同。\n\n![ccw-01-02.001.png](https://pic.leetcode-cn.com/1637859370-KkSeGV-ccw-01-02.001.png)\n\n根据以上分析，可借助「哈希表」分别统计 $s_1$ , $s_2$ 中各字符数量 `key: 字符, value: 数量` ，分为以下情况：\n\n- 若 $s_1$ , $s_2$ 字符串长度不相等，则「不互为重排」；\n- 若 $s_1$ , $s_2$ 某对应字符数量不同，则「不互为重排」；\n- 否则，若 $s_1$ , $s_2$ 所有对应字符数量都相同，则「互为重排」；\n\n具体上看，我们可以统计 $s_1$ 各字符时执行 $+1$ ，统计 $s_2$ 各字符时 $-1$ 。若两字符串互为重排，则最终哈希表中所有字符统计数值都应为 0 。\n\n<![ccw-01-02.002.png](https://pic.leetcode-cn.com/1637859370-klRKnB-ccw-01-02.002.png),![ccw-01-02.003.png](https://pic.leetcode-cn.com/1637859370-Ivpraq-ccw-01-02.003.png),![ccw-01-02.004.png](https://pic.leetcode-cn.com/1637859370-XRthoN-ccw-01-02.004.png),![ccw-01-02.005.png](https://pic.leetcode-cn.com/1637859370-vJxiBa-ccw-01-02.005.png),![ccw-01-02.006.png](https://pic.leetcode-cn.com/1637859370-KLPZsT-ccw-01-02.006.png),![ccw-01-02.007.png](https://pic.leetcode-cn.com/1637859370-IhUVGj-ccw-01-02.007.png),![ccw-01-02.008.png](https://pic.leetcode-cn.com/1637859370-kZVzFF-ccw-01-02.008.png),![ccw-01-02.009.png](https://pic.leetcode-cn.com/1637859370-PgovHE-ccw-01-02.009.png),![ccw-01-02.010.png](https://pic.leetcode-cn.com/1637859370-SrYmlx-ccw-01-02.010.png),![ccw-01-02.011.png](https://pic.leetcode-cn.com/1637859370-xMHEwG-ccw-01-02.011.png)>\n\n## 复杂度分析\n\n**时间复杂度 $O(M + N)$ ：** 其 $M$ , $N$ 分别为字符串 $s_1$ , $s_2$ 长度。当 $s_1$ , $s_2$ 无相同字符时，三轮循环的总迭代次数最多为 $2M + 2N$ ，使用 $O(M + N)$ 线性时间。\n**空间复杂度 $O(1)$ ：** 由于字符种类是有限的（常量），一般 ASCII 码共包含 128 个字符，因此可假设使用 $O(1)$ 大小的额外空间；\n\n## 代码\n\nPython 代码使用 `collections.defaultdict()` 类，可指定所有 `key` 对应的默认 `value` 。\n\n```Python []\nclass Solution:\n    def CheckPermutation(self, s1: str, s2: str) -> bool:\n        if len(s1) != len(s2):\n            return False\n        dic = defaultdict(int)\n        for c in s1:\n            dic[c] += 1\n        for c in s2:\n            dic[c] -= 1\n        for val in dic.values():\n            if val != 0:\n                return False\n        return True\n```\n\n```Java []\nclass Solution {\n    public boolean CheckPermutation(String s1, String s2) {\n        int len1 = s1.length(), len2 = s2.length();\n        if (len1 != len2)\n            return false;\n        HashMap<Character, Integer> dic = new HashMap<>();\n        for (int i = 0; i < len1; i++) {\n            dic.put(s1.charAt(i) , dic.getOrDefault(s1.charAt(i), 0) + 1);\n        }\n        for (int i = 0; i < len2; i++) {\n            dic.put(s2.charAt(i) , dic.getOrDefault(s2.charAt(i), 0) - 1);\n        }\n        for (int val : dic.values()) {\n            if (val != 0)\n                return false;\n        }\n        return true;\n    }\n}\n```\n\n```C++ []\nclass Solution {\npublic:\n    bool CheckPermutation(string s1, string s2) {\n        if (s1.length() != s2.length())\n            return false;\n        unordered_map<char, int> dic;\n        for (char c : s1) {\n            dic[c] += 1;\n        }\n        for (char c : s2) {\n            dic[c] -= 1;\n        }\n        for (auto kv : dic) {\n            if (kv.second != 0)\n                return false;\n        }\n        return true;\n    }\n};\n```\n\n#### 注释版代码\n\n```Python []\nclass Solution:\n    def CheckPermutation(self, s1: str, s2: str) -> bool:\n        # 若 s1, s2 长度不同，则不互为重排\n        if len(s1) != len(s2):\n            return False\n        # 初始化字典 dic ，且所有 key 的初始 value 都为 0\n        dic = defaultdict(int)\n        # 统计字符串 s1 各字符数量，遇到 +1\n        for c in s1:\n            dic[c] += 1\n        # 统计字符串 s2 各字符数量，遇到 -1\n        for c in s2:\n            dic[c] -= 1\n        # 遍历 s1, s2 中各字符的数量差\n        for val in dic.values():\n            # 若 s1, s2 中某字符的数量不一致，则不互为重排\n            if val != 0:\n                return False\n        # 所有字符数量都一致，因此互为重排\n        return True\n```\n\n```Java []\nclass Solution {\n    public boolean CheckPermutation(String s1, String s2) {\n        int len1 = s1.length(), len2 = s2.length();\n        // 若 s1, s2 长度不同，则不互为重排\n        if (len1 != len2)\n            return false;\n        // 初始化哈希表 dic\n        HashMap<Character, Integer> dic = new HashMap<>();\n        // 统计字符串 s1 各字符数量，遇到 +1\n        for (int i = 0; i < len1; i++) {\n            // dic.getOrDefault(key, default) 函数：在 key 存在时返回对应 value ，在 key 不存在时默认返回 default 值；\n            dic.put(s1.charAt(i) , dic.getOrDefault(s1.charAt(i), 0) + 1);\n        }\n        // 统计字符串 s2 各字符数量，遇到 -1\n        for (int i = 0; i < len2; i++) {\n            dic.put(s2.charAt(i) , dic.getOrDefault(s2.charAt(i), 0) - 1);\n        }\n        // 遍历 s1, s2 中各字符的数量差\n        for (int val : dic.values()) {\n            // 若 s1, s2 中某字符的数量不一致，则不互为重排\n            if (val != 0)\n                return false;\n        }\n        // 所有字符数量都一致，因此互为重排\n        return true;\n    }\n}\n```\n\n```C++ []\nclass Solution {\npublic:\n    bool CheckPermutation(string s1, string s2) {\n        // 若 s1, s2 长度不同，则不互为重排\n        if (s1.length() != s2.length())\n            return false;\n        // 初始化哈希表 dic\n        unordered_map<char, int> dic;\n        // 统计字符串 s1 各字符数量，遇到 +1\n        for (char c : s1) {\n            dic[c] += 1;\n        }\n        // 统计字符串 s2 各字符数量，遇到 -1\n        for (char c : s2) {\n            dic[c] -= 1;\n        }\n        // 遍历 s1, s2 中各字符的数量差\n        for (auto kv : dic) {\n            // 若 s1, s2 中某字符的数量不一致，则不互为重排\n            if (kv.second != 0)\n                return false;\n        }\n        // 所有字符数量都一致，因此互为重排\n        return true;\n    }\n};\n```\n",
      "createdAt": "2021-11-28T07:31:42.517537+00:00",
      "hitCount": 36,
      "identifier": "HQrrPd",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-huo-chu-li-by-cchealther-ljka",
        "title": "异或处理"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "check-permutation-lcci"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-0102-pan-ding-shi-fou-hu-wei-ieuc",
      "status": "PREPUBLISH",
      "summary": "解题思路\n设两字符串 s_1 , s_2 ，则两者互为重排的「充要条件」为：两字符串 s_1 , s_2 包含的字符是一致的，即 s_1 , s_2 所有对应字符数量都相同，仅排列顺序不同。\n根据以上分析，可借助「哈希表」分别统计 s_1 , s_2 中各字符数量 key: 字符, value: 数量 ，分为以下情况：",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1637859370-KkSeGV-ccw-01-02.001.png",
      "title": "面试题 01.02. 判定是否互为字符重排（哈希表，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1126758,
        "viewCount": 27
      },
      "uuid": "HQrrPd",
      "videosInfo": []
    }
  }
}
