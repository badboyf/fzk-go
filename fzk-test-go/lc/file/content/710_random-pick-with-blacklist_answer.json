{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：维护白名单 [超出时间限制，超出空间限制]\n\n如果我们有了白名单（即黑名单之外的所有整数），那么我们就可以在白名单中随机选取整数并返回了。\n\n我们首先在集合中放入 `[0, N)` 中的所有整数，随后移除所有在黑名单中出现过的数，并把剩下的数放入列表中，就得到了白名单。\n\n```C++ [sol1]\nclass Solution {\npublic:\n\n    vector<int> w;\n\n    Solution(int n, vector<int> blacklist) {\n        unordered_set<int> W;\n        for (int i = 0; i < n; i++) W.insert(i);\n        for (int x : blacklist) W.erase(x);\n        for (auto it = W.begin(); it != W.end(); it++) w.push_back(*it);\n    }\n\n    int pick() {\n        return w[rand() % w.size()];\n    }\n};\n```\n\n```Java [sol1]\nclass Solution {\n\n    List<Integer> w;\n    Random r;\n\n    public Solution(int n, int[] b) {\n        w = new ArrayList<>();\n        r = new Random();\n        Set<Integer> W = new HashSet<>();\n        for (int i = 0; i < n; i++) W.add(i);\n        for (int x : b) W.remove(x);\n        for (int x : W) w.add(x);\n    }\n\n    public int pick() {\n        return w.get(r.nextInt(w.size()));\n    }\n}\n```\n\n然而题目中的 `N` 的最大值为 `1000000000`，将所有的数放入集合中会超出时间限制，并且存储这个白名单会超出空间限制。\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$。预处理的时间复杂度为 $O(N)$，超出了时间限制。随机选择的时间复杂度为 $O(1)$。\n\n* 空间复杂度：$O(N)$，超出了空间限制。\n\n#### 方法二：二分查找 [通过]\n\n**分析**\n\n通过 `N` 和黑名单列表，我们可以知道白名单中的数的数量 `M`。我们可以在 `0` 到 `M - 1` 之间产生随机数 `k`，通过在黑名单上二分查找的方法，得到白名单中第 `k` 个数。\n\n![image.png](https://pic.leetcode-cn.com/dfc7640d936ff41e7e58b9cd91df54e764c701b16b895a04ae3e22c74a8bf2c4-image.png){:width=400}\n{:align=center}\n\n\n**算法**\n\n我们设黑名单为 `B`，白名单为 `W`，给定 `k`，需要得到白名单中的第 `k` 个数 `W[k]`。\n\n首先我们将黑名单中的数进行排序，并在黑名单上二分查找。初始的值为 `lo = 0` 和 `hi = len(B) - 1`，在二分查找的每一轮中：\n\n- `mid = (lo + hi + 1) / 2`；\n\n- 令 `c = B[mid] - mid`，表示比 `B[mid]` 小的在白名单中的数的个数；\n\n- 如果 `c > k`，说明 `B[mid]` 大于 `W[k]`，因此设置 `hi = mid - 1`；\n\n- 如果 `c <= k`，说明 `B[mid]` 小于 `W[k]`，因此设置 `lo = mid`；\n\n在二分查找结束后，会有两种情况。第一种是 `B` 中最小的数都大于 `k`，那么此时 `W[k]` 就等于 `k`。第二种是 `W[k]` 大于 `B[lo]`，那么此时 `W[k]` 等于 `k + lo + 1`。\n\n```C++ [sol2]\nclass Solution {\n\n    int n;\n    vector<int> b;\n\npublic:\n\n    Solution(int N, vector<int> blacklist) {\n        n = N;\n        sort(blacklist.begin(), blacklist.end());\n        b = blacklist;\n    }\n\n    int pick() {\n        int k = rand() % (n - b.size());\n        int lo = 0;\n        int hi = b.size() - 1;\n\n        while (lo < hi) {\n            int i = (lo + hi + 1) / 2;\n            if (b[i] - i > k) hi = i - 1;\n            else lo = i;\n        }\n        return lo == hi && b[lo] - lo <= k ? k + lo + 1 : k;\n    }\n};\n```\n\n```Java [sol2]\nclass Solution {\n\n    int n;\n    vector<int> b;\n\npublic:\n\n    Solution(int N, vector<int> blacklist) {\n        n = N;\n        sort(blacklist.begin(), blacklist.end());\n        b = blacklist;\n    }\n\n    int pick() {\n        int k = rand() % (n - b.size());\n        int lo = 0;\n        int hi = b.size() - 1;\n\n        while (lo < hi) {\n            int i = (lo + hi + 1) / 2;\n            if (b[i] - i > k) hi = i - 1;\n            else lo = i;\n        }\n        return lo == hi && b[lo] - lo <= k ? k + lo + 1 : k;\n    }\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：预处理的时间复杂度为 $O(B\\log B)$，随机选择的时间复杂度为 $O(\\log B)$。\n\n* 空间复杂度：根据使用的排序算法是否为原地排序，空间复杂度为 $O(B)$ 或 $O(1)$。\n\n#### 方法三：黑名单映射 [通过]\n\n**分析**\n\n白名单中数的个数为 `N - len(B)`，那么可以直接在 `[0, N - len(B))` 中随机生成整数。我们把所有小于 `N - len(B)` 且在黑名单中数一一映射到大于等于 `N - len(B)` 且出现在白名单中的数。这样一来，如果随机生成的整数出现在黑名单中，我们就返回它唯一对应的那个出现在白名单中的数即可。\n\n例如当 `N = 6`，`B = [0, 2, 3]` 时，我们在 `[0, 3)` 中随机生成整数，并将 `2` 映射到 `4`，`3` 映射到 `5`，这样随机生成的整数就是 `[0, 1, 4, 5]` 中的一个。\n\n**算法**\n\n我们将黑名单分成两部分，第一部分 `X` 的数都小于 `N - len(B)`，需要进行映射；第二部分 `Y` 的数都大于等于 `N - len(B)`，这些数不需要进行映射，因为并不会随机到它们。\n\n我们先用 `Y` 构造出 `W`，表示大于等于 `N - len(B)` 且在白名单中的数，`X` 和 `W` 的长度一定是相等的。随后遍历 `X` 和 `W`，构造一个映射表（HashMap）`M`，将 `X` 和 `W` 中的数构造一一映射。\n\n在 `[0, N - len(B))` 中随机生成整数 `a` 时，如果 `a` 出现在 `M` 中，则将它的映射返回，否则直接返回 `a`。\n\n```C++ [sol3]\nclass Solution {\npublic:\n\n    unordered_map<int, int> m;\n    int wlen;\n\n    Solution(int n, vector<int> b) {\n        wlen = n - b.size();\n        unordered_set<int> w;\n        for (int i = wlen; i < n; i++) w.insert(i);\n        for (int x : b) w.erase(x);\n        auto wi = w.begin();\n        for (int x : b)\n            if (x < wlen)\n                m[x] = *wi++;\n    }\n\n    int pick() {\n        int k = rand() % wlen;\n        return m.count(k) ? m[k] : k;\n    }\n};\n```\n\n```Java [sol3]\nclass Solution {\n\n    Map<Integer, Integer> m;\n    Random r;\n    int wlen;\n\n    public Solution(int n, int[] b) {\n        m = new HashMap<>();\n        r = new Random();\n        wlen = n - b.length;\n        Set<Integer> w = new HashSet<>();\n        for (int i = wlen; i < n; i++) w.add(i);\n        for (int x : b) w.remove(x);\n        Iterator<Integer> wi = w.iterator();\n        for (int x : b)\n            if (x < wlen)\n                m.put(x, wi.next());\n    }\n\n    public int pick() {\n        int k = r.nextInt(wlen);\n        return m.getOrDefault(k, k);\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：预处理的时间复杂度为 $O(B)$，随机选择的时间复杂度为 $O(1)$。\n\n* 空间复杂度：$O(B)$。",
      "createdAt": "2019-07-22T08:06:34.180804+00:00",
      "hitCount": 7813,
      "identifier": "2PXYaM",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "java-hashmap-by-programmery-ylt1",
        "title": "Java  HashMap"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "random-pick-with-blacklist"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 21,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "hei-ming-dan-zhong-de-sui-ji-shu-by-leetcode-2",
      "status": "PUBLISHED",
      "summary": "方法一：维护白名单 [超出时间限制，超出空间限制]\n如果我们有了白名单（即黑名单之外的所有整数），那么我们就可以在白名单中随机选取整数并返回了。\n我们首先在集合中放入 [0, N) 中的所有整数，随后移除所有在黑名单中出现过的数，并把剩下的数放入列表中，就得到了白名单。\n然而题目中的 N 的最大值为 100000000",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/dfc7640d936ff41e7e58b9cd91df54e764c701b16b895a04ae3e22c74a8bf2c4-image.png",
      "title": "黑名单中的随机数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 25,
        "id": 15960,
        "viewCount": 5149
      },
      "uuid": "2PXYaM",
      "videosInfo": []
    }
  }
}
