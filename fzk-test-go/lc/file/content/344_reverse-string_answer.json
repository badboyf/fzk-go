{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：双指针\n\n**思路与算法**\n\n对于长度为 `N` 的待被反转的字符数组，我们可以观察反转前后下标的变化，假设反转前字符数组为 `s[0] s[1] s[2] ... s[N - 1]`，那么反转后字符数组为 `s[N - 1] s[N - 2] ... s[0]`。比较反转前后下标变化很容易得出 `s[i]` 的字符与 `s[N - 1 - i]` 的字符发生了交换的规律，因此我们可以得出如下双指针的解法：\n\n- 将 `left` 指向字符数组首元素，`right` 指向字符数组尾元素。\n- 当 `left < right`：\n\t- 交换  `s[left]`  和  `s[right]`；\n\t- `left` 指针右移一位，即 `left = left + 1`；\n\t- `right` 指针左移一位，即 `right = right - 1`。\n- 当 `left >= right`，反转结束，返回字符数组即可。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/344/344_fig1.png)\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void reverseString(vector<char>& s) {\n        int n = s.size();\n        for (int left = 0, right = n - 1; left < right; ++left, --right) {\n            swap(s[left], s[right]);\n        }\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseString = function(s) {\n    const n = s.length;\n    for (let left = 0, right = n - 1; left < right; ++left, --right) {\n        [s[left], s[right]] = [s[right], s[left]];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void reverseString(char[] s) {\n        int n = s.length;\n        for (int left = 0, right = n - 1; left < right; ++left, --right) {\n            char tmp = s[left];\n            s[left] = s[right];\n            s[right] = tmp;\n        }\n    }\n}\n```\n\n```Golang [sol1-Golang]\nfunc reverseString(s []byte) {\n    for left, right := 0, len(s)-1; left < right; left++ {\n        s[left], s[right] = s[right], s[left]\n        right--\n    }\n}\n```\n\n```C [sol1-C]\nvoid swap(char *a, char *b) {\n    char t = *a;\n    *a = *b, *b = t;\n}\n\nvoid reverseString(char *s, int sSize) {\n    for (int left = 0, right = sSize - 1; left < right; ++left, --right) {\n        swap(s + left, s + right);\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为字符数组的长度。一共执行了 $N/2$ 次的交换。\n- 空间复杂度：$O(1)$。只使用了常数空间来存放若干变量。",
      "createdAt": "2020-10-07T15:31:10.578022+00:00",
      "hitCount": 80293,
      "identifier": "kdjObF",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ju-ruo-de-ti-jie-by-bruh-d-tw19",
        "title": "蒟蒻的题解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "reverse-string"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 43,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "fan-zhuan-zi-fu-chuan-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：双指针 思路与算法 对于长度为 N 的待被反转的字符数组，我们可以观察反转前后下标的变化，假设反转前字符数组为 s[0] s[1] s[2] ... s[N - 1]，那么反转后字符数组为 s[N - 1] s[N - 2] ... s[0]。比较反转前后下标变化很容易得出 s[i] 的字符与 s[N - 1 ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "反转字符串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 138,
        "id": 439034,
        "viewCount": 68654
      },
      "uuid": "kdjObF",
      "videosInfo": []
    }
  }
}
