{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  概述\n我们需要在平均复杂度为 $\\mathcal{O}(1)$ 实现以下操作：\n1. `insert`\n2. `remove`\n3. `getRadom`\n\n让我们想想如何实现它。从 `insert` 开始，我们具有两个平均插入时间为 $\\mathcal{O}(1)$ 的选择：\n- 哈希表：Java 中为 `HashMap`，Python 中为 `dictionary`。\n- 动态数组：Java 中为 `ArrayList`，Python 中为 `list`。\n\n让我们一个个进行思考，虽然哈希表提供常数时间的插入和删除，但是实现 `getRandom` 时会出现问题。\n\n`getRandom` 的思想是选择一个随机索引，然后使用该索引返回一个元素。而哈希表中没有索引，因此要获得真正的随机值，则要将哈希表中的键转换为列表，这需要线性时间。解决的方法是用一个列表存储值，并在该列表中实现常数时间的 `getRandom`。\n\n列表有索引可以实现常数时间的 `insert` 和 `getRandom`，则接下来的问题是如何实现常数时间的 `remove`。\n\n删除任意索引元素需要线性时间，这里的解决方案是总是删除最后一个元素。\n- 将要删除元素和最后一个元素交换。\n- 将最后一个元素删除。\n\n为此，必须在常数时间获取到要删除元素的索引，因此需要一个哈希表来存储值到索引的映射。\n\n综上所述，我们使用以下数据结构：\n- 动态数组存储元素值\n- 哈希表存储存储值到索引的映射。\n\n####  方法：哈希表 + 动态数组\n**Insert:**\n- 添加元素到动态数组。\n- 在哈希表中添加值到索引的映射\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMzgwL2lzZXJ0LnBuZw?x-oss-process=image/format,png)\n\n```python [insert-Python]\ndef insert(self, val: int) -> bool:\n    \"\"\"\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\n    \"\"\"\n    if val in self.dict:\n        return False\n    self.dict[val] = len(self.list)\n    self.list.append(val)\n    return True\n```\n\n```java [insert-Java]\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\npublic boolean insert(int val) {\n  if (dict.containsKey(val)) return false;\n    \n  dict.put(val, list.size());\n  list.add(list.size(), val);\n  return true;\n}\n```\n\n**remove:**\n- 在哈希表中查找要删除元素的索引。\n- 将要删除元素与最后一个元素交换。\n- 删除最后一个元素。\n- 更新哈希表中的对应关系。\n\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvMzgwL2RlbGV0ZS5wbmc?x-oss-process=image/format,png)\n\n```python [remove-Python]\ndef remove(self, val: int) -> bool:\n    \"\"\"\n    Removes a value from the set. Returns true if the set contained the specified element.\n    \"\"\"\n    if val in self.dict:\n        # move the last element to the place idx of the element to delete\n        last_element, idx = self.list[-1], self.dict[val]\n        self.list[idx], self.dict[last_element] = last_element, idx\n        # delete the last element\n        self.list.pop()\n        del self.dict[val]\n        return True\n    return False\n```\n\n```java [remove-Java]\n/** Removes a value from the set. Returns true if the set contained the specified element. */\npublic boolean remove(int val) {\n  if (! dict.containsKey(val)) return false;\n\n  // move the last element to the place idx of the element to delete\n  int lastElement = list.get(list.size() - 1);\n  int idx = dict.get(val);\n  list.set(idx, lastElement);\n  dict.put(lastElement, idx);\n  // delete the last element\n  list.remove(list.size() - 1);\n  dict.remove(val);\n  return true;\n}\n```\n\n**getRandom：**\n借助 Python 中的 `random.choice` 和 Java 中 的 `Random` 实现。\n\n```python [getRandom-Python]\ndef getRandom(self) -> int:\n    \"\"\"\n    Get a random element from the set.\n    \"\"\"\n    return choice(self.list)\n```\n\n```java [getRandom-Java]\n/** Get a random element from the set. */\npublic int getRandom() {\n  return list.get(rand.nextInt(list.size()));\n}\n```\n\n**完整代码：**\n\n```python [solution1-Python]\nfrom random import choice\nclass RandomizedSet():\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.dict = {}\n        self.list = []\n\n        \n    def insert(self, val: int) -> bool:\n        \"\"\"\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\n        \"\"\"\n        if val in self.dict:\n            return False\n        self.dict[val] = len(self.list)\n        self.list.append(val)\n        return True\n        \n\n    def remove(self, val: int) -> bool:\n        \"\"\"\n        Removes a value from the set. Returns true if the set contained the specified element.\n        \"\"\"\n        if val in self.dict:\n            # move the last element to the place idx of the element to delete\n            last_element, idx = self.list[-1], self.dict[val]\n            self.list[idx], self.dict[last_element] = last_element, idx\n            # delete the last element\n            self.list.pop()\n            del self.dict[val]\n            return True\n        return False\n\n    def getRandom(self) -> int:\n        \"\"\"\n        Get a random element from the set.\n        \"\"\"\n        return choice(self.list)\n```\n\n```java [solution1-Java]\nclass RandomizedSet {\n  Map<Integer, Integer> dict;\n  List<Integer> list;\n  Random rand = new Random();\n\n  /** Initialize your data structure here. */\n  public RandomizedSet() {\n    dict = new HashMap();\n    list = new ArrayList();\n  }\n\n  /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n  public boolean insert(int val) {\n    if (dict.containsKey(val)) return false;\n\n    dict.put(val, list.size());\n    list.add(list.size(), val);\n    return true;\n  }\n\n  /** Removes a value from the set. Returns true if the set contained the specified element. */\n  public boolean remove(int val) {\n    if (! dict.containsKey(val)) return false;\n\n    // move the last element to the place idx of the element to delete\n    int lastElement = list.get(list.size() - 1);\n    int idx = dict.get(val);\n    list.set(idx, lastElement);\n    dict.put(lastElement, idx);\n    // delete the last element\n    list.remove(list.size() - 1);\n    dict.remove(val);\n    return true;\n  }\n\n  /** Get a random element from the set. */\n  public int getRandom() {\n    return list.get(rand.nextInt(list.size()));\n  }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：`getRandom` 时间复杂度为 $\\mathcal{O}(1)$，`insert` 和 `remove` 平均时间复杂度为 $\\mathcal{O}(1)$，在最坏情况下为 $\\mathcal{O}(N)$ 当元素数量超过当前分配的动态数组和哈希表的容量导致空间重新分配时。\n* 空间复杂度：$O(N)$，在动态数组和哈希表分别存储了 $N$ 个元素的信息。",
      "createdAt": "2020-01-02T06:05:37.840864+00:00",
      "hitCount": 30572,
      "identifier": "6nLRll",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "removeguo-cheng-zhong-wo-cai-de-liang-ge-swe9",
        "title": "remove()过程中我踩的两个坑"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "insert-delete-getrandom-o1"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 83,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "chang-shu-shi-jian-cha-ru-shan-chu-he-huo-qu-sui-j",
      "status": "PUBLISHED",
      "summary": "概述 我们需要在平均复杂度为 $\\mathcal{O}(1)$ 实现以下操作： 1. insert 2. remove 3. getRadom 让我们想想如何实现它。从 insert 开始，我们具有两个平均插入时间为 $\\mathcal{O}(1)$ 的选择： - 哈希表：Java 中为 HashMap，Python ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "常数时间插入、删除和获取随机元素",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 71,
        "id": 66196,
        "viewCount": 22120
      },
      "uuid": "6nLRll",
      "videosInfo": []
    }
  }
}
