{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一： 贪心\n\n**思路**\n\n所有的元素一定是按顺序 `push` 进去的，重要的是怎么 `pop` 出来？\n\n假设当前栈顶元素值为 `2`，同时对应的 `popped` 序列中下一个要 `pop` 的值也为 `2`，那就必须立刻把这个值 `pop` 出来。因为之后的 `push` 都会让栈顶元素变成不同于 `2` 的其他值，这样再 `pop` 出来的数 `popped` 序列就不对应了。\n\n**算法**\n\n将 `pushed` 队列中的每个数都 `push` 到栈中，同时检查这个数是不是 `popped` 序列中下一个要 `pop` 的值，如果是就把它 `pop` 出来。\n\n最后，检查不是所有的该 `pop` 出来的值都是 `pop` 出来了。\n\n```java [solution1-Java]\nclass Solution {\n    public boolean validateStackSequences(int[] pushed, int[] popped) {\n        int N = pushed.length;\n        Stack<Integer> stack = new Stack();\n\n        int j = 0;\n        for (int x: pushed) {\n            stack.push(x);\n            while (!stack.isEmpty() && j < N && stack.peek() == popped[j]) {\n                stack.pop();\n                j++;\n            }\n        }\n\n        return j == N;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def validateStackSequences(self, pushed, popped):\n        j = 0\n        stack = []\n        for x in pushed:\n            stack.append(x)\n            while stack and j < len(popped) and stack[-1] == popped[j]:\n                stack.pop()\n                j += 1\n\n        return j == len(popped)\n```\n\n\n**算法复杂度**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `pushed` 序列和 `popped` 序列的长度。\n\n* 空间复杂度：$O(N)$。",
      "createdAt": "2019-07-22T09:02:23.344063+00:00",
      "hitCount": 16971,
      "identifier": "PuDbqu",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "946-yan-zheng-zhan-xu-lie-by-chen-wei-f-o2ql",
        "title": "946. 验证栈序列"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "validate-stack-sequences"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 17,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "yan-zheng-zhan-xu-lie-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一： 贪心\n思路\n所有的元素一定是按顺序 push 进去的，重要的是怎么 pop 出来？\n假设当前栈顶元素值为 2，同时对应的 popped 序列中下一个要 pop 的值也为 2，那就必须立刻把这个值 pop 出来。因为之后的 push 都会让栈顶元素变成不同于 2 的其他值，这样再 pop 出来的数 popped",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "验证栈序列",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 20,
        "id": 15983,
        "viewCount": 13349
      },
      "uuid": "PuDbqu",
      "videosInfo": []
    }
  }
}
