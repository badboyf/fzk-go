{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法 1：动态规划\n\n**想法**\n\n最大值 `v` 一定会被用在树的根节点上，设 `dp(v)` 是以 `v` 为根节点的树种类数。\n\n如果树根节点有孩子 `x` 和 `y` 满足 `x * y == v`，那么就有 `dp(x) * dp(y)` 种方法构造这棵树。\n\n总共会有 $\\sum_{x * y = v} \\text{dp}(x) * \\text{dp}(y)$ 种方法构造以 `v` 为根的树。\n\n**算法**\n\n实际上，令 `dp[i]` 表示已 `A[i]` 为树根的树的种类数。\n\n在上面的例子中我们知道 `x < v` 和 `y < v`，我们可以用动态规划的方法按照升序值计算 `dp[i]` 的值。\n\n对于树根值 `A[i]`，需要找到所有可能的孩子节点取值 `A[j]` 和 `A[i] / A[j]`（显然要有 `A[j] * (A[i] / A[j]) = A[i]`）。为了快速的计算，我们使用 `index` 数组快速查找：如果 `A[k] = A[i] / A[j]`，那么 `index[A[i] / A[j]] = k`。\n\n之后，我们将所有可能的值 `dp[j] * dp[k]`（其中 `j < i, k < i`）加入结果 `dp[i]` 中。在 Java 实现中，我们谨慎的使用了 `long` 类型避免溢出错误。\n\n```Java []\nclass Solution {\n    public int numFactoredBinaryTrees(int[] A) {\n        int MOD = 1_000_000_007;\n        int N = A.length;\n        Arrays.sort(A);\n        long[] dp = new long[N];\n        Arrays.fill(dp, 1);\n\n        Map<Integer, Integer> index = new HashMap();\n        for (int i = 0; i < N; ++i)\n            index.put(A[i], i);\n\n        for (int i = 0; i < N; ++i)\n            for (int j = 0; j < i; ++j) {\n                if (A[i] % A[j] == 0) { // A[j] is left child\n                    int right = A[i] / A[j];\n                    if (index.containsKey(right)) {\n                        dp[i] = (dp[i] + dp[j] * dp[index.get(right)]) % MOD;\n                    }\n                }\n            }\n\n        long ans = 0;\n        for (long x: dp) ans += x;\n        return (int) (ans % MOD);\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def numFactoredBinaryTrees(self, A):\n        MOD = 10 ** 9 + 7\n        N = len(A)\n        A.sort()\n        dp = [1] * N\n        index = {x: i for i, x in enumerate(A)}\n        for i, x in enumerate(A):\n            for j in xrange(i):\n                if x % A[j] == 0: #A[j] will be left child\n                    right = x / A[j]\n                    if right in index:\n                        dp[i] += dp[j] * dp[index[right]]\n                        dp[i] %= MOD\n\n        return sum(dp) % MOD\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是 `A` 的长度。这是由于两层循环 `i` 和 `j`。\n* 空间复杂度：$O(N)$，`dp` 和 `index` 使用的空间。",
      "createdAt": "2019-08-21T06:37:27.402975+00:00",
      "hitCount": 3202,
      "identifier": "DvtbmQ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ha-xi-biao-by-euyvvl-pfmw",
        "title": "哈希表"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "binary-trees-with-factors"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "dai-yin-zi-de-er-cha-shu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法 1：动态规划\n想法\n最大值 v 一定会被用在树的根节点上，设 dp(v) 是以 v 为根节点的树种类数。\n如果树根节点有孩子 x 和 y 满足 x * y == v，那么就有 dp(x) * dp(y) 种方法构造这棵树。\n总共会有 \\sum_{x * y = v} \\text{dp}(x) * \\text{",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "带因子的二叉树",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 5,
        "id": 21982,
        "viewCount": 2277
      },
      "uuid": "DvtbmQ",
      "videosInfo": []
    }
  }
}
