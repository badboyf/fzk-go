{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：利用异或运算的性质\n\n原数组 $\\textit{arr}$ 的长度为 $n$，对 $\\textit{arr}$ 编码后得到长度为 $n-1$ 的数组 $\\textit{encoded}$，编码规则为：$\\textit{encoded}[i]=\\textit{arr}[i] \\oplus \\textit{arr}[i+1]$，其中 $\\oplus$ 是异或运算符，$0 \\le i<n-1$。\n\n已知编码后的数组 $\\textit{encoded}$ 和原数组 $\\textit{arr}$ 的第一个元素 $\\textit{arr}[0]=\\textit{first}$，需要解码得到原数组 $\\textit{arr}$。可以利用异或运算的性质实现。\n\n异或运算具有如下性质：\n\n- 异或运算满足交换律和结合律；\n\n- 任意整数和自身做异或运算的结果都等于 $0$，即 $x \\oplus x = 0$；\n\n- 任意整数和 $0$ 做异或运算的结果都等于其自身，即 $x \\oplus 0 = 0 \\oplus x = x$。\n\n当 $1 \\le i<n$ 时，有 $\\textit{encoded}[i-1]=\\textit{arr}[i-1] \\oplus \\textit{arr}[i]$。在等号两边同时异或 $\\textit{arr}[i-1]$，可以得到 $\\textit{arr}[i]=\\textit{arr}[i-1] \\oplus \\textit{encoded}[i-1]$，计算过程如下：\n\n$$\n\\begin{aligned}\n\\textit{encoded}[i-1] &= \\textit{arr}[i-1] \\oplus \\textit{arr}[i] \\\\\n\\textit{encoded}[i-1] \\oplus \\textit{arr}[i-1] &= \\textit{arr}[i-1] \\oplus \\textit{arr}[i] \\oplus \\textit{arr}[i-1] \\\\\n\\textit{arr}[i-1] \\oplus \\textit{encoded}[i-1] &= \\textit{arr}[i-1] \\oplus \\textit{arr}[i-1] \\oplus \\textit{arr}[i] \\\\\n\\textit{arr}[i-1] \\oplus \\textit{encoded}[i-1] &= 0 \\oplus \\textit{arr}[i] \\\\\n\\textit{arr}[i-1] \\oplus \\textit{encoded}[i-1] &= \\textit{arr}[i]\n\\end{aligned}\n$$\n\n因此当 $1 \\le i<n$ 时，有 $\\textit{arr}[i]=\\textit{arr}[i-1] \\oplus \\textit{encoded}[i-1]$。\n\n由于 $\\textit{arr}[0]=\\textit{first}$ 已知，因此对 $i$ 从 $1$ 到 $n-1$ 依次计算 $\\textit{arr}[i]$ 的值，即可解码得到原数组 $\\textit{arr}$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] decode(int[] encoded, int first) {\n        int n = encoded.length + 1;\n        int[] arr = new int[n];\n        arr[0] = first;\n        for (int i = 1; i < n; i++) {\n            arr[i] = arr[i - 1] ^ encoded[i - 1];\n        }\n        return arr;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int[] Decode(int[] encoded, int first) {\n        int n = encoded.Length + 1;\n        int[] arr = new int[n];\n        arr[0] = first;\n        for (int i = 1; i < n; i++) {\n            arr[i] = arr[i - 1] ^ encoded[i - 1];\n        }\n        return arr;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar decode = function(encoded, first) {\n    const n = encoded.length + 1;\n    const arr = new Array(n).fill(0);\n    arr[0] = first;\n    for (let i = 1; i < n; i++) {\n        arr[i] = arr[i - 1] ^ encoded[i - 1];\n    }\n    return arr;\n};\n```\n\n```go [sol1-Golang]\nfunc decode(encoded []int, first int) []int {\n    ans := make([]int, len(encoded)+1)\n    ans[0] = first\n    for i, e := range encoded {\n        ans[i+1] = ans[i] ^ e\n    }\n    return ans\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        arr = [first]\n        for num in encoded:\n            arr.append(arr[-1] ^ num)\n        return arr\n```\n\n```C [sol1-C]\nint* decode(int* encoded, int encodedSize, int first, int* returnSize) {\n    int* arr = malloc(sizeof(int) * (encodedSize + 1));\n    arr[0] = first;\n    for (int i = 0; i < encodedSize; i++) {\n        arr[i + 1] = encoded[i] ^ arr[i];\n    }\n    *returnSize = encodedSize + 1;\n    return arr;\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> decode(vector<int>& encoded, int first) {\n        int n = encoded.size() + 1;\n        vector<int> arr(n);\n        arr[0] = first;\n        for (int i = 1; i < n; i++) {\n            arr[i] = arr[i - 1] ^ encoded[i - 1];\n        }\n        return arr;\n    }\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是原数组 $\\textit{arr}$ 的长度。需要遍历长度为 $n-1$ 的编码数组 $\\textit{encoded}$ 一次，计算原数组 $\\textit{arr}$ 的每个元素值。\n\n- 空间复杂度：$O(1)$。注意空间复杂度不考虑返回值。",
      "createdAt": "2021-05-05T16:29:31.661791+00:00",
      "hitCount": 23754,
      "identifier": "LwWHG9",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-li-yong-yi-huo-xing-zh-p1bi",
        "title": "【宫水三叶】利用异或性质从头模拟一遍"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "decode-xored-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 32,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "jie-ma-yi-huo-hou-de-shu-zu-by-leetcode-yp0mg",
      "status": "PUBLISHED",
      "summary": "方法一：利用异或运算的性质 原数组 $\\textit{arr}$ 的长度为 $n$，对 $\\textit{arr}$ 编码后得到长度为 $n-1$ 的数组 $\\textit{encoded}$，编码规则为：$\\textit{encoded}[i]=\\textit{arr}[i] \\oplus \\textit{arr}[",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Bit Manipulation",
          "nameTranslated": "位运算",
          "slug": "bit-manipulation",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "解码异或后的数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 67,
        "id": 759855,
        "viewCount": 18701
      },
      "uuid": "LwWHG9",
      "videosInfo": []
    }
  }
}
