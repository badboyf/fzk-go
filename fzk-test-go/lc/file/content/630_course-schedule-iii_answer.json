{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：优先队列\n\n我们首先可以发现，如果两门课 `(t1, d1)` 和 `(t2, d2)` 满足 `d1 <= d2`，即后者的结束时间不晚于前者，那么我们先学习前者再学习后者总是最优的。因为如果先学习前者，即需要满足 `x + t1 <= d1` 且 `x + t1 + t2 <= d2`；如果先学习后者，则需要满足 `x + t2 <= d2` 且 `x + t1 + t2 <= d1`。如果后者中的 `x + t1 + t2 <= d1` 成立，那么显然有 `x + t1 <= d1` 且 `x + t1 + t2 <= d1 <= d2`，即前者一定成立；反之如果 `x = 0, (t1, d1) = (2, 3), (t2, d2) = (5, 100)`，那么前者成立且后者不成立。因此先学习前者再学习后者总是最优的。\n\n基于上面的结论，我们可以将课程按照完成时间 `d` 递增排序。假设我们在前 `i` 门课中最多可以选取 `k` 门课，并且这 `k` 门课的总时长最短（称为最优方案），那么有下面的不等式：\n\n```\nt1 + t2 <= d2\nt1 + t2 + t3 <= d3\n...\nt1 + t2 + ... + tk <= dk\n```\n\n此时我们需要判断第 `i + 1` 门课 `(t0, d0)` 是否可选。如果选取的 `k` 门课的总时长 `t` 与 `t0` 之和小于等于 `d0`，即\n\n```\nt1 + t2 + ... + tk + t0 <= d0\n```\n\n那么 `(t0, d0)` 一定可选，此时前 `i + 1` 门课的最优方案是选取 `t1, t2, ..., tk, t0` 这 `k + 1` 门课。可以使用反证法来证明，假设可以选取超过 `k + 1` 门课，或者选取 `k + 1` 门课且总时长小于 `t1 + t2 + ... + tk + t0`，那么我们去除 `(t0, d0)` 这门课，剩余的选取方案一定满足条件，且优于选取 `t1, t2, ..., tk` 的方案，与之间的假设 `t1, t2, ..., tk` 是最优方案相矛盾。\n\n如果上述不等式不满足，那么我们找出 `t1, t2, ..., tk` 中时间最长的那一门课 `tj`，如果 `tj > t0`，那么我们可以将 `tj` 用 `t0` 代替，即 `t1, t2, ..., tj-1, tj+1, ..., tk, t0` 是一种最优方案。这里同样可以使用反证法来证明。如果 `tj <= t0`，那么最优方案仍然为 `t1, t2, ..., tk`。\n\n因此我们依次遍历每一门课程，通过上面的方法，就可以得到最优方案。我们就可以通过优先队列在若干个数中选出最大值，在遍历每一门课程 `(ti, di)` 时，依次进行如下操作：\n\n- 如果当前优先队列中所有课程的时间之和 `t` 与 `ti` 之和小于等于 `di`，那么就把 `(ti, di)` 加入优先队列中；\n\n- 如果当前优先队列中所有课程的时间之和 `t` 与 `ti` 之和大于 `di`，那么找到当前优先队列中课程时间最大的课程 `(tj, dj)`（即为堆顶），如果 `tj > ti`，则将它移出优先队列，并把 `(ti, di)` 加入优先队列中。\n\n在所有的课程都判断完毕后，优先队列中包含的课程数目就代表了最多能选择的课程数目。\n\n```Java [sol1]\npublic class Solution {\n    public int scheduleCourse(int[][] courses) {\n        Arrays.sort(courses, (a, b) -> a[1] - b[1]);\n        PriorityQueue < Integer > queue = new PriorityQueue < > ((a, b) -> b - a);\n        int time = 0;\n        for (int[] c: courses) {\n            if (time + c[0] <= c[1]) {\n                queue.offer(c[0]);\n                time += c[0];\n            } else if (!queue.isEmpty() && queue.peek() > c[0]) {\n                time += c[0] - queue.poll();\n                queue.offer(c[0]);\n            }\n        }\n        return queue.size();\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，其中 $N$ 是课程的数目。\n\n* 空间复杂度：$O(N)$。",
      "createdAt": "2019-10-29T06:14:46.867369+00:00",
      "hitCount": 12471,
      "identifier": "DWiM6n",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "python-tan-xin-luo-ji-jian-shu-by-guo-yu-gcar",
        "title": "python 贪心，逻辑简述"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "course-schedule-iii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 23,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "ke-cheng-biao-iii-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：优先队列\n我们首先可以发现，如果两门课 (t1, d1) 和 (t2, d2) 满足 d1 <= d2，即后者的结束时间不晚于前者，那么我们先学习前者再学习后者总是最优的。因为如果先学习前者，即需要满足 x + t1 <= d1 且 x + t1 + t2 <= d2；如果先学习后者，则需要满足 x + t",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "优先队列",
          "nameTranslated": "",
          "slug": "you-xian-dui-lie",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "课程表 III",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 29,
        "id": 38825,
        "viewCount": 8295
      },
      "uuid": "DWiM6n",
      "videosInfo": []
    }
  }
}
