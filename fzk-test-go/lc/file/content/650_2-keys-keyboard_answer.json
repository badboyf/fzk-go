{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：动态规划\n\n**思路与算法**\n\n我们可以使用动态规划的思路解决本题。\n\n设 $f[i]$ 表示打印出 $i$ 个 $\\text{A}$ 的最少操作次数。由于我们只能使用「复制全部」和「粘贴」两种操作，那么要想得到 $i$ 个 $\\text{A}$，我们必须首先拥有 $j$ 个 $\\text{A}$，使用一次「复制全部」操作，再使用若干次「粘贴」操作得到 $i$ 个 $\\text{A}$。\n\n因此，这里的 $j$ 必须是 $i$ 的因数，「粘贴」操作的使用次数即为 $\\dfrac{i}{j} - 1$。我们可以枚举 $j$ 进行状态转移，这样就可以得到状态转移方程：\n\n$$\nf[i] = \\min_{j \\mid i} \\big\\{ f[j] + \\frac{i}{j} \\big\\}\n$$\n\n其中 $j \\mid i$ 表示 $j$ 可以整除 $i$，即 $j$ 是 $i$ 的因数。\n\n动态规划的边界条件为 $f[1] = 0$，最终的答案即为 $f[n]$。\n\n**细节**\n\n在枚举 $i$ 的因数 $j$ 时，我们可以直接在 $O(i)$ 的时间内依次枚举 $[1, i)$。\n\n由于 $i$ 肯定同时拥有因数 $j$ 和 $\\dfrac{i}{j}$，二者必有一个小于等于 $\\sqrt{i}$。因此，一种时间复杂度更低的方法是，我们只在 $[1, \\sqrt{i}]$ 的范围内枚举 $j$，并用 $j$ 和 $\\dfrac{i}{j}$ 分别作为因数进行状态转移，时间复杂度为 $O(\\sqrt{i})$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minSteps(int n) {\n        vector<int> f(n + 1);\n        for (int i = 2; i <= n; ++i) {\n            f[i] = INT_MAX;\n            for (int j = 1; j * j <= i; ++j) {\n                if (i % j == 0) {\n                    f[i] = min(f[i], f[j] + i / j);\n                    f[i] = min(f[i], f[i / j] + j);\n                }\n            }\n        }\n        return f[n];\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minSteps(int n) {\n        int[] f = new int[n + 1];\n        for (int i = 2; i <= n; ++i) {\n            f[i] = Integer.MAX_VALUE;\n            for (int j = 1; j * j <= i; ++j) {\n                if (i % j == 0) {\n                    f[i] = Math.min(f[i], f[j] + i / j);\n                    f[i] = Math.min(f[i], f[i / j] + j);\n                }\n            }\n        }\n        return f[n];\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int MinSteps(int n) {\n        int[] f = new int[n + 1];\n        for (int i = 2; i <= n; ++i) {\n            f[i] = int.MaxValue;\n            for (int j = 1; j * j <= i; ++j) {\n                if (i % j == 0) {\n                    f[i] = Math.Min(f[i], f[j] + i / j);\n                    f[i] = Math.Min(f[i], f[i / j] + j);\n                }\n            }\n        }\n        return f[n];\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minSteps(self, n: int) -> int:\n        f = [0] * (n + 1)\n        for i in range(2, n + 1):\n            f[i] = float(\"inf\")\n            j = 1\n            while j * j <= i:\n                if i % j == 0:\n                    f[i] = min(f[i], f[j] + i // j)\n                    f[i] = min(f[i], f[i // j] + j)\n                j += 1\n        \n        return f[n]\n```\n\n```go [sol1-Golang]\nfunc minSteps(n int) int {\n    f := make([]int, n+1)\n    for i := 2; i <= n; i++ {\n        f[i] = math.MaxInt32\n        for j := 1; j*j <= i; j++ {\n            if i%j == 0 {\n                f[i] = min(f[i], f[j]+i/j)\n                f[i] = min(f[i], f[i/j]+j)\n            }\n        }\n    }\n    return f[n]\n}\n\nfunc min(a, b int) int {\n    if a > b {\n        return b\n    }\n    return a\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar minSteps = function(n) {\n    const f = new Array(n + 1).fill(0);\n    for (let i = 2; i <= n; ++i) {\n        f[i] = Number.MAX_SAFE_INTEGER;\n        for (let j = 1; j * j <= i; ++j) {\n            if (i % j === 0) {\n                f[i] = Math.min(f[i], Math.floor(f[j] + i / j));\n                f[i] = Math.min(f[i], Math.floor(f[i / j] + j));\n            }\n        }\n    }\n    return f[n];\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\sqrt{n})$。\n\n- 空间复杂度：$O(n)$，即为存储所有状态需要的空间。\n\n#### 方法二：分解质因数\n\n**思路与算法**\n\n观察方法一中的状态转移方程：\n\n$$\nf[i] = \\min_{j \\mid i} \\big\\{ f[j] + \\frac{i}{j} \\big\\}\n$$\n\n我们可以转写成等价的形式：\n\n$$\nf[i] = \\min_{j \\mid i} \\big\\{ f[\\frac{i}{j}] + j \\big\\}\n$$\n\n此时状态转移方程就有了直观上的表述，即 $f[n]$ 表示：\n\n> 给定初始值 $n$，我们希望通过若干次操作将其变为 $1$。每次操作我们可以选择 $n$ 的一个大于 $1$ 的因数 $j$，耗费 $j$ 的代价并且将 $n$ 减少为 $\\dfrac{n}{j}$。在所有可行的操作序列中，总代价的**最小值**即为 $f[n]$。\n\n我们选择的所有因数的乘积必然为 $n$。因此，我们将 $n$ 拆分成若干个大于 $1$ 的整数的乘积：\n\n$$\nn = \\alpha_1 \\times \\alpha_2 \\times \\cdots \\times \\alpha_k\n$$\n\n那么总代价即为：\n\n$$\n\\sum_{i=1}^k \\alpha_i\n$$\n\n对于任意的 $\\alpha_i$，如果其为素数，那么无法继续进行拆分；如果其为合数，那么对于任意一种拆分成两个大于 $1$ 的整数的方式：\n\n$$\n\\alpha_i = \\beta_0 \\times \\beta_1\n$$\n\n拆分前的代价为 $\\beta_0 \\times \\beta_1$，而拆分后的代价为 $\\beta_0 + \\beta_1$。由于它们均大于 $1$，因此：\n\n$$\n\\beta_0 + \\beta_1 \\leq \\beta_0 \\times \\beta_1\n$$\n\n恒成立。也就是说，在达到**最小的总代价**时，我们将 $n$ 拆分成了若干个素数的乘积。因此我们只需要对 $n$ 进行质因数分解，统计所有质因数的和，即为最终的答案。\n\n**证明**\n\n当 $\\beta_0, \\beta_1 > 1$ 时：\n\n$$\n\\beta_0 \\times \\beta_1 - (\\beta_0 + \\beta_1) = (\\beta_0 - 1)(\\beta_1 - 1) - 1 \\geq 0\n$$\n\n得证。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minSteps(int n) {\n        int ans = 0;\n        for (int i = 2; i * i <= n; ++i) {\n            while (n % i == 0) {\n                n /= i;\n                ans += i;\n            }\n        }\n        if (n > 1) {\n            ans += n;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int minSteps(int n) {\n        int ans = 0;\n        for (int i = 2; i * i <= n; ++i) {\n            while (n % i == 0) {\n                n /= i;\n                ans += i;\n            }\n        }\n        if (n > 1) {\n            ans += n;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int MinSteps(int n) {\n        int ans = 0;\n        for (int i = 2; i * i <= n; ++i) {\n            while (n % i == 0) {\n                n /= i;\n                ans += i;\n            }\n        }\n        if (n > 1) {\n            ans += n;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minSteps(self, n: int) -> int:\n        ans = 0\n        i = 2\n        while i * i <= n:\n            while n % i == 0:\n                n //= i\n                ans += i\n            i += 1\n        \n        if n > 1:\n            ans += n\n        \n        return ans\n```\n\n```go [sol2-Golang]\nfunc minSteps(n int) (ans int) {\n    for i := 2; i*i <= n; i++ {\n        for n%i == 0 {\n            n /= i\n            ans += i\n        }\n    }\n    if n > 1 {\n        ans += n\n    }\n    return\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar minSteps = function(n) {\n    let ans = 0;\n    for (let i = 2; i * i <= n; ++i) {\n        while (n % i === 0) {\n            n = Math.floor(n / i);\n            ans += i;\n        }\n    }\n    if (n > 1) {\n        ans += n;\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt{n})$，即为质因数分解的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-09-18T11:01:54.424079+00:00",
      "hitCount": 26095,
      "identifier": "0LQht7",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-yi-ti-san-jie-dong-tai-f035",
        "title": "【宫水三叶】一题三解 :「动态规划」&「数学」&「打表」"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "2-keys-keyboard"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 58,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "zhi-you-liang-ge-jian-de-jian-pan-by-lee-ussa",
      "status": "PREPUBLISH",
      "summary": "方法一：动态规划 思路与算法 我们可以使用动态规划的思路解决本题。 设 $f[i]$ 表示打印出 $i$ 个 $\\text{A}$ 的最少操作次数。由于我们只能使用「复制全部」和「粘贴」两种操作，那么要想得到 $i$ 个 $\\text{A}$，我们必须首先拥有 $j$ 个 $\\text{A}$，使用一次「复制全部」操作",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "只有两个键的键盘",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 114,
        "id": 1004937,
        "viewCount": 16415
      },
      "uuid": "0LQht7",
      "videosInfo": []
    }
  }
}
