{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "何廷",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/mchh-r/avatar_1635945584.png",
          "userSlug": "htch"
        },
        "username": "htch"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "**1、链表+递归**\r\n![image.png](https://pic.leetcode-cn.com/1637978981-gqKCNI-image.png)\r\n\r\n```java\r\nclass Solution {\r\n    List<TreeNode> list = new LinkedList<>();\r\n\r\n    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {\r\n        inorder(root);\r\n        if (list.indexOf(p) + 1 == list.size()) return null;\r\n        return list.get(list.indexOf(p) + 1);\r\n    }\r\n\r\n    //因为是二叉搜索树，所以中序遍历后节点值大小一定是从小到大\r\n    private void inorder(TreeNode node) {\r\n        if (node == null) return;\r\n        inorder(node.left);\r\n        list.add(node);\r\n        inorder(node.right);\r\n    }\r\n}\r\n```\r\n\r\n**2、while循环**\r\n![image.png](https://pic.leetcode-cn.com/1637978949-rglALy-image.png)\r\n\r\n```java\r\nclass Solution {\r\n    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {\r\n        // 记录当前比 p 节点大的节点\r\n        TreeNode ans = null;\r\n        // 在二叉搜索树中进行搜索\r\n        while(root != null){\r\n            // 如果当前节点 > p，则更新当前比 p 节点大的节点 ans , 同时去左子树进行搜索\r\n            if(root.val > p.val){\r\n                ans = root;\r\n                root = root.left;\r\n            }else{// 如果当前节点 < p , 则到右子树进行搜索\r\n                root = root.right;\r\n            }\r\n        }\r\n        // 当搜寻结束后，ans 保存的就是最近的比 p 节点大的节点。\r\n        return ans;\r\n    }\r\n}\r\n```\r\n",
      "createdAt": "2021-11-27T02:12:03.249837+00:00",
      "hitCount": 24,
      "identifier": "h5vFON",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "javali-yong-er-cha-sou-suo-shu-xing-zhi-54at4",
        "title": "Java利用二叉搜索树性质，迭代"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "P5rCT8"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "java-liang-chong-fang-fa-jie-jue-lian-bi-dlpf",
      "status": "PREPUBLISH",
      "summary": "1、链表+递归\n\n2、while循环",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1637978981-gqKCNI-image.png",
      "title": "Java 两种方法解决【链表+中序遍历、while循环】",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1124543,
        "viewCount": 22
      },
      "uuid": "h5vFON",
      "videosInfo": []
    }
  }
}
