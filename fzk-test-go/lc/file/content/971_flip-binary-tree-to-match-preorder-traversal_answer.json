{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：深度优先搜索\n\n**思路**\n\n当做先序遍历的时候，我们可能会翻转某一个节点，尝试使我们当前的遍历序列与给定的行程序列相匹配。\n\n如果我们希望先序遍历序列的下一个数字是 `voyage[i]` ，那么至多只有一种可行的遍历路径供我们选择，因为所有节点的值都不相同。\n\n**算法**\n\n进行深度优先遍历。如果遍历到某一个节点的时候，节点值不能与行程序列匹配，那么答案一定是 `[-1]`。\n\n否则，当行程序列中的下一个期望数字 `voyage[i]` 与我们即将遍历的子节点的值不同的时候，我们就要翻转一下当前这个节点。\n\n```java [Qqi74tmF-Java]\nclass Solution {\n    List<Integer> flipped;\n    int index;\n    int[] voyage;\n\n    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {\n        flipped = new ArrayList();\n        index = 0;\n        this.voyage = voyage;\n\n        dfs(root);\n        if (!flipped.isEmpty() && flipped.get(0) == -1) {\n            flipped.clear();\n            flipped.add(-1);\n        }\n\n        return flipped;\n    }\n\n    public void dfs(TreeNode node) {\n        if (node != null) {\n            if (node.val != voyage[index++]) {\n                flipped.clear();\n                flipped.add(-1);\n                return;\n            }\n\n            if (index < voyage.length && node.left != null &&\n                    node.left.val != voyage[index]) {\n                flipped.add(node.val);\n                dfs(node.right);\n                dfs(node.left);\n            } else {\n                dfs(node.left);\n                dfs(node.right);\n            }\n        }\n    }\n}\n```\n```python [Qqi74tmF-Python]\nclass Solution(object):\n    def flipMatchVoyage(self, root, voyage):\n        self.flipped = []\n        self.i = 0\n\n        def dfs(node):\n            if node:\n                if node.val != voyage[self.i]:\n                    self.flipped = [-1]\n                    return\n                self.i += 1\n\n                if (self.i < len(voyage) and\n                        node.left and node.left.val != voyage[self.i]):\n                    self.flipped.append(node.val)\n                    dfs(node.right)\n                    dfs(node.left)\n                else:\n                    dfs(node.left)\n                    dfs(node.right)\n\n        dfs(root)\n        if self.flipped and self.flipped[0] == -1:\n            self.flipped = [-1]\n        return self.flipped\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是给定树中节点的数量。\n\n* 空间复杂度：$O(N)$。\n\n\n\n",
      "createdAt": "2019-01-11T12:57:12.917124+00:00",
      "hitCount": 9286,
      "identifier": "QIMca1",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "js-mo-ni-fan-zhuan-pan-duan-dang-qian-ji-6698",
        "title": "【js】模拟反转，判断当前节点的值是否和先序顺序一样"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "flip-binary-tree-to-match-preorder-traversal"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "fan-zhuan-er-cha-shu-yi-pi-pei-xian-xu-bian-li-by-",
      "status": "PUBLISHED",
      "summary": "思路\n当做先序遍历的时候，我们可能会翻转某一个节点，尝试使我们当前的遍历序列与给定的行程序列相匹配。\n如果我们希望先序遍历序列的下一个数字是 voyage[i] ，那么至多只有一种可行的遍历路径供我们选择，因为所有节点的值都不相同。\n算法\n进行深度优先遍历。如果遍历到某一个节点的时候，节点值不能与行程序列匹配，那么答案",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "翻转二叉树以匹配先序遍历",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 3583,
        "viewCount": 5933
      },
      "uuid": "QIMca1",
      "videosInfo": []
    }
  }
}
