{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：分治\n\n对于字符串 $s$，如果存在某个字符 $\\textit{ch}$，它的出现次数大于 $0$ 且小于 $k$，则任何包含 $\\textit{ch}$ 的子串都不可能满足要求。也就是说，我们将字符串按照 $\\textit{ch}$ 切分成若干段，则满足要求的最长子串一定出现在某个被切分的段内，而不能跨越一个或多个段。因此，可以考虑分治的方式求解本题。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int dfs(const string& s, int l, int r, int k) {\n        vector<int> cnt(26, 0);\n        for (int i = l; i <= r; i++) {\n            cnt[s[i] - 'a']++;\n        }\n\n        char split = 0;\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > 0 && cnt[i] < k) {\n                split = i + 'a';\n                break;\n            }\n        }\n        if (split == 0) {\n            return r - l + 1;\n        }\n\n        int i = l;\n        int ret = 0;\n        while (i <= r) {\n            while (i <= r && s[i] == split) {\n                i++;\n            }\n            if (i > r) {\n                break;\n            }\n            int start = i;\n            while (i <= r && s[i] != split) {\n                i++;\n            }\n\n            int length = dfs(s, start, i - 1, k);\n            ret = max(ret, length);\n        }\n        return ret;\n    }\n\n    int longestSubstring(string s, int k) {\n        int n = s.length();\n        return dfs(s, 0, n - 1, k);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int longestSubstring(String s, int k) {\n        int n = s.length();\n        return dfs(s, 0, n - 1, k);\n    }\n\n    public int dfs(String s, int l, int r, int k) {\n        int[] cnt = new int[26];\n        for (int i = l; i <= r; i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n\n        char split = 0;\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > 0 && cnt[i] < k) {\n                split = (char) (i + 'a');\n                break;\n            }\n        }\n        if (split == 0) {\n            return r - l + 1;\n        }\n\n        int i = l;\n        int ret = 0;\n        while (i <= r) {\n            while (i <= r && s.charAt(i) == split) {\n                i++;\n            }\n            if (i > r) {\n                break;\n            }\n            int start = i;\n            while (i <= r && s.charAt(i) != split) {\n                i++;\n            }\n\n            int length = dfs(s, start, i - 1, k);\n            ret = Math.max(ret, length);\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar longestSubstring = function(s, k) {\n    const n = s.length;\n    return dfs(s, 0, n - 1, k);\n}\n\nconst dfs = (s, l, r, k) => {\n    const cnt = new Array(26).fill(0);\n    for (let i = l; i <= r; i++) {\n        cnt[s[i].charCodeAt() - 'a'.charCodeAt()]++;\n    }\n\n    let split = 0;\n    for (let i = 0; i < 26; i++) {\n        if (cnt[i] > 0 && cnt[i] < k) {\n            split = String.fromCharCode(i + 'a'.charCodeAt());\n            break;\n        }\n    }\n    if (split == 0) {\n        return r - l + 1;\n    }\n\n    let i = l;\n    let ret = 0;\n    while (i <= r) {\n        while (i <= r && s[i] === split) {\n            i++;\n        }\n        if (i > r) {\n            break;\n        }\n        let start = i;\n        while (i <= r && s[i] !== split) {\n            i++;\n        }\n\n        const length = dfs(s, start, i - 1, k);\n        ret = Math.max(ret, length);\n    }\n    return ret;\n};\n```\n\n```go [sol1-Golang]\nfunc longestSubstring(s string, k int) (ans int) {\n    if s == \"\" {\n        return\n    }\n\n    cnt := [26]int{}\n    for _, ch := range s {\n        cnt[ch-'a']++\n    }\n\n    var split byte\n    for i, c := range cnt[:] {\n        if 0 < c && c < k {\n            split = 'a' + byte(i)\n            break\n        }\n    }\n    if split == 0 {\n        return len(s)\n    }\n\n    for _, subStr := range strings.Split(s, string(split)) {\n        ans = max(ans, longestSubstring(subStr, k))\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol1-C]\nint dfs(char* s, int l, int r, int k) {\n    int cnt[26];\n    memset(cnt, 0, sizeof(cnt));\n    for (int i = l; i <= r; i++) {\n        cnt[s[i] - 'a']++;\n    }\n\n    char split = 0;\n    for (int i = 0; i < 26; i++) {\n        if (cnt[i] > 0 && cnt[i] < k) {\n            split = i + 'a';\n            break;\n        }\n    }\n    if (split == 0) {\n        return r - l + 1;\n    }\n\n    int i = l;\n    int ret = 0;\n    while (i <= r) {\n        while (i <= r && s[i] == split) {\n            i++;\n        }\n        if (i > r) {\n            break;\n        }\n        int start = i;\n        while (i <= r && s[i] != split) {\n            i++;\n        }\n\n        int length = dfs(s, start, i - 1, k);\n        ret = fmax(ret, length);\n    }\n    return ret;\n}\n\nint longestSubstring(char* s, int k) {\n    return dfs(s, 0, strlen(s) - 1, k);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N\\cdot |\\Sigma|)$，其中 $N$ 为字符串的长度，$\\Sigma$ 为字符集，本题中字符串仅包含小写字母，因此 $|\\Sigma| = 26$。由于每次递归调用都会**完全去除**某个字符，因此递归深度最多为 $|\\Sigma|$。\n\n- 空间复杂度：$O(|\\Sigma|^2)$。递归的深度为 $O(|\\Sigma|)$，每层递归需要开辟 $O(|\\Sigma|)$ 的额外空间。\n\n#### 方法二：滑动窗口\n\n我们枚举最长子串中的**字符种类数目**，它最小为 $1$，最大为 $|\\Sigma|$（字符集的大小，本题中为 $26$）。\n\n对于给定的字符种类数量 $t$，我们维护滑动窗口的左右边界 $l,r$、滑动窗口内部每个字符出现的次数 $\\textit{cnt}$，以及滑动窗口内的字符种类数目 $\\textit{total}$。当 $\\textit{total} > t$ 时，我们不断地右移左边界 $l$，并对应地更新 $\\textit{cnt}$ 以及 $\\textit{total}$，直到 $\\textit{total} \\le t$ 为止。这样，对于任何一个右边界 $r$，我们都能找到最小的 $l$（记为 $l_{min}$），使得 $s[l_{min}...r]$ 之间的字符种类数目不多于 $t$。\n\n对于任何一组 $l_{min}, r$ 而言，如果 $s[l_{min}...r]$ 之间存在某个出现次数小于 $k$ （且不为 $0$，下文不再特殊说明）的字符，我们可以断定：对于任何 $l' \\in (l_{min}, r)$ 而言，$s[l'...r]$ 依然不可能是满足题意的子串，因为：\n- 要么该字符的出现次数降为 $0$，此时子串内虽然少了一个出现次数小于 $k$ 的字符，但字符种类数目也随之小于 $t$ 了；\n- 要么该字符的出现次数降为非 $0$ 整数，此时该字符的出现次数依然小于 $k$。\n\n根据上面的结论，我们发现：当限定字符种类数目为 $t$ 时，满足题意的最长子串，就一定出自某个 $s[l_{min}...r]$。因此，在滑动窗口的维护过程中，就可以直接得到最长子串的大小。\n\n此外还剩下一个细节：如何判断某个子串内的字符是否都出现了至少 $k$ 次？我们当然可以每次遍历 $\\textit{cnt}$ 数组，但是这会带来 $O(|\\Sigma|)$ 的额外开销。\n\n我们可以维护一个计数器 $\\textit{less}$，代表当前出现次数小于 $k$ 的字符的数量。注意到：每次移动滑动窗口的边界时，只会让某个字符的出现次数加一或者减一。对于移动右边界 $l$ 的情况而言：\n\n- 当某个字符的出现次数从 $0$ 增加到 $1$ 时，将 $\\textit{less}$ 加一；\n\n- 当某个字符的出现次数从 $k-1$ 增加到 $k$ 时，将 $\\textit{less}$ 减一。\n\n对于移动左边界的情形，讨论是类似的。\n\n通过维护额外的计数器 $\\textit{less}$，我们无需遍历 $\\textit{cnt}$ 数组，就能知道每个字符是否都出现了至少 $k$ 次，同时可以在每次循环时，在常数时间内更新计数器的取值。读者可以自行思考 $k=1$ 时的处理逻辑。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int longestSubstring(string s, int k) {\n        int ret = 0;\n        int n = s.length();\n        for (int t = 1; t <= 26; t++) {\n            int l = 0, r = 0;\n            vector<int> cnt(26, 0);\n            int tot = 0;\n            int less = 0;\n            while (r < n) {\n                cnt[s[r] - 'a']++;\n                if (cnt[s[r] - 'a'] == 1) {\n                    tot++;\n                    less++;\n                }\n                if (cnt[s[r] - 'a'] == k) {\n                    less--;\n                }\n\n                while (tot > t) {\n                    cnt[s[l] - 'a']--;\n                    if (cnt[s[l] - 'a'] == k - 1) {\n                        less++;\n                    }\n                    if (cnt[s[l] - 'a'] == 0) {\n                        tot--;\n                        less--;\n                    }\n                    l++;\n                }\n                if (less == 0) {\n                    ret = max(ret, r - l + 1);\n                }\n                r++;\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int longestSubstring(String s, int k) {\n        int ret = 0;\n        int n = s.length();\n        for (int t = 1; t <= 26; t++) {\n            int l = 0, r = 0;\n            int[] cnt = new int[26];\n            int tot = 0;\n            int less = 0;\n            while (r < n) {\n                cnt[s.charAt(r) - 'a']++;\n                if (cnt[s.charAt(r) - 'a'] == 1) {\n                    tot++;\n                    less++;\n                }\n                if (cnt[s.charAt(r) - 'a'] == k) {\n                    less--;\n                }\n\n                while (tot > t) {\n                    cnt[s.charAt(l) - 'a']--;\n                    if (cnt[s.charAt(l) - 'a'] == k - 1) {\n                        less++;\n                    }\n                    if (cnt[s.charAt(l) - 'a'] == 0) {\n                        tot--;\n                        less--;\n                    }\n                    l++;\n                }\n                if (less == 0) {\n                    ret = Math.max(ret, r - l + 1);\n                }\n                r++;\n            }\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar longestSubstring = function(s, k) {\n    let ret = 0;\n    const n = s.length;\n    for (let t = 1; t <= 26; t++) {\n        let l = 0, r = 0;\n        const cnt = new Array(26).fill(0);\n        let tot = 0;\n        let less = 0;\n        while (r < n) {\n            cnt[s[r].charCodeAt() - 'a'.charCodeAt()]++;\n            if (cnt[s[r].charCodeAt() - 'a'.charCodeAt()] === 1) {\n                tot++;\n                less++;\n            }\n            if (cnt[s[r].charCodeAt() - 'a'.charCodeAt()] === k) {\n                less--;\n            }\n\n            while (tot > t) {\n                cnt[s[l].charCodeAt() - 'a'.charCodeAt()]--;\n                if (cnt[s[l].charCodeAt() - 'a'.charCodeAt()] === k - 1) {\n                    less++;\n                }\n                if (cnt[s[l].charCodeAt() - 'a'.charCodeAt()] === 0) {\n                    tot--;\n                    less--;\n                }\n                l++;\n            }\n            if (less == 0) {\n                ret = Math.max(ret, r - l + 1);\n            }\n            r++;\n        }\n    }\n    return ret;\n};\n```\n\n```go [sol2-Golang]\nfunc longestSubstring(s string, k int) (ans int) {\n    for t := 1; t <= 26; t++ {\n        cnt := [26]int{}\n        total := 0\n        lessK := 0\n        l := 0\n        for r, ch := range s {\n            ch -= 'a'\n            if cnt[ch] == 0 {\n                total++\n                lessK++\n            }\n            cnt[ch]++\n            if cnt[ch] == k {\n                lessK--\n            }\n\n            for total > t {\n                ch := s[l] - 'a'\n                if cnt[ch] == k {\n                    lessK++\n                }\n                cnt[ch]--\n                if cnt[ch] == 0 {\n                    total--\n                    lessK--\n                }\n                l++\n            }\n            if lessK == 0 {\n                ans = max(ans, r-l+1)\n            }\n        }\n    }\n    return ans\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```C [sol2-C]\nint longestSubstring(char* s, int k) {\n    int ret = 0;\n    int n = strlen(s);\n    for (int t = 1; t <= 26; t++) {\n        int l = 0, r = 0;\n        int cnt[26];\n        memset(cnt, 0, sizeof(cnt));\n        int tot = 0;\n        int less = 0;\n        while (r < n) {\n            cnt[s[r] - 'a']++;\n            if (cnt[s[r] - 'a'] == 1) {\n                tot++;\n                less++;\n            }\n            if (cnt[s[r] - 'a'] == k) {\n                less--;\n            }\n\n            while (tot > t) {\n                cnt[s[l] - 'a']--;\n                if (cnt[s[l] - 'a'] == k - 1) {\n                    less++;\n                }\n                if (cnt[s[l] - 'a'] == 0) {\n                    tot--;\n                    less--;\n                }\n                l++;\n            }\n            if (less == 0) {\n                ret = fmax(ret, r - l + 1);\n            }\n            r++;\n        }\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N \\cdot |\\Sigma| + |\\Sigma|^2)$，其中 $N$ 为字符串的长度，$\\Sigma$ 为字符集，本题中字符串仅包含小写字母，因此 $|\\Sigma| = 26$。我们需要遍历所有可能的 $t$，共 $|\\Sigma|$ 种可能性；内层循环中滑动窗口的复杂度为 $O(N)$，且初始时需要 $O(|\\Sigma|)$ 的时间初始化 $\\textit{cnt}$ 数组。\n\n- 空间复杂度：$O(|\\Sigma|)$。",
      "createdAt": "2021-02-26T10:29:13.135864+00:00",
      "hitCount": 57076,
      "identifier": "mPDeLv",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jie-ben-ti-bang-zhu-da-jia-li-jie-di-gui-obla",
        "title": "借本题帮助大家理解递归"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "longest-substring-with-at-least-k-repeating-characters"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 68,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zhi-shao-you-kge-zhong-fu-zi-fu-de-zui-c-o6ww",
      "status": "PREPUBLISH",
      "summary": "方法一：分治 对于字符串 $s$，如果存在某个字符 $\\textit{ch}$，它的出现次数大于 $0$ 且小于 $k$，则任何包含 $\\textit{ch}$ 的子串都不可能满足要求。也就是说，我们将字符串按照 $\\textit{ch}$ 切分成若干段，则满足要求的最长子串一定出现在某个被切分的段内，而不能跨越一个或",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "至少有K个重复字符的最长子串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 169,
        "id": 623432,
        "viewCount": 34317
      },
      "uuid": "mPDeLv",
      "videosInfo": []
    }
  }
}
