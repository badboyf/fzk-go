{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法 1：使用简单的计数 [Accepted]\n\n为了加密 URL，我们使用计数器 ($i$) ，每遇到一个新的 URL 都加一。我们将 URL 与它的次数 $i$ 放在哈希表 HashMap 中，这样我们在稍后的解密中可以轻易地获得原本的 URL。\n\n```Java []\npublic class Codec {\n    Map<Integer, String> map = new HashMap<>();\n    int i = 0;\n\n    public String encode(String longUrl) {\n        map.put(i, longUrl);\n        return \"http://tinyurl.com/\" + i++;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(Integer.parseInt(shortUrl.replace(\"http://tinyurl.com/\", \"\")));\n    }\n}\n```\n\n**表现分析**\n\n* 可以加密解密的 URL 数目受限于 $\\text{int}$ 所能表示的范围。\n\n* 如果超过 $\\text{int}$ 个 URL 需要被加密，那么超过范围的整数会覆盖之前存储的 URL，导致算法失效。\n\n* URL 的长度不一定比输入的 $\\text{longURL}$ 短。它只与加密的 URL 被加密的顺序有关。\n\n* 这个方法的问题是预测下一个会产生的加密 URL 非常容易，因为产生几个 URL 后很容易推测出生成的模式。\n\n#### 方法 2：使用出现次序加密 [Accepted]\n\n**算法**\n\n这种方法中，我们将当前 URL 第几个出现作为关键字进行加密，将这个出现次序看做 62 进制，并将每一位映射到一个长度为 62 位的表中对应的字母作为哈希值。此方法中，我们使用一系列整数和字母表来加密，而不是仅仅使用数字进行加密。\n\n```Java []\npublic class Codec {\n\n    String chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    HashMap<String, String> map = new HashMap<>();\n    int count = 1;\n\n    public String getString() {\n        int c = count;\n        StringBuilder sb = new StringBuilder();\n        while (c > 0) {\n            c--;\n            sb.append(chars.charAt(c % 62));\n            c /= 62;\n        }\n        return sb.toString();\n    }\n\n    public String encode(String longUrl) {\n        String key = getString();\n        map.put(key, longUrl);\n        return \"http://tinyurl.com/\" + key;\n        count++;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(shortUrl.replace(\"http://tinyurl.com/\", \"\"));\n    }\n}\n```\n\n**表现分析**\n\n* 可加密的 URL 数目还是依赖于 $\\text{int}$ 的范围。因为相同的 $count$ 在出现次序溢出整数范围后仍然会出现。\n\n* 加密后 URL 的长度不一定更短，但某种程度上与 $\\text{longURL}$ 的出现次序相对独立。比方说产生的 URL 长度按顺序会是 1（62次），2（62次）。\n\n* 这个算法的表现比较好，因为相同的加密结果只有在溢出整数后才会发生，这个范围非常大。\n\n* 如果出现重复，下一次产生的加密结果还是能通过某种计算被预测出来。\n\n#### 方法 3：使用hashcode [Accepted]\n\n**算法**\n\n这种方法中，我们使用一种内建函数 $\\text{hashCode()}$ 来为每一个 URL 产生加密结果。同样的，映射结果保存在 HashMap 中以供解码。\n\n一个 String 对象的 hash code 计算方法如下：\n\n$$s[0]*31^{(n - 1)} + s[1]*31^{(n - 2)} + ... + s[n - 1]$$\n\n其中， $s[i]$ 是字符串的第 $i$ 个字符，$n$ 是字符串的长度。\n\n```Java []\n\npublic class Codec {\n    Map<Integer, String> map = new HashMap<>();\n\n    public String encode(String longUrl) {\n        map.put(longUrl.hashCode(), longUrl);\n        return \"http://tinyurl.com/\" + longUrl.hashCode();\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(Integer.parseInt(shortUrl.replace(\"http://tinyurl.com/\", \"\")));\n    }\n}\n```\n\n**表现分析**\n\n* 可加密 URL 的数目由 $\\text{int}$ 决定，因为 $\\text{hashCode}$ 使用整数运算。\n\n* 加密后 URL 的平均长度与 $\\text{longURL}$ 的长度没有直接关联。\n\n* $\\text{hashCode()}$ 对于不同的字符串不一定产生独一无二的加密后 URL。像这样对于不同输入产生相同输出的过程叫做冲突。因此，如果加密字符串的数目增加，冲突的概率也会增加，最终导致算法失效。\n\n* 下图展示了不同对象映射到相同的 hashcode，以及对象越多冲突概率越大。\n\n![image.png](https://pic.leetcode-cn.com/bcc8a4dca697b041240a01a0948b46dd26c6b481717e15149072a888056ccd97-image.png){:width=500}\n{:align=center}\n\n* 因此，可能几个字符串加密后冲突就会发生，会远比 $\\text{int}$ 要小。这与生日悖论类似，也就是如果有23个人，存在 2 个人同一天生日的概率达到 50%，如果有 70 个人，这一概率会高达 99.9%。\n\n* 这种方法中，很难根据前面产生的 URL 结果预测后面加密 URL 的答案。\n\n#### 方法 4：使用随机数 [Accepted]\n\n**算法**\n\n这个方法中，我们使用随机整数来加密。为了防止产生的结果与之前某个 $\\text{longURL}$ 产生的结果相同，我们生成一个新的随机数作为加密结果。这个数据存在哈希表 HashMap 中，以便解码。\n\n```Java []\npublic class Codec {\n    Map<Integer, String> map = new HashMap<>();\n    Random r = new Random();\n    int key = r.nextInt(Integer.MAX_VALUE);\n\n    public String encode(String longUrl) {\n        while (map.containsKey(key)) {\n            key = r.nextInt(Integer.MAX_VALUE);\n        }\n        map.put(key, longUrl);\n        return \"http://tinyurl.com/\" + key;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(Integer.parseInt(shortUrl.replace(\"http://tinyurl.com/\", \"\")));\n    }\n}\n```\n\n**表现分析**\n\n* 能被加密的 URL 数目受限于 $\\text{int}$。\n\n* 加密 URL 的平均长度与 $\\text{longURL}$ 的长度无关，因为使用了随机整数。\n\n* URL 的长度不一定比输入的 $\\text{longURL}$ 短。只与 URL 加密的相对顺序有关。\n\n* 由于加密过程中使用了随机数，就像前面的算法所述，当输入字符串的数目增加时，冲突的次数也会增加，导致算法失效。\n\n* 由于使用了随机数，想根据产生的 URL 推测出加密算法是不可能的。\n\n#### 方法 5：随机固定长度加密 [Accepted]\n\n**算法**\n\n在这种方法中，我们像方法 2 一样再次使用数字和字母表集合来为 URL 生成加密结果。这种方法中，加密后的长度固定是 6 位。如果产生出来的加密结果与之前产生的结果一样，就换一个新的加密结果。\n\n```Java []\npublic class Codec {\n    String alphabet = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    HashMap<String, String> map = new HashMap<>();\n    Random rand = new Random();\n    String key = getRand();\n\n    public String getRand() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 6; i++) {\n            sb.append(alphabet.charAt(rand.nextInt(62)));\n        }\n        return sb.toString();\n    }\n\n    public String encode(String longUrl) {\n        while (map.containsKey(key)) {\n            key = getRand();\n        }\n        map.put(key, longUrl);\n        return \"http://tinyurl.com/\" + key;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(shortUrl.replace(\"http://tinyurl.com/\", \"\"));\n    }\n}\n```\n\n**表现分析**\n\n* 可加密的 URL 数目非常大，几乎是 $(10 + 26*2)^6$ 级别。\n\n* 加密 URL 的长度固定是 6，这相比于能加密的字符串数目是极大的缩减优化。\n\n* 这个方法的表现非常好，因为几乎不可能产生相同加密结果。\n\n* 我们也可以通过增加加密字符串的长度来增加加密结果的数目。因此，在加密字符串的长度和可加密的字符串数目之间我们需要做一个权衡。\n\n* 根据加密 URL 预测加密结果几乎是不可能的，因为使用了随机数。\n",
      "createdAt": "2019-09-17T01:51:59.631357+00:00",
      "hitCount": 16101,
      "identifier": "sK82ub",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yuan-feng-bu-dong-di-fan-hui-hui-qu-by-chance2019",
        "title": "原封不动地返回回去"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "encode-and-decode-tinyurl"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 25,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "tinyurlde-jia-mi-yu-jie-mi-by-leetcode",
      "status": "PREPUBLISH",
      "summary": "方法 1：使用简单的计数 [Accepted]\n为了加密 URL，我们使用计数器 (i) ，每遇到一个新的 URL 都加一。我们将 URL 与它的次数 i 放在哈希表 HashMap 中，这样我们在稍后的解密中可以轻易地获得原本的 URL。\n表现分析\n\n\n可以加密解密的 URL 数目受限于 \\text{int} 所能",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Random",
          "nameTranslated": "",
          "slug": "random",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/bcc8a4dca697b041240a01a0948b46dd26c6b481717e15149072a888056ccd97-image.png",
      "title": "TinyURL的加密与解密",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 27668,
        "viewCount": 13165
      },
      "uuid": "sK82ub",
      "videosInfo": []
    }
  }
}
