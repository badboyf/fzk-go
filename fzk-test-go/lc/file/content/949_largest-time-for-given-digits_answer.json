{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一： 暴力\n\n**思路**\n\n遍历所有可能的时间，找到最大的那个。\n\n**算法**\n\n用 `(i, j, k, l)` 表示 `(0, 1, 2, 3)`，之后做全排列，对于每个排列，会有 `A[i]A[j] : A[k]A[l]`。\n\n检查每个排列对应的时间是否合法，例如检查 `10*A[i] + A[j]` 是不是小于 `24` `10*A[k] + A[l]` 是不是小于 `60`。\n\n最后把最大的有效时间输出就可以了。\n\n**算法**\n\n遍历这四个数字所有排列的可能，判断是不是一个合法的时间，如果合法且比目前存在的最大时间更大，就更新这个最大时间。\n\n```java [solution1-Java]\n// Solution inspired by @rock\nclass Solution {\n    public String largestTimeFromDigits(int[] A) {\n        int ans = -1;\n\n        // Choose different indices i, j, k, l as a permutation of 0, 1, 2, 3\n        for (int i = 0; i < 4; ++i)\n            for (int j = 0; j < 4; ++j) if (j != i)\n                for (int k = 0; k < 4; ++k) if (k != i && k != j) {\n                    int l = 6 - i - j - k;\n\n                    // For each permutation of A[i], read out the time and\n                    // record the largest legal time.\n                    int hours = 10 * A[i] + A[j];\n                    int mins = 10 * A[k] + A[l];\n                    if (hours < 24 && mins < 60)\n                        ans = Math.max(ans, hours * 60 + mins);\n                }\n\n        return ans >= 0 ? String.format(\"%02d:%02d\", ans / 60, ans % 60) : \"\";\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def largestTimeFromDigits(self, A):\n        ans = -1\n        for h1, h2, m1, m2 in itertools.permutations(A):\n            hours = 10 * h1 + h2\n            mins = 10 * m1 + m2\n            time = 60 * hours + mins\n            if 0 <= hours < 24 and 0 <= mins < 60 and time > ans:\n                ans = time\n\n        return \"{:02}:{:02}\".format(*divmod(ans, 60)) if ans >= 0 else \"\"\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(1)$。\n\n* 空间复杂度： $O(1)$。",
      "createdAt": "2019-07-22T09:03:18.524241+00:00",
      "hitCount": 8840,
      "identifier": "TcagGc",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "tan-xin-shi-bai-bao-li-xia-yi-ge-pai-lie-3hlb",
        "title": "【贪心失败】【暴力下一个排列】【简洁】"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "largest-time-for-given-digits"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "gei-ding-shu-zi-neng-zu-cheng-de-zui-da-shi-jian-b",
      "status": "PUBLISHED",
      "summary": "方法一： 暴力\n思路\n遍历所有可能的时间，找到最大的那个。\n算法\n用 (i, j, k, l) 表示 (0, 1, 2, 3)，之后做全排列，对于每个排列，会有 A[i]A[j] : A[k]A[l]。\n检查每个排列对应的时间是否合法，例如检查 10*A[i] + A[j] 是不是小于 24 10*A[k] + A[l",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "给定数字能组成的最大时间",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 16,
        "id": 15986,
        "viewCount": 6531
      },
      "uuid": "TcagGc",
      "videosInfo": []
    }
  }
}
