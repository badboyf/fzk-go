{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路**\n\n重复 $k$ 次迁移操作。\n\n**算法**\n\n迁移过程一共有 3 种情况。为了确保理解正确，下面使用  3 张图说明每种情况。\n\n*元素 grid[i][j] 迁移到 grid[i][j + 1]。*\n\n![情况 1](https://pic.leetcode-cn.com/Figures/1260/case1.png)\n\n*元素 grid[i][n - 1] 迁移到 grid[i + 1][0]。*\n\n![情况 2](https://pic.leetcode-cn.com/Figures/1260/case2.png)\n\n*元素 grid[m - 1][n - 1] 迁移到 grid[0][0]。*\n\n![情况 3](https://pic.leetcode-cn.com/Figures/1260/case3.png)\n\n按照以上规则迁移 $k$ 次。创建一个二维数组用于完成迁移。在 Java 中，迁移完成后需要将二维数组转换为二维列表。\n\n```java [solution1-Java]\nclass Solution {\n    public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n\n        // Repeat the transform k times.\n        for (;k > 0; k--) {\n            // We'll write the transform into a new 2D array.\n            int[][] newGrid = new int[grid.length][grid[0].length];\n\n            // Case #1: Move everything not in the last column.\n            for (int row = 0; row < grid.length; row++) {\n                for (int col = 0; col < grid[0].length - 1; col++) {\n                    newGrid[row][col + 1] = grid[row][col];\n                }\n            }\n\n            // Case #2: Move everything in last column, but not last row.\n            for (int row = 0; row < grid.length - 1; row++) {\n                newGrid[row + 1][0] = grid[row][grid[0].length - 1];\n            }\n\n            // Case #3: Move the bottom right.\n            newGrid[0][0] = grid[grid.length - 1][grid[0].length - 1];\n\n            // Update grid to be the transformed grid.\n            grid = newGrid;\n        }\n\n        // Copy the grid into a list for returning.\n        List<List<Integer>> result = new ArrayList<>();\n        for (int[] row : grid) {\n            List<Integer> listRow = new ArrayList<>();\n            result.add(listRow);\n            for (int v : row) listRow.add(v);\n        }\n\n        return result;\n    }\n}\n```\n\n```python [solution1-Python]\ndef shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n\n    num_rows, num_cols = len(grid), len(grid[0])\n\n    for _ in range(k):\n        # Create a new grid to copy into.\n        new_grid = [[0] * num_cols for _ in range(num_rows)]\n\n        # Case 1: Move everything not in the last column.\n        for row in range(num_rows):\n            for col in range(num_cols - 1):\n                new_grid[row][col + 1] = grid[row][col]\n\n        # Case 2: Move everything in last column, but not last row.\n        for row in range(num_rows - 1):\n             new_grid[row + 1][0] = grid[row][num_cols - 1]\n\n        # Case 3: Move the bottom right.\n        new_grid[0][0] = grid[num_rows - 1][num_cols - 1]\n\n        grid = new_grid\n\n    return grid\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n \\cdot m \\cdot k)$，其中 $n \\cdot m$ 是元素数量，共迁移 $k$ 次。\n\n* 空间复杂度：$O(n \\cdot m)$。每次迁移时需要创建一个新数组。\n\n\n#### 方法二：模拟+原地迁移\n\n**思路**\n\n方法一创建了 `k` 个新数组，本方法简化了该过程，在原地迁移。首先了解单个元素在数组中的移动，这是解决二维数组移动的基本策略。下面动画中黄色表示当前位置，数字表示移动的距离。\n\n<![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide1.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide2.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide3.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide4.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide5.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide6.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide7.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide8.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide9.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide10.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide11.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide12.PNG),![500](https://pic.leetcode-cn.com/Figures/1260/slides/Slide13.PNG)>\n\n这是一个简单的移动模式。按照箭头顺序移动，到达右下角后，再绕回左上角。\n\n![箭头显示了元素移动方向](https://pic.leetcode-cn.com/Figures/1260/movement_pattern.png)\n\n通过将每个值重复向前移动模拟迁移过程。\n\n**算法**\n\n每一步都需要跟踪当前迁移值。在 Java 中，最后需要将输出复制到二维列表中操作。如果想在自己的代码中实现原地操作，可以设置相同的输入和输出类型。\n\n```java [solution2-Java]\nclass Solution {\n    public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n\n        // Repeat the transform k times.\n        for (;k > 0; k--) {\n\n            int previous = grid[grid.length - 1][grid[0].length - 1];\n            for (int row = 0; row < grid.length; row++) {\n                for (int col = 0; col < grid[0].length; col++) {\n                    int temp = grid[row][col];\n                    grid[row][col] = previous;\n                    previous = temp;\n                }\n            }\n        }\n\n        // Copy the grid into a list for returning.\n        List<List<Integer>> result = new ArrayList<>();\n        for (int[] row : grid) {\n            List<Integer> listRow = new ArrayList<>();\n            result.add(listRow);\n            for (int v : row) listRow.add(v);\n        }\n\n        return result;\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution:\n    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n\n        num_rows, num_cols = len(grid), len(grid[0])\n\n        for _ in range(k):\n\n            previous = grid[-1][-1]\n            for row in range(num_rows):\n                for col in range(num_cols):\n                    temp = grid[row][col]\n                    grid[row][col] = previous\n                    previous = temp\n        return grid\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n \\cdot m \\cdot k)$，其中 $n \\cdot m$ 是元素数量，共迁移 $k$ 次。\n\n* 空间复杂度：取决于输入输出类型。在 LeetCode 中，取决于使用的语言。\n\n    * *如果输入输出类型相同* （Python 和 C++）：$O(1)$，不使用额外空间。\n\n    * *如果输入输出类型不同* （Java）：$O(n \\cdot m)$。创建大小为 `n x m` 的二维数组。\n\n如果在自己的算法中使用该算法，可以根据需要设置输入输出类型。\n\n\n#### 方法三：取模运算\n\n**思路**\n\n*注意：该方法使用模运算，这可能是一个“中等”级别的解法。*\n\n如果不熟悉模运算，可以从除法中学习，这与除法的商和余数有关。例如：$127 / 19$ 的商为 $6$，余数为 $13$，因为 $6 * 19 + 13 = 127$。模运算返回的是余数。\n\n该问题要求 $k$ 不大于 $100$。当问题规模如此小时，使用模拟算法没有任何问题。但是如果 $k$ 非常大，或者面试官要求运行时间不能是 $O(k * n * m)$，必须要 $O(n * m)$ 时，就需要进一步优化解法。\n\n二维数组移动的问题上，除了模拟方法，直接计算元素迁移后的新位置更加高效。计算新位置分为两步：\n\n1. 什么是新列？\n2. 什么是新行？\n\n通过一个例子说明如何完成两个步骤。在一个三行五列的网格中，位于 $i = 1$ 和 $j = 3$ 处的值，迁移次数 $k = 88$。\n\n![](https://pic.leetcode-cn.com/Figures/1260/example.png)\n\n*第一步：计算新列数*\n\n$k$ 步迁移后，列值共改变 $k$ 次。每一步，都往前移动一列。\n\n向前移动 $88$ 次时，元素在哪一列？如果网格的列是无限的，最终在第 $3 + 88 = 91$ 列。但是网格不是无限的，则需要考虑“环绕”问题。\n\n**重要的一点是：**每迁移 $5$ 次，元素就会回到原来的列。因此要从 $91$ 中重复减去 $5$，直到最终的结果小于 $5$，这就是模运算工作。它返回重复相减后剩余的值 $91 \\% 5 = 1$，且计算方式非常高效。因此，该列的新值为 $0$。\n\n*第二步：计算新行数*\n\n现在需要要确定该元素的新行。行的改变不会像列那么频繁。\n\n![行不变的例子](https://pic.leetcode-cn.com/Figures/1260/case1.png)\n\n下图是行和列都改变的例子。\n\n![行和列都改变的例子](https://pic.leetcode-cn.com/Figures/1260/case2.png)\n\n从最后一列移动到第一列时，行才会移动一次。因此要确定行的新值，需要确定元素从最后一列移动的第一列的次数。\n\n在上面例子中，计算新列使用到了 **余数**，即 $91 % 5 = 1$。计算新行使用的是 **商**，$91$ 除以 $5$ 的商决定了行移动多少次。\n\n计算得 $91 / 5 = 18$（这里是截断除法，和计算机编程语言中一样）。\n\n如果行数是无限的，只需要将行新增数添加到初始行，最终的新行为 $1 + 18 = 19$。\n\n但是，行数肯定不是无限的，因此需要对行执行相同的操作。这个例子中共有 $3$ 行，所以 $19 % 3 = 1$，最终的新行为第 $1$ 行。\n\n上面的例子，共迁移了 $88$ 次，$(1, 3)$ 位置的元素到达 $(1, 0)$。也可以对网格中其他 $14$ 个元素执行相同的操作。\n\n*一般性公式*\n\n归纳出一般性通用公式，可以适用于任何位置，任何迁移次数的情况。\n\n对于列，先计算网格无限的情况下最终的列数，然后取模得到实际列数。公式如下：\n\n```python [snippet1-Python]\nnew_col = (j + k) % num_cols\n```\n\n其中 $j$ 是起始列数，$num\\_cols$ 是网格总列数。\n\n行计算比较复杂，需要分为几个步骤。首先计算移动的总行数。然后取模得到实际行数。公式如下：\n\n```python [snippet2-Python]\nnumber_of_increments = (j + k) / num_cols\nnew_row = (i + number_of_increments) % num_rows\n```\n\n```java [solution3-Java]\nclass Solution {\n    public List<List<Integer>> shiftGrid(int[][] grid, int k) {\n\n        int numCols = grid[0].length;\n        int numRows = grid.length;\n\n        // Setup the 2d list.\n        List<List<Integer>> newGrid = new ArrayList<>();\n        for (int row = 0; row < numRows; row++) {\n            List<Integer> newRow = new ArrayList<>();\n            newGrid.add(newRow);\n            for (int col = 0; col < numCols; col++) {\n                newRow.add(0);\n            }\n        }\n\n        for (int row = 0; row < numRows; row++) {\n            for (int col = 0; col < numCols; col++) {\n                int newCol = (col + k) % numCols;\n                int wrapAroundCount = (col + k) / numCols;\n                int newRow = (row + wrapAroundCount) % numRows;\n                newGrid.get(newRow).set(newCol, grid[row][col]);\n            }\n        }\n\n        return newGrid;\n    }\n}\n```\n\n```python [solution3-Python]\ndef shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:\n    new_grid = [[0] * len(grid[0]) for _ in range(len(grid))]\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    for row in range(num_rows):\n        for col in range(num_cols):\n            new_col = (col + k) % num_cols\n            wrap_around_count = (col + k) // num_cols\n            new_row = (row + wrap_around_count) % num_rows\n            new_grid[new_row][new_col] = grid[row][col]\n    return new_grid\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n \\cdot m)$，其中网格数量为 $n \\cdot m$。计算每个元素的新位置花费 $O(1)$ 的时间。一般情况下，无法再提高其效率，因为每个元素都要移动。\n\n* 空间复杂度：$O(n \\cdot m)$，存储输出二维列表。",
      "createdAt": "2020-02-28T02:51:20.323171+00:00",
      "hitCount": 6496,
      "identifier": "zgQeQT",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1260-ckong-jian-chao-100de-yuan-di-jie-f-rccc",
        "title": "1260. c++空间超100%的原地解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "shift-2d-grid"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-wei-wang-ge-qian-yi-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 思路 重复 $k$ 次迁移操作。 算法 迁移过程一共有 3 种情况。为了确保理解正确，下面使用  3 张图说明每种情况。 元素 grid[i][j] 迁移到 grid[i][j + 1]。 元素 grid[i][n - 1] 迁移到 grid[i + 1][0]。 元素 grid[m - 1][n - 1",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二维网格迁移",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 14,
        "id": 112654,
        "viewCount": 4850
      },
      "uuid": "zgQeQT",
      "videosInfo": []
    }
  }
}
