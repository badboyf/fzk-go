{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：从大到小排序\n\n**思路**\n\n我们可以将最大的元素（在位置 `i`，下标从 1 开始）进行煎饼翻转 `i` 操作将它移动到序列的最前面，然后再使用煎饼翻转 `A.length` 操作将它移动到序列的最后面。  此时，最大的元素已经移动到正确的位置上了，所以之后我们就不需要再使用 `k` 值大于等于 `A.length` 的煎饼翻转操作了。\n\n我们可以重复这个过程直到序列被排好序为止。  每一步，我们只需要花费两次煎饼翻转操作。\n\n**算法**\n\n我们从数组 A 中的最大值向最小值依次进行枚举，每一次将枚举的元素放到正确的位置上。\n\n每一步，对于在位置 `i` 的（从大到小枚举的）元素，我们会使用思路中提到的**煎饼翻转组合操作**将它移动到正确的位置上。  值得注意的是，执行一次煎饼翻转操作 `f`，会将位置在 `i, i <= f` 的元素翻转到位置 `f+1 - i` 上。\n\n```java [uXAyrLqR-Java]\nclass Solution {\n    public List<Integer> pancakeSort(int[] A) {\n        List<Integer> ans = new ArrayList();\n        int N = A.length;\n\n        Integer[] B = new Integer[N];\n        for (int i = 0; i < N; ++i)\n            B[i] = i+1;\n        Arrays.sort(B, (i, j) -> A[j-1] - A[i-1]);\n\n        for (int i: B) {\n            for (int f: ans)\n                if (i <= f)\n                    i = f+1 - i;\n            ans.add(i);\n            ans.add(N--);\n        }\n\n        return ans;\n    }\n}\n```\n```python [uXAyrLqR-Python]\nclass Solution(object):\n    def pancakeSort(self, A):\n        ans = []\n\n        N = len(A)\n        B = sorted(range(1, N+1), key = lambda i: -A[i-1])\n        for i in B:\n            for f in ans:\n                if i <= f:\n                    i = f+1 - i\n            ans.extend([i, N])\n            N -= 1\n\n        return ans\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是数组 `A` 的长度。\n\n* 空间复杂度：$O(N)$。\n\n\n\n",
      "createdAt": "2019-01-11T12:57:09.650190+00:00",
      "hitCount": 14822,
      "identifier": "YQwrrr",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-bing-pai-xu-by-zxhnext-7n8r",
        "title": "煎饼排序"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "pancake-sorting"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "jian-bing-pai-xu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "思路\n我们可以将最大的元素（在位置 i，下标从 1 开始）进行煎饼翻转 i 操作将它移动到序列的最前面，然后再使用煎饼翻转 A.length 操作将它移动到序列的最后面。  此时，最大的元素已经移动到正确的位置上了，所以之后我们就不需要再使用 k 值大于等于 A.length 的煎饼翻转操作了。\n我们可以重复这个过程直",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "煎饼排序",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 21,
        "id": 3581,
        "viewCount": 10328
      },
      "uuid": "YQwrrr",
      "videosInfo": []
    }
  }
}
