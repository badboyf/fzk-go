{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：逐位颠倒\n\n**思路**\n\n将 $n$ 视作一个长为 $32$ 的二进制串，从低位往高位枚举 $n$ 的每一位，将其倒序添加到翻转结果 $\\textit{rev}$ 中。\n\n代码实现中，每枚举一位就将 $n$ 右移一位，这样当前 $n$ 的最低位就是我们要枚举的比特位。当 $n$ 为 $0$ 时即可结束循环。\n\n需要注意的是，在某些语言（如 $\\texttt{Java}$）中，没有无符号整数类型，因此对 $n$ 的右移操作应使用逻辑右移。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        uint32_t rev = 0;\n        for (int i = 0; i < 32 && n > 0; ++i) {\n            rev |= (n & 1) << (31 - i);\n            n >>= 1;\n        }\n        return rev;\n    }\n};\n```\n\n```Java [sol1-Java]\npublic class Solution {\n    public int reverseBits(int n) {\n        int rev = 0;\n        for (int i = 0; i < 32 && n != 0; ++i) {\n            rev |= (n & 1) << (31 - i);\n            n >>>= 1;\n        }\n        return rev;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc reverseBits(n uint32) (rev uint32) {\n    for i := 0; i < 32 && n > 0; i++ {\n        rev |= n & 1 << (31 - i)\n        n >>= 1\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar reverseBits = function(n) {\n    let rev = 0;\n    for (let i = 0; i < 32 && n > 0; ++i) {\n        rev |= (n & 1) << (31 - i);\n        n >>>= 1;\n    }\n    return rev >>> 0;\n};\n```\n\n```C [sol1-C]\nuint32_t reverseBits(uint32_t n) {\n    uint32_t rev = 0;\n    for (int i = 0; i < 32 && n > 0; ++i) {\n        rev |= (n & 1) << (31 - i);\n        n >>= 1;\n    }\n    return rev;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：位运算分治\n\n**思路**\n\n若要翻转一个二进制串，可以将其均分成左右两部分，对每部分递归执行翻转操作，然后将左半部分拼在右半部分的后面，即完成了翻转。\n\n由于左右两部分的计算方式是相似的，利用位掩码和位移运算，我们可以自底向上地完成这一分治流程。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/190/190_fig1.png){:width=\"60%\"}\n\n对于递归的最底层，我们需要交换所有奇偶位：\n\n1. 取出所有奇数位和偶数位；\n2. 将奇数位移到偶数位上，偶数位移到奇数位上。\n\n类似地，对于倒数第二层，每两位分一组，按组号取出所有奇数组和偶数组，然后将奇数组移到偶数组上，偶数组移到奇数组上。以此类推。\n\n需要注意的是，在某些语言（如 $\\texttt{Java}$）中，没有无符号整数类型，因此对 $n$ 的右移操作应使用逻辑右移。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\nprivate:\n    const uint32_t M1 = 0x55555555; // 01010101010101010101010101010101\n    const uint32_t M2 = 0x33333333; // 00110011001100110011001100110011\n    const uint32_t M4 = 0x0f0f0f0f; // 00001111000011110000111100001111\n    const uint32_t M8 = 0x00ff00ff; // 00000000111111110000000011111111\n\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        n = n >> 1 & M1 | (n & M1) << 1;\n        n = n >> 2 & M2 | (n & M2) << 2;\n        n = n >> 4 & M4 | (n & M4) << 4;\n        n = n >> 8 & M8 | (n & M8) << 8;\n        return n >> 16 | n << 16;\n    }\n};\n```\n\n```Java [sol2-Java]\npublic class Solution {\n    private static final int M1 = 0x55555555; // 01010101010101010101010101010101\n    private static final int M2 = 0x33333333; // 00110011001100110011001100110011\n    private static final int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111\n    private static final int M8 = 0x00ff00ff; // 00000000111111110000000011111111\n\n    public int reverseBits(int n) {\n        n = n >>> 1 & M1 | (n & M1) << 1;\n        n = n >>> 2 & M2 | (n & M2) << 2;\n        n = n >>> 4 & M4 | (n & M4) << 4;\n        n = n >>> 8 & M8 | (n & M8) << 8;\n        return n >>> 16 | n << 16;\n    }\n}\n```\n\n```go [sol2-Golang]\nconst (\n    m1 = 0x55555555 // 01010101010101010101010101010101\n    m2 = 0x33333333 // 00110011001100110011001100110011\n    m4 = 0x0f0f0f0f // 00001111000011110000111100001111\n    m8 = 0x00ff00ff // 00000000111111110000000011111111\n)\n\nfunc reverseBits(n uint32) uint32 {\n    n = n>>1&m1 | n&m1<<1\n    n = n>>2&m2 | n&m2<<2\n    n = n>>4&m4 | n&m4<<4\n    n = n>>8&m8 | n&m8<<8\n    return n>>16 | n<<16\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar reverseBits = function(n) {\n    const M1 = 0x55555555; // 01010101010101010101010101010101\n    const M2 = 0x33333333; // 00110011001100110011001100110011\n    const M4 = 0x0f0f0f0f; // 00001111000011110000111100001111\n    const M8 = 0x00ff00ff; // 00000000111111110000000011111111\n\n    n = n >>> 1 & M1 | (n & M1) << 1;\n    n = n >>> 2 & M2 | (n & M2) << 2;\n    n = n >>> 4 & M4 | (n & M4) << 4;\n    n = n >>> 8 & M8 | (n & M8) << 8;\n    return (n >>> 16 | n << 16) >>> 0;\n};\n```\n\n```C [sol2-C]\nconst uint32_t M1 = 0x55555555;  // 01010101010101010101010101010101\nconst uint32_t M2 = 0x33333333;  // 00110011001100110011001100110011\nconst uint32_t M4 = 0x0f0f0f0f;  // 00001111000011110000111100001111\nconst uint32_t M8 = 0x00ff00ff;  // 00000000111111110000000011111111\n\nuint32_t reverseBits(uint32_t n) {\n    n = n >> 1 & M1 | (n & M1) << 1;\n    n = n >> 2 & M2 | (n & M2) << 2;\n    n = n >> 4 & M4 | (n & M4) << 4;\n    n = n >> 8 & M8 | (n & M8) << 8;\n    return n >> 16 | n << 16;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-03-28T09:13:48.387536+00:00",
      "hitCount": 64693,
      "identifier": "Mzw5sY",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "fu-xue-ming-zhu-xun-huan-yu-fen-zhi-jie-hoakf",
        "title": "【负雪明烛】「循环」与「分治」解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "reverse-bits"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 89,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "dian-dao-er-jin-zhi-wei-by-leetcode-solu-yhxz",
      "status": "PREPUBLISH",
      "summary": "方法一：逐位颠倒 思路 将 $n$ 视作一个长为 $32$ 的二进制串，从低位往高位枚举 $n$ 的每一位，将其倒序添加到翻转结果 $\\textit{rev}$ 中。 代码实现中，每枚举一位就将 $n$ 右移一位，这样当前 $n$ 的最低位就是我们要枚举的比特位。当 $n$ 为 $0$ 时即可结束循环。 需要注意的是，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Bit Manipulation",
          "nameTranslated": "位运算",
          "slug": "bit-manipulation",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "颠倒二进制位",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 202,
        "id": 685436,
        "viewCount": 44226
      },
      "uuid": "Mzw5sY",
      "videosInfo": []
    }
  }
}
