{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：对偶性质\n\n**思路与算法**\n\n对于给定的字符串 $\\textit{word}$，要想求出「所有子串中的元音的总数」，其实就是求出「对于每个出现的元音，包含它的子串个数」的和。\n\n因此，我们遍历 $\\textit{word}$ 中的每个字符。对于第 $i$ 个字符，如果它是元音，那么包含它的子串的左端点可以选择 $0, 1, \\cdots, i$ 一共 $i+1$ 种，右端点可以选择 $i, i+1, \\cdots, n-1$ 一共 $n-i$ 种（其中 $n$ 是字符串 $\\textit{word}$ 的长度），因此包含它的子串个数为：\n\n$$\n(i+1)(n-i)\n$$\n\n我们统计上式的和即可得到答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    long long countVowels(string word) {\n        int n = word.size();\n        unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'};\n        long long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (vowels.count(word[i])) {\n                ans += (long long)(i + 1) * (n - i);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countVowels(self, word: str) -> int:\n        n = len(word)\n        vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n        ans = 0\n        for i, ch in enumerate(word):\n            if ch in vowels:\n                ans += (i + 1) * (n - i)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{word}$ 的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-11-08T10:35:22.932271+00:00",
      "hitCount": 784,
      "identifier": "dmUpqS",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dan-du-ji-suan-mei-ge-yuan-yin-de-chu-xi-eyjf",
        "title": "单独计算每个元音的出现次数"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "vowels-of-all-substrings"
      },
      "reactionType": null,
      "reactionsV2": [],
      "rewardEnabled": null,
      "slug": "suo-you-zi-zi-fu-chuan-zhong-de-yuan-yin-vuyj",
      "status": "PREPUBLISH",
      "summary": "方法一：对偶性质 思路与算法 对于给定的字符串 $\\textit{word}$，要想求出「所有子串中的元音的总数」，其实就是求出「对于每个出现的元音，包含它的子串个数」的和。 因此，我们遍历 $\\textit{word}$ 中的每个字符。对于第 $i$ 个字符，如果它是元音，那么包含它的子串的左端点可以选择 $0, 1",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "所有子字符串中的元音",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 3,
        "id": 1091060,
        "viewCount": 601
      },
      "uuid": "dmUpqS",
      "videosInfo": []
    }
  }
}
