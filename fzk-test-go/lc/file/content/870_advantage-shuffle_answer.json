{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：贪心\n\n**思路**\n\n如果 `A` 中最小的牌 `a` 能击败 `B` 中最小的牌 `b`，那么我们应当将它们配对。否则， `a` 将无益于我们的比分，因为它无法击败任何牌。\n\n我们为什么要在 `a > b` 时将 `a` 和 `b` 配对呢？这是因为此时在 `A` 中的每张牌都比 `b` 要大，所以不管我们在 `b` 前面放置哪张牌都可以得分。我们可以用手中最弱的牌来与 `b` 配对，这样会使 `A` 中剩余的牌严格地变大，因此会有更多得分点。\n\n**算法**\n\n我们可以根据上面的思路来创造一种贪心算法。目前在 `B` 中要被击败的最小的牌将始终是 `b = sortedB[j]`。对于在 `sortedA` 中的每张卡 `a`，要么 `a` 能够击败牌 `b`（将 `a` 放入 `assigned[b]`），要么把 `a` 扔掉（将 `a` 放入 `remaining`）。\n\n之后，我们可以使用此前标注的 `assigned` 和 `remaining` 来重构答案。详细情况请查阅注释。\n\n\n```java [L5ToovSe-Java]\nclass Solution {\n    public int[] advantageCount(int[] A, int[] B) {\n        int[] sortedA = A.clone();\n        Arrays.sort(sortedA);\n        int[] sortedB = B.clone();\n        Arrays.sort(sortedB);\n\n        // assigned[b] = list of a that are assigned to beat b\n        Map<Integer, Deque<Integer>> assigned = new HashMap();\n        for (int b: B) assigned.put(b, new LinkedList());\n\n        // remaining = list of a that are not assigned to any b\n        Deque<Integer> remaining = new LinkedList();\n\n        // populate (assigned, remaining) appropriately\n        // sortedB[j] is always the smallest unassigned element in B\n        int j = 0;\n        for (int a: sortedA) {\n            if (a > sortedB[j]) {\n                assigned.get(sortedB[j++]).add(a);\n            } else {\n                remaining.add(a);\n            }\n        }\n\n        // Reconstruct the answer from annotations (assigned, remaining)\n        int[] ans = new int[B.length];\n        for (int i = 0; i < B.length; ++i) {\n            // if there is some a assigned to b...\n            if (assigned.get(B[i]).size() > 0)\n                ans[i] = assigned.get(B[i]).pop();\n            else\n                ans[i] = remaining.pop();\n        }\n        return ans;\n    }\n}\n```\n```python [L5ToovSe-Python]\nclass Solution(object):\n    def advantageCount(self, A, B):\n        sortedA = sorted(A)\n        sortedB = sorted(B)\n\n        # assigned[b] = list of a that are assigned to beat b\n        # remaining = list of a that are not assigned to any b\n        assigned = {b: [] for b in B}\n        remaining = []\n\n        # populate (assigned, remaining) appropriately\n        # sortedB[j] is always the smallest unassigned element in B\n        j = 0\n        for a in sortedA:\n            if a > sortedB[j]:\n                assigned[sortedB[j]].append(a)\n                j += 1\n            else:\n                remaining.append(a)\n\n        # Reconstruct the answer from annotations (assigned, remaining)\n        return [assigned[b].pop() if assigned[b] else remaining.pop()\n                for b in B]\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，其中 $N$ 是 `A` 和 `B` 的长度。\n\n* 空间复杂度：$O(N)$。",
      "createdAt": "2018-09-17T15:43:52.522454+00:00",
      "hitCount": 18771,
      "identifier": "AuyZyX",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "870you-shi-xi-pai-go-by-joyboii-eml5",
        "title": "[870]优势洗牌.go"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "advantage-shuffle"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 18,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "you-shi-xi-pai-by-leetcode",
      "status": "PUBLISHED",
      "summary": "思路\n如果 A 中最小的牌 a 能击败 B 中最小的牌 b，那么我们应当将它们配对。否则， a 将无益于我们的比分，因为它无法击败任何牌。\n我们为什么要在 a > b 时将 a 和 b 配对呢？这是因为此时在 A 中的每张牌都比 b 要大，所以不管我们在 b 前面放置哪张牌都可以得分。我们可以用手中最弱的牌来与 b 配",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "优势洗牌",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 26,
        "id": 3553,
        "viewCount": 11835
      },
      "uuid": "AuyZyX",
      "videosInfo": []
    }
  }
}
