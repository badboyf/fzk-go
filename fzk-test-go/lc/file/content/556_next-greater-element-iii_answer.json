{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法 1：暴力 [Time Limit Exceeded]\n\n为了解决给定的问题，我们将给定的数字当做字符串 $s$。在这种方法中，我们找出所有 $s$ 给定元素的排列，得到一个字符串列表 $list$，它包含了所有可能的排列。然后我们将 $list$ 排序并找到恰好大于当前字符串的字符串。但这个方法非常粗糙，因为我们需要找到所有可能的排列，这会消耗大量时间。\n\n```java []\npublic class Solution {\n    public String swap(String s, int i0, int i1) {\n        if (i0 == i1)\n            return s;\n        String s1 = s.substring(0, i0);\n        String s2 = s.substring(i0 + 1, i1);\n        String s3 = s.substring(i1 + 1);\n        return s1 + s.charAt(i1) + s2 + s.charAt(i0) + s3;\n    }\n    ArrayList < String > list = new ArrayList < > ();\n    void permute(String a, int l, int r) {\n        int i;\n        if (l == r)\n            list.add(a);\n        else {\n            for (i = l; i <= r; i++) {\n                a = swap(a, l, i);\n                permute(a, l + 1, r);\n                a = swap(a, l, i);\n            }\n        }\n    }\n    public int nextGreaterElement(int n) {\n        String s = \"\" + n;\n        permute(s, 0, s.length() - 1);\n        Collections.sort(list);\n        int i;\n        for (i = list.size() - 1; i >= 0; i--) {\n            if (list.get(i).equals(\"\" + n))\n                break;\n        }\n        return i == list.size() - 1 ? -1 : Integer.parseInt(list.get(i + 1));\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(n!)$。一个 $n$ 位数字的可能排列总共有 $n!$ 种。\n\n* 空间复杂度： $O(n!)$。 $n$ 位字符串总共有 $n!$ 种可能的排列，每个排列有 $n$ 位。\n\n#### 方法 2：线性解法 [Accepted]\n\n**算法**\n\n这种方法中，我们同样将给定数字 $n$ 当做字符串数组 $a$，首先我们观察到任意降序的序列，不会有更大的排列出现。\n\n比方说，下面数列就没有下一排列：\n\n ```\n [9, 5, 4, 3, 1]\n ```\n\n我们需要从右往左找到第一对连续的数字 $a[i]$ 和 $a[i-1]$ 满足 $a[i-1] < a[i]$。到当前位置位置位置，$a[i-1]$ 右边的数字没办法产生一个更大的排列，因为右边的数字是降序的。所以我们需要重新排布 $a[i-1]$ 到最右边的数字来得到下一个排列。\n\n那么怎样排布能得到下一个更大的数字呢？我们想得到恰好大于当前数字的下一个排列，所以我们需要用恰好大于 $a[i-1]$ 的数字去替换掉 $a[i-1]$，比方说我们让这个数字为 $a[j]$。\n\n我们将 $a[i-1]$ 和 $a[j]$ 交换，我们现在在下标为 $i-1$ 的地方得到了正确的数字，但当前的结果还不是一个正确的排列。我们需要用从 $i-1$ 开始到最右边数字剩下来的数字升序排列，来得到它们中的最小排列。\n\n我们注意到在从右往左找到第一对 $a[i-1] < a[i]$ 的连续数字前， $a[i-1]$ 右边的数字都是降序排列的，所以交换 $a[i-1]$ 和 $a[j]$ 不会改变下标从 $i$ 开始到最后的顺序。所以我们在交换了 $a[i-1]$ 和 $a[j]$ 以后，只需要反转下标从 $i$ 开始到最后的数字，就可以得到下一个字典序最小的排列。\n\n下面的动画更形象地解释了这一过程：\n\n<![image.png](https://pic.leetcode-cn.com/8090b2e3298556dc3118889832c9f0655c4ed136db3630cdc25cfbb57228ef8c-image.png),![image.png](https://pic.leetcode-cn.com/d1607fd8d735d5f28d4e30362493108b2c2346204985eb5c6a290352ac78e8e8-image.png),![image.png](https://pic.leetcode-cn.com/ea2e5211418da07a6e9e845b9e3df9bc4867d743b20f71d65086fd9506b9daed-image.png),![image.png](https://pic.leetcode-cn.com/de47a0a7053f4f27754c6f020008778929a21d189e4800d1ae8f07af04b1e374-image.png),![image.png](https://pic.leetcode-cn.com/731041ccd54831d55c1659c86d863f71384d51bd31730cc043d75f88bbbb8ead-image.png),![image.png](https://pic.leetcode-cn.com/398c0342901aa35f1dfad1039abfbe7f3f1d49a8421a499d02835472b1b6af81-image.png),![image.png](https://pic.leetcode-cn.com/72049238c8f121b60a4168cc19998ab068c7f3ecb806fc4732fef50ab835f409-image.png),![image.png](https://pic.leetcode-cn.com/b6d6fc70862df6b03005b9014ff65f4c04dbc377a65c315a98ce2ce5ce7e469f-image.png),![image.png](https://pic.leetcode-cn.com/1fa31df15a47473869b55b98379cc00833c1c0fdddd1d4a2804cc54aa32240c0-image.png),![image.png](https://pic.leetcode-cn.com/f9ff7e3c45dea7d15e594cbbef42aae1330bffa42d1084a6db7c93ed141e4b01-image.png),![image.png](https://pic.leetcode-cn.com/13a83968d4a4d32491ca66476754e81e73381890b2d755f6cd923e01aaca501a-image.png),![image.png](https://pic.leetcode-cn.com/3431f52268626f916ac674e1f5bd4628d138882de9ee332ccfbba6cd73dc2506-image.png),![image.png](https://pic.leetcode-cn.com/ca83d06b92ec8bde20f647e5ca727f487340acfba039fae766c38f9eca255829-image.png)>\n\n```java []\n\npublic class Solution {\n    public int nextGreaterElement(int n) {\n        char[] a = (\"\" + n).toCharArray();\n        int i = a.length - 2;\n        while (i >= 0 && a[i + 1] <= a[i]) {\n            i--;\n        }\n        if (i < 0)\n            return -1;\n        int j = a.length - 1;\n        while (j >= 0 && a[j] <= a[i]) {\n            j--;\n        }\n        swap(a, i, j);\n        reverse(a, i + 1);\n        try {\n            return Integer.parseInt(new String(a));\n        } catch (Exception e) {\n            return -1;\n        }\n    }\n    private void reverse(char[] a, int start) {\n        int i = start, j = a.length - 1;\n        while (i < j) {\n            swap(a, i, j);\n            i++;\n            j--;\n        }\n    }\n    private void swap(char[] a, int i, int j) {\n        char temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$。最坏情况下，只会扫描整个数组两遍，这里 $n$ 是给定数字的位数。\n\n* 空间复杂度：$O(n)$。使用了大小为 $n$ 的数组 $a$ ，其中 $n$ 是给定数字的位数。\n",
      "createdAt": "2019-10-16T22:22:29.224246+00:00",
      "hitCount": 20581,
      "identifier": "c9duXg",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "golang-shuang-bai-jie-fa-by-99kies-8t0y",
        "title": "golang 双百解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "next-greater-element-iii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 26,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "xia-yi-ge-geng-da-yuan-su-iii-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法 1：暴力 [Time Limit Exceeded]\n为了解决给定的问题，我们将给定的数字当做字符串 s。在这种方法中，我们找出所有 s 给定元素的排列，得到一个字符串列表 list，它包含了所有可能的排列。然后我们将 list 排序并找到恰好大于当前字符串的字符串。但这个方法非常粗糙，因为我们需要找到所有可",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "下一个更大元素 III",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 41,
        "id": 35329,
        "viewCount": 14417
      },
      "uuid": "c9duXg",
      "videosInfo": []
    }
  }
}
