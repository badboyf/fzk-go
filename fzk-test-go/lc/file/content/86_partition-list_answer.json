{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n直观来说我们只需维护两个链表 $\\textit{small}$ 和 $\\textit{large}$ 即可，$\\textit{small}$ 链表按顺序存储所有小于 $x$ 的节点，$\\textit{large}$ 链表按顺序存储所有大于等于 $x$ 的节点。遍历完原链表后，我们只要将 $\\textit{small}$ 链表尾节点指向 $\\textit{large}$ 链表的头节点即能完成对链表的分隔。\n\n为了实现上述思路，我们设 $\\textit{smallHead}$ 和 $\\textit{largeHead}$ 分别为两个链表的哑节点，即它们的 $\\textit{next}$ 指针指向链表的头节点，这样做的目的是为了更方便地处理头节点为空的边界条件。同时设 $\\textit{small}$ 和 $\\textit{large}$ 节点指向当前链表的末尾节点。开始时 $\\textit{smallHead}=\\textit{small},\\textit{largeHead}=\\textit{large}$。随后，从前往后遍历链表，判断当前链表的节点值是否小于 $x$，如果小于就将 $\\textit{small}$ 的 $\\textit{next}$ 指针指向该节点，否则将 $\\textit{large}$ 的 $\\textit{next}$ 指针指向该节点。\n\n遍历结束后，我们将 $\\textit{large}$ 的 $\\textit{next}$ 指针置空，这是因为当前节点复用的是原链表的节点，而其 $\\textit{next}$ 指针可能指向一个小于 $x$ 的节点，我们需要切断这个引用。同时将 $\\textit{small}$ 的 $\\textit{next}$ 指针指向 $\\textit{largeHead}$ 的 $\\textit{next}$ 指针指向的节点，即真正意义上的 $\\textit{large}$ 链表的头节点。最后返回 $\\textit{smallHead}$ 的 $\\textit{next}$ 指针即为我们要求的答案。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* partition(ListNode* head, int x) {\n        ListNode* small = new ListNode(0);\n        ListNode* smallHead = small;\n        ListNode* large = new ListNode(0);\n        ListNode* largeHead = large;\n        while (head != nullptr) {\n            if (head->val < x) {\n                small->next = head;\n                small = small->next;\n            } else {\n                large->next = head;\n                large = large->next;\n            }\n            head = head->next;\n        }\n        large->next = nullptr;\n        small->next = largeHead->next;\n        return smallHead->next;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode partition(ListNode head, int x) {\n        ListNode small = new ListNode(0);\n        ListNode smallHead = small;\n        ListNode large = new ListNode(0);\n        ListNode largeHead = large;\n        while (head != null) {\n            if (head.val < x) {\n                small.next = head;\n                small = small.next;\n            } else {\n                large.next = head;\n                large = large.next;\n            }\n            head = head.next;\n        }\n        large.next = null;\n        small.next = largeHead.next;\n        return smallHead.next;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar partition = function(head, x) {\n    let small = new ListNode(0);\n    const smallHead = small;\n    let large = new ListNode(0);\n    const largeHead = large;\n    while (head !== null) {\n        if (head.val < x) {\n            small.next = head;\n            small = small.next;\n        } else {\n            large.next = head;\n            large = large.next;\n        }\n        head = head.next;\n    }\n    large.next = null;\n    small.next = largeHead.next;\n    return smallHead.next;\n};\n```\n\n```go [sol1-Golang]\nfunc partition(head *ListNode, x int) *ListNode {\n    small := &ListNode{}\n    smallHead := small\n    large := &ListNode{}\n    largeHead := large\n    for head != nil {\n        if head.Val < x {\n            small.Next = head\n            small = small.Next\n        } else {\n            large.Next = head\n            large = large.Next\n        }\n        head = head.Next\n    }\n    large.Next = nil\n    small.Next = largeHead.Next\n    return smallHead.Next\n}\n```\n\n```C [sol1-C]\nstruct ListNode* partition(struct ListNode* head, int x) {\n    struct ListNode* small = malloc(sizeof(struct ListNode));\n    struct ListNode* smallHead = small;\n    struct ListNode* large = malloc(sizeof(struct ListNode));\n    struct ListNode* largeHead = large;\n    while (head != NULL) {\n        if (head->val < x) {\n            small->next = head;\n            small = small->next;\n        } else {\n            large->next = head;\n            large = large->next;\n        }\n        head = head->next;\n    }\n    large->next = NULL;\n    small->next = largeHead->next;\n    return smallHead->next;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度: $O(n)$，其中 $n$ 是原链表的长度。我们对该链表进行了一次遍历。\n\n- 空间复杂度: $O(1)$。",
      "createdAt": "2021-01-02T06:34:02.852787+00:00",
      "hitCount": 46174,
      "identifier": "ef38ZV",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "lian-biao-fen-wei-xiao-qu-he-da-qu-by-bl-qu6l",
        "title": "链表分为小区和大区"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "partition-list"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 46,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "fen-ge-lian-biao-by-leetcode-solution-7ade",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 直观来说我们只需维护两个链表 $\\textit{small}$ 和 $\\textit{large}$ 即可，$\\textit{small}$ 链表按顺序存储所有小于 $x$ 的节点，$\\textit{large}$ 链表按顺序存储所有大于等于 $x$ 的节点。遍历完原链表后，我们只要将 $\\textit{",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "分隔链表",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 136,
        "id": 543768,
        "viewCount": 34009
      },
      "uuid": "ef38ZV",
      "videosInfo": []
    }
  }
}
