{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：排序 + 贪心\n\n对于数组 $\\textit{arr}$ 中的任意一个整数 $x$，如果它一共出现了 $y$ 次，那么我们必须将这 $y$ 个 $x$ 全部移除，才能使得数组 $\\textit{arr}$ 中不同整数的数目减少 $1$。因此，要想使得不同整数的数目最少，我们应当优先删除出现次数少的那些整数。\n\n我们首先使用哈希映射（HashMap）统计每个整数出现的次数，在这之后，我们将每个键值对（键表示一个整数，值表示该整数出现的次数）按照值从小到大进行排序。我们遍历排序的结果，并进行移除，一旦剩余可以移除的次数小于遍历到的值，就结束遍历并返回结果。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {\n        unordered_map<int, int> group;\n        for (int num: arr) {\n            ++group[num];\n        }\n        \n        vector<pair<int, int>> freq(group.begin(), group.end());\n        sort(freq.begin(), freq.end(), [](const auto& u, const auto& v) {return u.second < v.second;});\n        \n        int ans = freq.size();\n        for (auto [_, occ]: freq) {\n            if (k >= occ) {\n                --ans;\n                k -= occ;\n            } else {\n                break;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findLeastNumOfUniqueInts(int[] arr, int k) {\n        Map<Integer, Integer> group = new HashMap<Integer, Integer>();\n        for (int num : arr) {\n            int count = group.getOrDefault(num, 0) + 1;\n            group.put(num, count);\n        }\n\n        List<int[]> freq = new ArrayList<int[]>();\n        for (Map.Entry<Integer, Integer> entry : group.entrySet()) {\n            int[] keyValue = {entry.getKey(), entry.getValue()};\n            freq.add(keyValue);\n        }\n        Collections.sort(freq, new Comparator<int[]>() {\n            public int compare(int[] keyValue1, int[] keyValue2) {\n                return keyValue1[1] - keyValue2[1];\n            }\n        });\n\n        int ans = freq.size();\n        for (int i = 0; i < freq.size(); i++) {\n            int occ = freq.get(i)[1];\n            if (k >= occ) {\n                --ans;\n                k -= occ;\n            } else {\n                break;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n        group = collections.Counter(arr)\n        freq = group.most_common()[::-1]\n        ans = len(freq)\n        for _, occ in freq:\n            if k >= occ:\n                ans -= 1\n                k -= occ\n            else:\n                break\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组 $\\textit{arr}$ 的长度。构造哈希映射的时间复杂度为 $O(n)$，在最坏情况下，数组 $\\textit{arr}$ 中的数互不相同，哈希映射中有 $n$ 个键值对，因此排序的时间复杂度为 $O(n \\log n)$。最后遍历的时间复杂度也为 $O(n)$，因此总时间复杂度为 $O(n \\log n)$。\n\n- 空间复杂度：$O(n)$，在最坏情况下，哈希表需要 $O(n)$ 的空间，同时也需要 $O(n)$ 的空间存放排序的结果。",
      "createdAt": "2021-01-27T13:52:07.012309+00:00",
      "hitCount": 2478,
      "identifier": "bQyZxT",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dui-ha-xi-python-by-yzboostforest-eo24",
        "title": "堆+哈希 Python"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "least-number-of-unique-integers-after-k-removals"
      },
      "reactionType": null,
      "reactionsV2": [],
      "rewardEnabled": null,
      "slug": "bu-tong-zheng-shu-de-zui-shao-shu-mu-by-h6h4i",
      "status": "PUBLISHED",
      "summary": "方法一：排序 + 贪心 对于数组 $\\textit{arr}$ 中的任意一个整数 $x$，如果它一共出现了 $y$ 次，那么我们必须将这 $y$ 个 $x$ 全部移除，才能使得数组 $\\textit{arr}$ 中不同整数的数目减少 $1$。因此，要想使得不同整数的数目最少，我们应当优先删除出现次数少的那些整数。 我们",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "不同整数的最少数目",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 3,
        "id": 579291,
        "viewCount": 1966
      },
      "uuid": "bQyZxT",
      "videosInfo": []
    }
  }
}
