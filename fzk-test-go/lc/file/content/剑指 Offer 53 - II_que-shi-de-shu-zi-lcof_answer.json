{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\r\n\r\n- 排序数组中的搜索问题，首先想到 **二分法** 解决。\r\n- 根据题意，数组可以按照以下规则划分为两部分。\r\n  - **左子数组：** $nums[i] = i$ ；\r\n  - **右子数组：** $nums[i] \\ne i$ ；\r\n- 缺失的数字等于 **“右子数组的首位元素”** 对应的索引；因此考虑使用二分法查找 “右子数组的首位元素” 。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/df7e04fbab0937ff74e5f29e958c7b1d531af066789ff363be5e1c8e75f17f56-Picture1.png){:width=500}\r\n\r\n##### 算法解析：\r\n\r\n1. **初始化：** 左边界 $i = 0$ ，右边界 $j = len(nums) - 1$ ；代表闭区间 $[i, j]$ 。\r\n2. **循环二分：** 当 $i \\leq j$ 时循环 *（即当闭区间 $[i, j]$ 为空时跳出）* ；\r\n   1. 计算中点 $m = (i + j) // 2$ ，其中 \"$//$\" 为向下取整除法；\r\n   2. 若 $nums[m] = m$ ，则 “右子数组的首位元素” 一定在闭区间 $[m + 1, j]$ 中，因此执行 $i = m + 1$；\r\n   3. 若 $nums[m] \\ne m$ ，则 “左子数组的末位元素” 一定在闭区间 $[i, m - 1]$ 中，因此执行 $j = m - 1$；\r\n3. **返回值：** 跳出时，变量 $i$ 和 $j$ 分别指向 “右子数组的首位元素” 和 “左子数组的末位元素” 。因此返回 $i$ 即可。\r\n\r\n<![Picture2.png](https://pic.leetcode-cn.com/515ad046b4363de9324acc0ce74d9fa9048d5526c66a91539b99c26fbe4a49cb-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/f453ae298ff6d085358376ab32ea59932a1a1b8f93d56de9eb0ccb74fb65c8a1-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/02ca857fbbc95a3d73a5bbe717e578c03357130b8e1fd92c409d0ca5c9d099c0-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/5c7feffb94f79db42836688635309d34b7576b519eb84337ab5977cf480ea0ff-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/b57e2d7cfd5f23ef22681bfe5fa59882c143097b0e28631dfaafcf7000027484-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/1cdbdb450af28f6db2aa8a1c8530a7d96b8293779392ee29efb47b025317851e-Picture7.png)>\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(log N)$：** 二分法为对数级别复杂度。\r\n- **空间复杂度 $O(1)$：** 几个变量使用常数大小的额外空间。\r\n\r\n#### 代码：\r\n\r\n```Python []\r\nclass Solution:\r\n    def missingNumber(self, nums: List[int]) -> int:\r\n        i, j = 0, len(nums) - 1\r\n        while i <= j:\r\n            m = (i + j) // 2\r\n            if nums[m] == m: i = m + 1\r\n            else: j = m - 1\r\n        return i\r\n```\r\n\r\n```Java []\r\nclass Solution {\r\n    public int missingNumber(int[] nums) {\r\n        int i = 0, j = nums.length - 1;\r\n        while(i <= j) {\r\n            int m = (i + j) / 2;\r\n            if(nums[m] == m) i = m + 1;\r\n            else j = m - 1;\r\n        }\r\n        return i;\r\n    }\r\n}\r\n```",
      "createdAt": "2020-03-17T18:42:56.367451+00:00",
      "hitCount": 114157,
      "identifier": "cYypKE",
      "isEditorsPick": true,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-zhi-offer-53-ii-0n-1zhong-que-shi-d-yvfz",
        "title": "剑指 Offer 53 - II. 0～n-1中缺失的数字"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "que-shi-de-shu-zi-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 318,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 29,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f",
      "status": "PUBLISHED",
      "summary": " 解题思路：\n\n排序数组中的搜索问题，首先想到 二分法 解决。\n根据题意，数组可以按照以下规则划分为两部分。\n\n左子数组： nums[i] = i ；\n右子数组： nums[i] \\ne i ；\n\n\n缺失的数字等于 “右子数组的首位元素” 对应的索引；因此考虑使用二分法查找 “右子数组的首位元素” 。\n\n 算法解析：\n",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/df7e04fbab0937ff74e5f29e958c7b1d531af066789ff363be5e1c8e75f17f56-Picture1.png",
      "title": "面试题53 - II. 0～n-1 中缺失的数字（二分法，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 223,
        "id": 155915,
        "viewCount": 82933
      },
      "uuid": "cYypKE",
      "videosInfo": []
    }
  }
}
