{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "与你一起学算法",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/mnxiao/avatar_1608887255.png",
          "userSlug": "mnxiao"
        },
        "username": "mnxiao"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路\n这道题目很简单，题目说的很明显，s1 和 s2 只能有两个字符不同，而且 s1 与 s2 不同的那两个字符交换位置后，字符串 s1 和 s2 相等。\n\n所以，**只需要遍历一遍就可以，提前申请两个字符串变量用于记录不同的字符，在记录的过程中，对于 s1 与 s2 不同的字符，加到 s1 对应字符串变量的后面，加到 s2 对应字符串变量的前面。结束的时候，判断二者的长度是否等于 2 并且相等就行了**。 \n\n对于 s1 和 s2 相等的情况，直接返回 true 即可。\n\n### 代码\n\n```Python3 []\nclass Solution:\n    def areAlmostEqual(self, s1: str, s2: str) -> bool:\n        if s1 == s2:\n            return True\n        s1_str = \"\"\n        s2_str = \"\"\n        for i in range(len(s1)):\n            if s1[i] == s2[i]:\n                continue\n            else:\n                s1_str += s1[i]\n                s2_str = s2[i] + s2_str\n                if len(s1_str) > 2:\n                    return False\n        return len(s1_str) == 2 and s1_str == s2_str\n```\n```Java []\nclass Solution {\n    public boolean areAlmostEqual(String s1, String s2) {\n        if (s1.equals(s2)) {\n            return true;\n        }\n        String s1_diff = \"\";\n        String s2_diff = \"\";\n        for (int i = 0;i < s1.length(); ++i) {\n            if (s1.charAt(i) != s2.charAt(i)) {\n                s1_diff += s1.charAt(i);\n                s2_diff = s2.charAt(i) + s2_diff;\n                if (s1_diff.length() > 2) {\n                    return false;\n                }\n            }\n        }\n        return (s1_diff.length() == 2) && (s1_diff.equals(s2_diff));\n    }\n}\n```\n### 复杂度分析\n**时间复杂度：$O(n)$**\n**空间复杂度: $O(1)$** \n\n更多内容可以关注微信公众号「[**与你一起学算法**](https://mmbiz.qpic.cn/mmbiz_png/hxnicKx3JwNNbO14Oh1YEcWkt5FdyNu4PQMzcEDlTMytFMTyqdxeydicfYmjH4KxCEpByh3TibNRrooaGZsorf5aQ/0?wx_fmt=png)」，一个人可以走的更快，一群人可以走的更远。\n",
      "createdAt": "2021-03-14T07:42:48.179700+00:00",
      "hitCount": 1307,
      "identifier": "HfBDPp",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "liang-bu-zou-by-mster-a8e9",
        "title": "两步走"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "check-if-one-string-swap-can-make-strings-equal"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "python3-java-yi-ci-bian-li-by-mnxiao-g4l9",
      "status": "PREPUBLISH",
      "summary": "解题思路\n这道题目很简单，题目说的很明显，s1 和 s2 只能有两个字符不同，而且 s1 与 s2 不同的那两个字符交换位置后，字符串 s1 和 s2 相等。\n所以，只需要遍历一遍就可以，提前申请两个字符串变量用于记录不同的字符，在记录的过程中，对于 s1 与 s2 不同的字符，加到 s1 对应字符串变量的后面，加到",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "Python3、Java 一次遍历",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 5,
        "id": 655672,
        "viewCount": 1104
      },
      "uuid": "HfBDPp",
      "videosInfo": []
    }
  }
}
