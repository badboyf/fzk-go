{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "正直清澈方欣欣",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/fxxuuu/avatar_1602135282.png",
          "userSlug": "fxxuuu"
        },
        "username": "fxxuuu"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "## 递增的三元子序列\n\n> LeetCode 第 334 题\n>\n> 难度：\n>\n> - `中等`\n>\n> tags：\n>\n> - `递增子序列查找`\n> - `巧妙的方法！`\n\n------\n\n## 题目描述\n\n给定一个未排序的数组，判断这个数组中是否存在长度为 3 的递增子序列。\n\n数学表达式如下:\n\n> 如果存在这样的 *i, j, k,*  且满足 0 ≤ *i* < *j* < *k* ≤ *n*-1，使得 *arr[i]* < *arr[j]* < *arr[k]* ，返回 true ; 否则返回 false 。\n\n**说明:** 要求算法的时间复杂度为 O(*n*)，空间复杂度为 O(*1*) 。\n\n**示例 1:**\n\n```\n输入: [1,2,3,4,5]\n输出: true\n```\n\n**示例 2:**\n\n```\n输入: [5,4,3,2,1]\n输出: false\n```\n\n------\n\n## 思路\n\n本题的思路非常的巧妙！\n\n首先，新建两个变量 `small` 和 `mid` ，分别用来保存题目要我们求的长度为 3 的递增子序列的最小值和中间值。\n\n接着，我们遍历数组，每遇到一个数字，我们将它和 `small` 和 `mid` 相比，若小于等于 `small` ，则替换 `small`；否则，若小于等于 `mid`，则替换 `mid`；否则，若大于 `mid`，则说明我们找到了长度为 3 的递增数组！\n\n上面的求解过程中有个问题：当已经找到了长度为 2 的递增序列，这时又来了一个比 `small` 还小的数字，为什么可以直接替换 `small` 呢，这样 `small` 和 `mid` 在原数组中并不是按照索引递增的关系呀？\n\nTrick 就在这里了！假如当前的 `small` 和 `mid` 为 `[3, 5]`，这时又来了个 `1`。假如我们不将 `small` 替换为 `1`，那么，当下一个数字是 `2`，后面再接上一个 `3` 的时候，我们就没有办法发现这个 `[1,2,3]` 的递增数组了！也就是说，我们替换最小值，是为了后续能够更好地更新中间值！\n\n另外，即使我们更新了 `small` ，这个 `small` 在 `mid` 后面，没有严格遵守递增顺序，但它隐含着的真相是，有一个比 `small` 大比 `mid` 小的前·最小值出现在 `mid` 之前。因此，当后续出现比 `mid` 大的值的时候，我们一样可以通过当前 `small` 和 `mid` 推断的确存在着长度为 3 的递增序列。 所以，这样的替换并不会干扰我们后续的计算！\n\n#### AC 代码：\n\n```cpp\nclass Solution {\npublic:\n  bool increasingTriplet(vector<int>& nums) {\n    int len = nums.size();\n    if (len < 3) return false;\n    int small = INT_MAX, mid = INT_MAX;\n    for (auto num : nums) {\n      if (num <= small) {\n        small = num;\n      } else if (num <= mid) {\n        mid = num;\n      } \n      else if (num > mid) {\n        return true;\n      }\n    }\n    return false;    \n  }\n};\n```\n\n",
      "createdAt": "2020-01-02T02:41:06.461324+00:00",
      "hitCount": 24708,
      "identifier": "8e79gz",
      "isEditorsPick": false,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "java-tan-xin-by-feilue-usn7",
        "title": "Java 贪心"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "increasing-triplet-subsequence"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 312,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 30,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "c-xian-xing-shi-jian-fu-za-du-xiang-xi-jie-xi-da-b",
      "status": "PUBLISHED",
      "summary": "递增的三元子序列\n\nLeetCode 第 334 题\n难度：\n\n中等\n\ntags：\n\n递增子序列查找\n巧妙的方法！\n\n\n题目描述\n给定一个未排序的数组，判断这个数组中是否存在长度为 3 的递增子序列。\n数学表达式如下:\n\n如果存在这样的 i, j, k,  且满足 0 ≤ i < j < k ≤ n-1，使得 arr[",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "C++ 线性时间复杂度详细解析，打败 98%",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 101,
        "id": 66089,
        "viewCount": 18244
      },
      "uuid": "8e79gz",
      "videosInfo": []
    }
  }
}
