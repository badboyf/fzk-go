{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法 1：排序\n\n**想法和算法**\n\n使用排序算法，按照模 2 的结果排序。\n\n```Java []\nclass Solution {\n    public int[] sortArrayByParity(int[] A) {\n        Integer[] B = new Integer[A.length];\n        for (int t = 0; t < A.length; ++t)\n            B[t] = A[t];\n\n        Arrays.sort(B, (a, b) -> Integer.compare(a%2, b%2));\n\n        for (int t = 0; t < A.length; ++t)\n            A[t] = B[t];\n        return A;\n\n        /* Alternative:\n        return Arrays.stream(A)\n                     .boxed()\n                     .sorted((a, b) -> Integer.compare(a%2, b%2))\n                     .mapToInt(i -> i)\n                     .toArray();\n        */\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def sortArrayByParity(self, A):\n        A.sort(key = lambda x: x % 2)\n        return A\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N\\log N)$，其中 $N$ 是 `A` 的长度。\n* 空间复杂度：排序空间为 $O(N)$，取决于内置的 `sort` 函数实现。\n\n#### 方法 2：两边扫描\n\n**想法和算法**\n\n第一遍输出偶数，第二遍输出奇数。\n\n```Java []\nclass Solution {\n    public int[] sortArrayByParity(int[] A) {\n        int[] ans = new int[A.length];\n        int t = 0;\n\n        for (int i = 0; i < A.length; ++i)\n            if (A[i] % 2 == 0)\n                ans[t++] = A[i];\n\n        for (int i = 0; i < A.length; ++i)\n            if (A[i] % 2 == 1)\n                ans[t++] = A[i];\n\n        return ans;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def sortArrayByParity(self, A):\n        return ([x for x in A if x % 2 == 0] +\n                [x for x in A if x % 2 == 1])\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `A` 的长度。\n* 空间复杂度：$O(N)$，存储结果的数组。\n\n#### 方法 3：原地算法\n\n**想法**\n\n如果希望原地排序，可以使用快排，一个经典的算法。\n\n**算法**\n\n维护两个指针 `i` 和 `j`，循环保证每刻小于 `i` 的变量都是偶数（也就是 `A[k] % 2 == 0` 当 `k < i`），所有大于 `j` 的都是奇数。\n\n所以， 4 种情况针对 `(A[i] % 2, A[j] % 2)`：\n\n* 如果是 `(0, 1)`，那么万事大吉 `i++` 并且 `j--`。\n* 如果是 `(1, 0)`，那么交换两个元素，然后继续。\n* 如果是 `(0, 0)`，那么说明 `i` 位置是正确的，只能 `i++`。\n* 如果是 `(1, 1)`，那么说明 `j` 位置是正确的，只能 `j--`。\n\n通过这 4 种情况，循环不变量得以维护，并且 `j-i` 不断变小。最终就可以得到奇偶有序的数组。\n\n```Java []\nclass Solution {\n    public int[] sortArrayByParity(int[] A) {\n        int i = 0, j = A.length - 1;\n        while (i < j) {\n            if (A[i] % 2 > A[j] % 2) {\n                int tmp = A[i];\n                A[i] = A[j];\n                A[j] = tmp;\n            }\n\n            if (A[i] % 2 == 0) i++;\n            if (A[j] % 2 == 1) j--;\n        }\n\n        return A;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def sortArrayByParity(self, A):\n        i, j = 0, len(A) - 1\n        while i < j:\n            if A[i] % 2 > A[j] % 2:\n                A[i], A[j] = A[j], A[i]\n\n            if A[i] % 2 == 0: i += 1\n            if A[j] % 2 == 1: j -= 1\n\n        return A\n```\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `A` 的长度。循环的每一步都让 `j-i` 至少减少了一。（注意虽然快排的复杂度是 $O(N\\log N)$，但是我们只需要一轮扫描就可以了）。\n* 空间复杂度：$O(1)$，不需要额外空间。",
      "createdAt": "2019-08-09T14:28:28.784832+00:00",
      "hitCount": 16044,
      "identifier": "8T8HUA",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "905-an-qi-ou-pai-xu-shu-zu-by-chen-wei-f-qol9",
        "title": "905. 按奇偶排序数组"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "sort-array-by-parity"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 22,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "an-qi-ou-pai-xu-shu-zu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法 1：排序\n想法和算法\n使用排序算法，按照模 2 的结果排序。\n复杂度分析\n\n时间复杂度：O(N\\log N)，其中 N 是 A 的长度。\n空间复杂度：排序空间为 O(N)，取决于内置的 sort 函数实现。\n\n§ 方法 2：两边扫描\n想法和算法\n第一遍输出偶数，第二遍输出奇数。\n复杂度分析\n\n时间复杂度：O(",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "按奇偶排序数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 39,
        "id": 19525,
        "viewCount": 13126
      },
      "uuid": "8T8HUA",
      "videosInfo": []
    }
  }
}
