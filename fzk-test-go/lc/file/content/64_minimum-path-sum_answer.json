{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![64. 最小路径和 (1).mp4](cd223237-5496-4918-9062-277f57889fc4)\n\n### 📖 文字题解\n#### 方法一：动态规划\n\n由于路径的方向只能是向下或向右，因此网格的第一行的每个元素只能从左上角元素开始向右移动到达，网格的第一列的每个元素只能从左上角元素开始向下移动到达，此时的路径是唯一的，因此每个元素对应的最小路径和即为对应的路径上的数字总和。\n\n对于不在第一行和第一列的元素，可以从其上方相邻元素向下移动一步到达，或者从其左方相邻元素向右移动一步到达，元素对应的最小路径和等于其上方相邻元素与其左方相邻元素两者对应的最小路径和中的最小值加上当前元素的值。由于每个元素对应的最小路径和与其相邻元素对应的最小路径和有关，因此可以使用动态规划求解。\n\n创建二维数组 $\\textit{dp}$，与原始网格的大小相同，$\\textit{dp}[i][j]$ 表示从左上角出发到 $(i,j)$ 位置的最小路径和。显然，$\\textit{dp}[0][0]=\\textit{grid}[0][0]$。对于 $\\textit{dp}$ 中的其余元素，通过以下状态转移方程计算元素值。\n\n- 当 $i>0$ 且 $j=0$ 时，$\\textit{dp}[i][0]=\\textit{dp}[i-1][0]+\\textit{grid}[i][0]$。\n\n- 当 $i=0$ 且 $j>0$ 时，$\\textit{dp}[0][j]=\\textit{dp}[0][j-1]+\\textit{grid}[0][j]$。\n\n- 当 $i>0$ 且 $j>0$ 时，$\\textit{dp}[i][j]=\\min(\\textit{dp}[i-1][j],\\textit{dp}[i][j-1])+\\textit{grid}[i][j]$。\n\n最后得到 $\\textit{dp}[m-1][n-1]$ 的值即为从网格左上角到网格右下角的最小路径和。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/64/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/64/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/64/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/64/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/64/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/64/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/64/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/64/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/64/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/64/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/64/11.png),![fig12](https://assets.leetcode-cn.com/solution-static/64/12.png),![fig13](https://assets.leetcode-cn.com/solution-static/64/13.png),![fig14](https://assets.leetcode-cn.com/solution-static/64/14.png),![fig15](https://assets.leetcode-cn.com/solution-static/64/15.png),![fig16](https://assets.leetcode-cn.com/solution-static/64/16.png),![fig17](https://assets.leetcode-cn.com/solution-static/64/17.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int minPathSum(int[][] grid) {\n        if (grid == null || grid.length == 0 || grid[0].length == 0) {\n            return 0;\n        }\n        int rows = grid.length, columns = grid[0].length;\n        int[][] dp = new int[rows][columns];\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i < rows; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int j = 1; j < columns; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        for (int i = 1; i < rows; i++) {\n            for (int j = 1; j < columns; j++) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n        return dp[rows - 1][columns - 1];\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        if (grid.size() == 0 || grid[0].size() == 0) {\n            return 0;\n        }\n        int rows = grid.size(), columns = grid[0].size();\n        auto dp = vector < vector <int> > (rows, vector <int> (columns));\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i < rows; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int j = 1; j < columns; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        for (int i = 1; i < rows; i++) {\n            for (int j = 1; j < columns; j++) {\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n        return dp[rows - 1][columns - 1];\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc minPathSum(grid [][]int) int {\n    if len(grid) == 0 || len(grid[0]) == 0 {\n        return 0\n    }\n    rows, columns := len(grid), len(grid[0])\n    dp := make([][]int, rows)\n    for i := 0; i < len(dp); i++ {\n        dp[i] = make([]int, columns)\n    }\n    dp[0][0] = grid[0][0]\n    for i := 1; i < rows; i++ {\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    }\n    for j := 1; j < columns; j++ {\n        dp[0][j] = dp[0][j - 1] + grid[0][j]\n    }\n    for i := 1; i < rows; i++ {\n        for j := 1; j < columns; j++ {\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        }\n    }\n    return dp[rows - 1][columns - 1]\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]:\n            return 0\n        \n        rows, columns = len(grid), len(grid[0])\n        dp = [[0] * columns for _ in range(rows)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, rows):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, columns):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, rows):\n            for j in range(1, columns):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        \n        return dp[rows - 1][columns - 1]\n```\n\n```C [sol1-C]\nint minPathSum(int** grid, int gridSize, int* gridColSize) {\n    int rows = gridSize, columns = gridColSize[0];\n    if (rows == 0 || columns == 0) {\n        return 0;\n    }\n    int dp[rows][columns];\n    dp[0][0] = grid[0][0];\n    for (int i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + grid[i][0];\n    }\n    for (int j = 1; j < columns; j++) {\n        dp[0][j] = dp[0][j - 1] + grid[0][j];\n    }\n    for (int i = 1; i < rows; i++) {\n        for (int j = 1; j < columns; j++) {\n            dp[i][j] = fmin(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n        }\n    }\n    return dp[rows - 1][columns - 1];\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是网格的行数和列数。需要对整个网格遍历一次，计算 $\\textit{dp}$ 的每个元素的值。\n\n- 空间复杂度：$O(mn)$，其中 $m$ 和 $n$ 分别是网格的行数和列数。创建一个二维数组 $\\textit{dp}$，和网格大小相同。\n  空间复杂度可以优化，例如每次只存储上一行的 $\\textit{dp}$ 值，则可以将空间复杂度优化到 $O(n)$。",
      "createdAt": "2020-07-22T11:26:58.606761+00:00",
      "hitCount": 111501,
      "identifier": "eRqJpL",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zui-xiao-lu-jing-he-dong-tai-gui-hua-gui-fan-liu-c",
        "title": "最小路径和 （动态规划，规范流程，清晰图解）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-path-sum"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 85,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-xiao-lu-jing-he-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 方法一：动态规划 由于路径的方向只能是向下或向右，因此网格的第一行的每个元素只能从左上角元素开始向右移动到达，网格的第一列的每个元素只能从左上角元素开始向下移动到达，此时的路径是唯一的，因此每个元素对应的最小路径和即为对应的路径上的数字总和。 对于不在第一行和第一列的元素，可以从其上方相邻元",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Matrix",
          "nameTranslated": "矩阵",
          "slug": "matrix",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最小路径和",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 236,
        "id": 342122,
        "viewCount": 82446
      },
      "uuid": "eRqJpL",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/0A336FFF07AE4688901787D3EB3ED9C1-6-2.png",
          "duration": 346.368,
          "videoId": "3419633deee941a0a04e57460df2cac5"
        }
      ]
    }
  }
}
