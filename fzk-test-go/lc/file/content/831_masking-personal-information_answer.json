{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n我们首先判断 `S` 是邮箱还是电话号码。显然，如果 `S` 中有字符 `'@'`，那么它是邮箱，否则它是电话号码。\n\n如果 `S` 是邮箱，我们将 `S` 的 `'@'` 之前的部分保留第一个和最后一个字符，中间用 `'*****'` 代替，并将整个字符串转换为小写。\n\n如果 `S` 是电话号码，我们只保留 `S` 中的所有数字。首先将最后 `10` 位本地号码变成 `'***-***-abcd'` 的形式，再判断 `S` 中是否有额外的国际号码。如果有，则将国际号码之前添加 `'+'` 号并加到本地号码的最前端。\n\n```Java [sol1]\nclass Solution {\n    public String maskPII(String S) {\n        int atIndex = S.indexOf('@');\n        if (atIndex >= 0) { // email\n            return (S.substring(0, 1) + \"*****\" + S.substring(atIndex - 1)).toLowerCase();\n        } else { // phone\n            String digits = S.replaceAll(\"\\\\D+\", \"\");\n            String local = \"***-***-\" + digits.substring(digits.length() - 4);\n            if (digits.length() == 10) return local;\n            String ans = \"+\";\n            for (int i = 0; i < digits.length() - 10; ++i)\n                ans += \"*\";\n            return ans + \"-\" + local;\n        }\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def maskPII(self, S):\n        if '@' in S: #email\n            first, after = S.split('@')\n            return \"{}*****{}@{}\".format(\n                first[0], first[-1], after).lower()\n\n        else: #phone\n            digits = filter(unicode.isdigit, S)\n            local = \"***-***-{}\".format(digits[-4:])\n            if len(digits) == 10:\n                return local\n            return \"+{}-\".format('*' * (len(digits) - 10)) + local\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是字符串 `S` 的长度。\n\n* 空间复杂度：$O(1)$。",
      "createdAt": "2019-08-23T09:57:46.421254+00:00",
      "hitCount": 4435,
      "identifier": "uVNbmD",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "java-by-fc559328-ddz9",
        "title": "java"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "masking-personal-information"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "yin-cang-ge-ren-xin-xi-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：模拟\n我们首先判断 S 是邮箱还是电话号码。显然，如果 S 中有字符 '@'，那么它是邮箱，否则它是电话号码。\n如果 S 是邮箱，我们将 S 的 '@' 之前的部分保留第一个和最后一个字符，中间用 '*****' 代替，并将整个字符串转换为小写。\n如果 S 是电话号码，我们只保留 S 中的所有数字。首先将最",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "隐藏个人信息",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 5,
        "id": 22525,
        "viewCount": 3591
      },
      "uuid": "uVNbmD",
      "videosInfo": []
    }
  }
}
