{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 方法一：枚举\n\n我们可以枚举所有的「顺次数」，并依次判断它们是否在 `[low, high]` 的范围内。\n\n具体地，我们首先枚举「顺次数」的最高位数字 `i`，随后递增地枚举「顺次数」的最低位数字 `j`，需要满足 `j > i`。对于每一组 `(i, j)`，我们可以得到其对应的「顺次数」`num`，如果 `num` 在 `[low, high]` 的范围内，就将其加入答案中。\n\n在枚举完所有的「顺次数」后，我们将答案进行排序，就可以得到最终的结果。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> sequentialDigits(int low, int high) {\n        vector<int> ans;\n        for (int i = 1; i <= 9; ++i) {\n            int num = i;\n            for (int j = i + 1; j <= 9; ++j) {\n                num = num * 10 + j;\n                if (num >= low && num <= high) {\n                    ans.push_back(num);\n                }\n            }\n        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        ans = list()\n        for i in range(1, 10):\n            num = i\n            for j in range(i + 1, 10):\n                num = num * 10 + j\n                if low <= num <= high:\n                    ans.append(num)\n        return sorted(ans)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(1)$。根据定义，每一组满足 $1 \\leq i < j \\leq 9$ 的 $(i, j)$ 就对应了一个「顺次数」，那么「顺次数」的数量为 $\\binom{9}{2} = \\frac{9 \\times 8}{2} = 36$ 个，可以视作一个常数。因此时间复杂度为 $O(1)$。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2020-02-19T02:48:48.912584+00:00",
      "hitCount": 3803,
      "identifier": "J5YW11",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1291-cchao-100de-bao-li-tan-xin-jie-fa-b-yrrr",
        "title": "1291. c++超100的暴力贪心解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "sequential-digits"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 8,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "shun-ci-shu-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：枚举\n我们可以枚举所有的「顺次数」，并依次判断它们是否在 [low, high] 的范围内。\n具体地，我们首先枚举「顺次数」的最高位数字 i，随后递增地枚举「顺次数」的最低位数字 j，需要满足 j > i。对于每一组 (i, j)，我们可以得到其对应的「顺次数」num，如果 num 在 [low, high] ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "顺次数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 14,
        "id": 101734,
        "viewCount": 3142
      },
      "uuid": "J5YW11",
      "videosInfo": []
    }
  }
}
