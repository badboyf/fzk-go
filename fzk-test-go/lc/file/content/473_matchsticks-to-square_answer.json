{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "**分析**\n\n假设火柴的长度分别为 `[1,1,1,1,2,2,2,2,3,3,3,3]`，它们的和为 `24`，因此对应正方形的变成为 `6`。如下图所示，我们给正方形的每一条边都放上长度为 `[1,2,3]` 的火柴，这是一种可行的方法。\n\n![bla](https://pic.leetcode-cn.com/Figures/473/473_Matchsticks-In-Square-Diag-1.png){:width=400px;}\n\n因此，对于给定的若干根火柴，我们需要：\n\n- 将它们分成四组，每一根火柴恰好属于其中的一组；\n\n- 每一组火柴的长度之和都相同，等于所有火柴长度之和的四分之一。\n\n#### 方法一：深度优先搜索\n\n我们可以使用深度优先搜索枚举出所有的分组情况，并对于每一种情况，判断是否满足上述的两个条件。\n\n我们依次对每一根火柴进行搜索，当搜索到第 `i` 根火柴时，我们可以把它放到四组中的任意一种。对于每一种放置方法，我们继续对第 `i + 1` 根火柴进行递归搜索。当我们搜索完全部的 `N` 根火柴后，再判断每一组火柴的长度之和是否都相同。\n\n```Java [sol1]\nimport java.util.HashMap;\nimport java.util.Collections;\n\nclass Solution {\n    public List<Integer> nums;\n    public int[] sums;\n    public int possibleSquareSide;\n\n    public Solution() {\n        this.sums = new int[4];\n    }\n\n    // Depth First Search function.\n    public boolean dfs(int index) {\n\n        // If we have exhausted all our matchsticks, check if all sides of the square are of equal length\n        if (index == this.nums.size()) {\n            return sums[0] == sums[1] && sums[1] == sums[2] && sums[2] == sums[3];\n        }\n\n        // Get current matchstick.\n        int element = this.nums.get(index);\n\n        // Try adding it to each of the 4 sides (if possible)\n        for(int i = 0; i < 4; i++) {\n            if (this.sums[i] + element <= this.possibleSquareSide) {\n                this.sums[i] += element;\n                if (this.dfs(index + 1)) {\n                    return true;\n                }\n                this.sums[i] -= element;\n            }\n        }\n\n        return false;\n    }\n\n    public boolean makesquare(int[] nums) {\n        // Empty matchsticks.\n        if (nums == null || nums.length == 0) {\n            return false;\n        }\n\n        // Find the perimeter of the square (if at all possible)\n        int L = nums.length;\n        int perimeter = 0;\n        for(int i = 0; i < L; i++) {\n            perimeter += nums[i];\n        }\n\n        this.possibleSquareSide =  perimeter / 4;\n        if (this.possibleSquareSide * 4 != perimeter) {\n            return false;\n        }\n\n        // Convert the array of primitive int to ArrayList (for sorting).\n        this.nums = Arrays.stream(nums).boxed().collect(Collectors.toList());\n        Collections.sort(this.nums, Collections.reverseOrder());\n        return this.dfs(0);\n    }\n}\n```\n\n```Python [sol1]\ndef makesquare(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n\n    # If there are no matchsticks, then we can't form any square\n    if not nums:\n        return False\n\n    # Number of matchsticks we have\n    L = len(nums)\n\n    # Perimeter of our square (if one can be formed)\n    perimeter = sum(nums)\n\n    # Possible side of our square.\n    possible_side =  perimeter // 4\n\n    # If the perimeter can be equally split into 4 parts (and hence 4 sides, then we move on).\n    if possible_side * 4 != perimeter:\n        return False\n\n    # Reverse sort the matchsticks because we want to consider the biggest one first.\n    nums.sort(reverse=True)\n\n    # This array represents the 4 sides and their current lengths\n    sums = [0 for _ in range(4)]\n\n    # Our recursive dfs function.\n    def dfs(index):\n\n        # If we reach the end of matchsticks array, we check if the square was formed or not\n        if index == L:\n            # If 3 equal sides were formed, 4th will be the same as these three and answer should be True in that case.\n            return sums[0] == sums[1] == sums[2] == possible_side\n\n        # The current matchstick can belong to any of the 4 sides (provided their remaining lenghts are >= the size of the current matchstick)\n        for i in range(4):\n            # If this matchstick can fir in the space left for the current side\n            if sums[i] + nums[index] <= possible_side:\n                # Recurse\n                sums[i] += nums[index]\n                if dfs(index + 1):\n                    return True\n                # Revert the effects of recursion because we no longer need them for other recursions.\n                sums[i] -= nums[index]\n        return False        \n    return dfs(0)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(4^N)$，其中 $N$ 是火柴的数量。在进行搜索之前，我们可以将火柴的长度从大到小进行排序，方便我们先搜索较长的火柴。这样做的目的是对搜索进行剪枝，例如当火柴的长度为 `[4,4,4,8]` 时，每条边的长度为 `5`，如果我们先搜索长度为 `8` 的火柴，就可以发现它无法被放在任意一组中，因此直接退出搜索返回 `False`。\n\n* 空间复杂度：$O(N)$。\n\n#### 方法二：动态规划 + 状态压缩\n\n假设已经有长度分别为 `[3,3,4,4,5,5]` 的火柴被放入了某些组中，并且每条边的长度为 `8`。这些火柴的放置情况可能有很多种，下面给出了几个例子：\n\n```\n(4, 4), (3, 5), (3, 5) -----------> 已经有 3 个组被放满\n(3, 4), (3, 5), (4), (5) ---------> 没有组被放满\n(3, 3), (4, 4), (5), (5) ---------> 已经有 1 个组被放满\n```\n\n这些例子说明，如果我们只知道当前有哪些火柴被放入了组中，我们是无法还原出每根火柴具体被放入哪个组的，因此我们对火柴的分组作出规定：我们规定这些火柴必须装满尽量多的组，并且不满的组最多只有一个。例如 `[3,3,4,4,5,5]` 此时就会代表 “装满了 `3` 个组，并且没有不满的组” 这个状态。\n\n![bla](https://pic.leetcode-cn.com/Figures/473/473_Matchsticks-In-Square-Diag-2.png){:width=350px;}\n\n这样的规定看上去很不合理，并且可能会漏掉一些情况。但仔细想想，假设 `N` 根火柴可以组成一个正方形，这些火柴从第一条边到第四条边，从左到右依次编号为 `a1, a2, ..., aN`，那么我们可以从 `[a1]` 的情况推导到 `[a1, a2]` 的情况，从 `[a1, a2]` 的情况推导到 `[a1, a2, a3]` 的情况，也就是说，对于满足条件的分组方法，我们一定可以在动态规划中，通过子问题得到正确的解。\n\n下面给出了动态规划的伪代码：\n\n```\nlet square_side = sum(matchsticks) / 4\nfunc recurse(matchsticks_used, sides_formed) {\n    if sides_formed == 4, then {\n        Square Formed!!\n    }\n    for match in matchsticks available, do {\n          add match to matchsticks_used\n          let result = recurse(matchsticks_used, sides_formed)\n          if result == True, then {\n              return True\n          }\n          remove match from matchsticks_used\n    }\n    return False\n}\n```\n\n我们可以使用长度为 `N` 的二进制来表示动态规划中的每一个状态，如果二进制的第 `k` 位为 `1`，那么当前状态包含第 `k` 根火柴，否则不包含第 `k` 根火柴。\n\n\n```Java [sol2]\nimport java.util.HashMap;\nimport javafx.util.Pair;\n\nclass Solution {\n\n    // The memoization cache to be used during recursion.\n    public HashMap<Pair<Integer, Integer>, Boolean> memo;\n\n    // Array containing our matchsticks.\n    public int[] nums;\n\n    // Possible side of our square depending on the total sum of all the matchsticks. \n    public int possibleSquareSide;\n\n    // Default constructor to initialise our memo cache.\n    public Solution() {\n        this.memo = new HashMap<Pair<Integer, Integer>, Boolean>();\n    }\n\n    // Main DP function.\n    public boolean recurse(Integer mask, Integer sidesDone) {\n        int total = 0;\n        int L = this.nums.length;\n\n        // The memo key for this recursion\n        Pair<Integer, Integer> memoKey = new Pair(mask, sidesDone);\n\n        // Find out the sum of matchsticks used till now.\n        for(int i = L - 1; i >= 0; i--) {\n            if ((mask&(1 << i)) == 0) {\n                total += this.nums[L - 1 - i];\n            }\n        }\n\n        // If the sum if divisible by our square's side, then we increment our number of complete sides formed variable.\n        if (total > 0 && total % this.possibleSquareSide == 0) {\n            sidesDone++;\n        }\n\n        // Base case.\n        if (sidesDone == 3) {\n            return true;\n        }\n\n\n        // Return precomputed results\n        if (this.memo.containsKey(memoKey)) {\n            return this.memo.get(memoKey);\n        }\n\n        boolean ans = false;\n        int c = total / this.possibleSquareSide;\n\n        // Remaining vlength in the current partially formed side.\n        int rem = this.possibleSquareSide * (c + 1) - total;\n\n        // Try out all remaining options (that are valid)\n        for(int i = L - 1; i >= 0; i--) {\n            if (this.nums[L - 1 - i] <= rem && (mask&(1 << i)) > 0) {\n                if (this.recurse(mask ^ (1 << i), sidesDone)) {\n                    ans = true;\n                    break;\n                }\n            }\n        }\n\n        // Cache the computed results.\n        this.memo.put(memoKey, ans);\n        return ans;\n    }\n\n    public boolean makesquare(int[] nums) {\n\n        // Empty matchsticks.\n        if (nums == null || nums.length == 0) {\n            return false;\n        }\n\n        // Find the perimeter of the square (if at all possible)\n        int L = nums.length;\n        int perimeter = 0;\n        for(int i = 0; i < L; i++) {\n            perimeter += nums[i];\n        }\n\n        int possibleSquareSide =  perimeter / 4;\n        if (possibleSquareSide * 4 != perimeter) {\n            return false;\n        }\n\n        this.nums = nums;\n        this.possibleSquareSide = possibleSquareSide;\n        return this.recurse((1 << L) - 1, 0);\n    }\n}\n```\n\n```Python [sol2]\ndef makesquare(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n\n    # If there are no matchsticks, then we can't form any square.\n    if not nums:\n        return False\n\n    # Number of matchsticks\n    L = len(nums)\n\n    # Possible perimeter of our square\n    perimeter = sum(nums)\n\n    # Possible side of our square from the given matchsticks\n    possible_side =  perimeter // 4\n\n    # If the perimeter isn't equally divisible among 4 sides, return False.\n    if possible_side * 4 != perimeter:\n        return False\n\n    # Memoization cache for the dynamic programming solution.\n    memo = {}\n\n    # mask and the sides_done define the state of our recursion.\n    def recurse(mask, sides_done):\n\n        # This will calculate the total sum of matchsticks used till now using the bits of the mask.\n        total = 0\n        for i in range(L - 1, -1, -1):\n            if not (mask & (1 << i)):\n                total += nums[L - 1 - i]\n\n        # If some of the matchsticks have been used and the sum is divisible by our square's side, then we increment the number of sides completed.\n        if total > 0 and total % possible_side == 0:\n            sides_done += 1\n\n        # If we were successfully able to form 3 sides, return True\n        if sides_done == 3:\n            return True\n\n        # If this recursion state has already been calculated, just return the stored value.\n        if (mask, sides_done) in memo:\n            return memo[(mask, sides_done)]\n\n        # Common variable to store answer from all possible further recursions from this step.\n        ans = False\n\n        # rem stores available space in the current side (incomplete).\n        c = int(total / possible_side)\n        rem = possible_side * (c + 1) - total\n\n        # Iterate over all the matchsticks\n        for i in range(L - 1, -1, -1):\n\n            # If the current one can fit in the remaining space of the side and it hasn't already been taken, then try it out\n            if nums[L - 1 - i] <= rem and mask&(1 << i):\n\n                # If the recursion after considering this matchstick gives a True result, just break. No need to look any further.\n                # mask ^ (1 << i) makes the i^th from the right, 0 making it unavailable in future recursions.\n                if recurse(mask ^ (1 << i), sides_done):\n                    ans = True\n                    break\n        # cache the result for the current recursion state.            \n        memo[(mask, sides_done)] = ans\n        return ans\n\n    # recurse with the initial mask with all matchsticks available.\n    return recurse((1 << L) - 1, 0)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N * 2^N)$，其中 $N$ 是火柴的数量。\n\n* 空间复杂度：$O(N + 2^N)$。",
      "createdAt": "2019-11-12T07:33:09.609103+00:00",
      "hitCount": 22589,
      "identifier": "RvSqDl",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hui-su-fa-can-kao-nyuan-su-hua-fen-wei-k-yx4e",
        "title": "回溯法，参考n元素划分为k子集模版，配合nums排序，进行剪枝"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "matchsticks-to-square"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 17,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "huo-chai-pin-zheng-fang-xing-by-leetcode",
      "status": "PUBLISHED",
      "summary": "分析\n假设火柴的长度分别为 [1,1,1,1,2,2,2,2,3,3,3,3]，它们的和为 24，因此对应正方形的变成为 6。如下图所示，我们给正方形的每一条边都放上长度为 [1,2,3] 的火柴，这是一种可行的方法。\n因此，对于给定的若干根火柴，我们需要：\n\n\n将它们分成四组，每一根火柴恰好属于其中的一组；\n\n\n每一",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Bit Manipulation",
          "nameTranslated": "位运算",
          "slug": "bit-manipulation",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/Figures/473/473_Matchsticks-In-Square-Diag-1.png",
      "title": "火柴拼正方形",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 33,
        "id": 42953,
        "viewCount": 15399
      },
      "uuid": "RvSqDl",
      "videosInfo": []
    }
  }
}
