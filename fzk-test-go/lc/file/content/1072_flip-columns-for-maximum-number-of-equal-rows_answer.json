{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "王德福",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/wang-de-fu/avatar_1532594644.png",
          "userSlug": "wonderful611"
        },
        "username": "wonderful611"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路：\n第一眼看过去，这题是个矩阵啊，再看一眼，表象都是骗人的。\n\n如果某两行可以通过这个规则达成一致，要么它们全等，要么它们相反。\n\n题目要求找到最大值等行数，那么我们就是要去找哪种**特征**的行出现的次数最多。\n\n我第一反应就是：这不就是个二进制数么？首位 $0$ 的直接做 `key`， 首位 $1$ 的按全 $1$ 异或后做 `key`，然后统计哪个 `key` 出现的次数最多。\n\n然后我看到了提示\n```\n1 <= matrix.length <= 300\n1 <= matrix[i].length <= 300\n```\n无法用二进制... 还是直接当做字符串看待吧。\n\n\n于是我想到了一个非常粗糙的方法。\n### 代码：\n```\nvar maxEqualRowsAfterFlips = function(matrix) {\n    let obj = matrix.reduce((obj, item) => {\n      let str\n      if (item[0] === 0) {\n        str = item.map(item => item ^ 1).join('')\n      } else {\n        str = item.join('')\n      }\n      obj[str] ? obj[str]++ : obj[str] = 1\n      return obj\n    }, {})\n    return Math.max(...Object.values(obj))\n};\n```\n\n这样就能把所有的 $01$ 串转化为 $1$ 开头，然后以此做 `key`，出现最多次数的特征。\n\n另外一个思路，是避开 $01$ 转化，直接从特点找特征。\n\n按照数字出现的连续次数定义特征，比如 `11100110 -> 3221`，这样的好处是，`00011001` 同样也是 `3221`，避开了特殊情况下 $01$ 互转，而且最终也跑出了 `228 ms/52.1 MB` 的好成绩。\n\n### 核心代码如下：\n```\n      item.forEach((i) => {\n        if (temp === i) {\n          sum++\n        } else {\n          temp = i\n          str += sum\n          sum = 1\n        }\n      })\n      str += sum\n```",
      "createdAt": "2019-06-10T03:21:38.505903+00:00",
      "hitCount": 3625,
      "identifier": "WWqhDe",
      "isEditorsPick": true,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1072-cchao-92de-tan-xin-jie-fa-by-ffretu-vvt8",
        "title": "1072. c++超92的贪心解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "flip-columns-for-maximum-number-of-equal-rows"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "1072-an-lie-fan-zhuan-de-dao-zui-da-zhi-deng-xing-",
      "status": "PUBLISHED",
      "summary": "解题思路：\n第一眼看过去，这题是个矩阵啊，再看一眼，表象都是骗人的。\n如果某两行可以通过这个规则达成一致，要么它们全等，要么它们相反。\n题目要求找到最大值等行数，那么我们就是要去找哪种特征的行出现的次数最多。\n我第一反应就是：这不就是个二进制数么？首位 $0$ 的直接做 key， 首位 $1$ 的按全 $1$ 异或后做",
      "sunk": false,
      "tags": [],
      "thumbnail": "",
      "title": "1072. 按列翻转得到最大值等行数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 3,
        "id": 8057,
        "viewCount": 2835
      },
      "uuid": "WWqhDe",
      "videosInfo": []
    }
  }
}
