{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：堆 [超出时间限制]\n\n使用堆可以帮我们找到第 `k` 小值。我们将数组排序，此时对于固定的下标 `i`，从小到大的距离分别为 `(i, i + 1)`，`(i, i + 2)`，...，`(i, N - 1)`。因为 `(i, j + 1)` 的距离不会小于 `(i, j)`，因此如果 `(i, j)` 还在堆中，我们没有必要把 `(i, j + 1)` 放入堆中。\n\n因此，我们首先将所有 `(i, i + 1)` 放入堆中，即 `heap = [(i, i + 1) for all i]`。每次取出堆中的最小元素 `(i, j)` 时（元素的大小为 `nums[j] - nums[i]`，即距离），再把 `(i, j + 1)` 放入堆中。直到取出 `k` 个元素，就得到了第 `k` 小的距离。\n\n```Python [sol1]\nclass Solution(object):\n    def smallestDistancePair(self, nums, k):\n        nums.sort()\n        heap = [(nums[i+1] - nums[i], i, i+1)\n                for i in xrange(len(nums) - 1)]\n        heapq.heapify(heap)\n\n        for _ in xrange(k):\n            d, root, nei = heapq.heappop(heap)\n            if nei + 1 < len(nums):\n                heapq.heappush((nums[nei + 1] - nums[root], root, nei + 1))\n\n        return d\n```\n\n```Java [sol1]\nclass Solution {\n    public int smallestDistancePair(int[] nums, int k) {\n        Arrays.sort(nums);\n        PriorityQueue<Node> heap = new PriorityQueue<Node>(nums.length,\n            Comparator.<Node> comparingInt(node -> nums[node.nei] - nums[node.root]));\n        for (int i = 0; i + 1 < nums.length; ++i) {\n            heap.offer(new Node(i, i+1));\n        }\n\n        Node node = null;\n        for (; k > 0; --k) {\n            node = heap.poll();\n            if (node.nei + 1 < nums.length) {\n                heap.offer(new Node(node.root, node.nei + 1));\n            }\n        }\n        return nums[node.nei] - nums[node.root];\n    }\n}\n\nclass Node {\n    int root;\n    int nei;\n    Node(int r, int n) {\n        root = r;\n        nei = n;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O((k + N) \\log N)$，其中 $N$ 为 `nums` 数组的长度。因为 `k` 最大可以达到 `O(N^2)`，因此最坏情况下，时间复杂度为 $O(N^2 \\log N)$，超出了时间限制。\n\n* 空间复杂度：$O(N)$。堆中的元素个数是 $O(N)$ 的。\n\n#### 方法二：二分查找 + 前缀和\n\n**分析**\n\n由于第 `k` 小的距离一定在 `[0, W = max(nums) - min(nums)]` 中，我们在这个区间上进行二分。对于当前二分的位置 `guess`，统计距离小于等于 `guess` 的距离对数量，并根据它和 `k` 的关系调整区间的上下界。\n\n我们定义函数 `possible(guess)` 为真，当且仅当距离小于等于 `guess` 的距离对数量比 `k` 大或和 `k` 相等。\n\n**算法**\n\n我们用 `prefix[v]` 表示 `nums` 数组中比 `v` 小或者和 `v` 相等的元素个数，用 `multiplicity[j]` 表示满足 `i < j` 且 `nums[i] == nums[j]` 的 `i` 的个数。这两个数组都可以通过对 `nums` 线性扫描得到。\n\n此时，对于每一个固定的 `i`，满足 `i < j` 且 `nums[j] - nums[i] <= guess` 的 `j` 的个数为 `prefix[x + guess] - prefix[x] + count[i] - multiplicity[i]`，其中 `x = nums[i]`，`count[i]` 表示 `nums[i]` 在数组中出现的次数。我们遍历所有的 `i` 并对上式求和，就得到了所有小于等于 `guess` 的距离对数目。\n\n此外，由于所有 `count[i] - multiplicity[i]` 的和与 `multiplicity[i]` 的和实际上是相等的，在求和时，我们可以把前者替换为后者（但并不会改变时间复杂度）。\n\n```Python [sol1]\nclass Solution(object):\n    def smallestDistancePair(self, nums, k):\n        def possible(guess):\n            #Is there k or more pairs with distance <= guess?\n            return sum(prefix[min(x + guess, W)] - prefix[x] + multiplicity[i]\n                       for i, x in enumerate(nums)) >= k\n\n        nums.sort()\n        W = nums[-1]\n\n        #multiplicity[i] = number of nums[j] == nums[i] (j < i)\n        multiplicity = [0] * len(nums)\n        for i, x in enumerate(nums):\n            if i and x == nums[i-1]:\n                multiplicity[i] = 1 + multiplicity[i - 1]\n\n        #prefix[v] = number of values <= v\n        prefix = [0] * (W + 1)\n        left = 0\n        for i in xrange(len(prefix)):\n            while left < len(nums) and nums[left] == i:\n                left += 1\n            prefix[i] = left\n\n        lo = 0\n        hi = nums[-1] - nums[0]\n        while lo < hi:\n            mi = (lo + hi) / 2\n            if possible(mi):\n                hi = mi\n            else:\n                lo = mi + 1\n\n        return lo\n```\n\n```Java [sol1]\nclass Solution {\n    public int smallestDistancePair(int[] nums, int k) {\n        Arrays.sort(nums);\n        int WIDTH = 2 * nums[nums.length - 1];\n\n        //multiplicity[i] = number of nums[j] == nums[i] (j < i)\n        int[] multiplicity = new int[nums.length];\n        for (int i = 1; i < nums.length; ++i) {\n            if (nums[i] == nums[i-1]) {\n                multiplicity[i] = 1 + multiplicity[i - 1];\n            }\n        }\n\n        //prefix[v] = number of values <= v\n        int[] prefix = new int[WIDTH];\n        int left = 0;\n        for (int i = 0; i < WIDTH; ++i) {\n            while (left < nums.length && nums[left] == i) left++;\n            prefix[i] = left;\n        }\n\n        int lo = 0;\n        int hi = nums[nums.length - 1] - nums[0];\n        while (lo < hi) {\n            int mi = (lo + hi) / 2;\n            int count = 0;\n            for (int i = 0; i < nums.length; ++i) {\n                count += prefix[nums[i] + mi] - prefix[nums[i]] + multiplicity[i];\n            }\n            //count = number of pairs with distance <= mi\n            if (count >= k) hi = mi;\n            else lo = mi + 1;\n        }\n        return lo;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(W + N \\log W + N \\log N)$，其中 $N$ 为 `nums` 数组的长度，$W$ 为 `nums` 数组中最大值与最小值的差，即 `nums[nums.length - 1] - nums[0]`（对 `nums` 数组进行排序之后）。其中计算 `prefix` 的时间复杂度为 $O(W)$，二分查找的时间复杂度为 $\\log W$，计算 `possible(guess)` 函数的时间复杂度为 $O(N)$，对 `nums` 数组进行排序的时间复杂度为 $O(N\\log N)$。\n\n* 空间复杂度：$O(N + W)$，用来存储数组 `multiplicity` 和 `prefix`。\n\n#### 方法三：二分查找 + 双指针 [通过]\n\n**分析**\n\n在方法二中，我们计算 `possible(guess)` 时用到了很多预先处理好的数组，我们可以优化这个过程，减少预处理的时间复杂度，例如计算 `prefix` 的时间复杂度 $O(W)$。\n\n**方法**\n\n我们可以使用双指针来计算出所有小于等于 `guess` 的距离对数目。我们维护 `left` 和 `right`，其中 `right` 通过循环逐渐递增，`left` 在每次循环中被维护，使得它满足 `nums[right] - nums[left] <= guess` 且最小。这样对于 `nums[right]`，以它为右端的满足距离小于等于 `guess` 的距离对数目即为 `right - left`。我们在循环中对这些 `right - left` 进行累加，就得到了所有小于等于 `guess` 的距离对数目。\n\n```Python [sol3]\nclass Solution(object):\n    def smallestDistancePair(self, nums, k):\n        def possible(guess):\n            #Is there k or more pairs with distance <= guess?\n            count = left = 0\n            for right, x in enumerate(nums):\n                while x - nums[left] > guess:\n                    left += 1\n                count += right - left\n            return count >= k\n\n        nums.sort()\n        lo = 0\n        hi = nums[-1] - nums[0]\n        while lo < hi:\n            mi = (lo + hi) / 2\n            if possible(mi):\n                hi = mi\n            else:\n                lo = mi + 1\n\n        return lo\n```\n\n```Java [sol3]\nclass Solution {\n    public int smallestDistancePair(int[] nums, int k) {\n        Arrays.sort(nums);\n\n        int lo = 0;\n        int hi = nums[nums.length - 1] - nums[0];\n        while (lo < hi) {\n            int mi = (lo + hi) / 2;\n            int count = 0, left = 0;\n            for (int right = 0; right < nums.length; ++right) {\n                while (nums[right] - nums[left] > mi) left++;\n                count += right - left;\n            }\n            //count = number of pairs with distance <= mi\n            if (count >= k) hi = mi;\n            else lo = mi + 1;\n        }\n        return lo;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log W + N \\log N)$，其中 $N$ 为 `nums` 数组的长度，$W$ 为 `nums` 数组中最大值与最小值的差，即 `nums[nums.length - 1] - nums[0]`（对 `nums` 数组进行排序之后）。其中二分查找的时间复杂度为 $\\log W$，计算 `possible(guess)` 函数的时间复杂度为 $O(N)$，对 `nums` 数组进行排序的时间复杂度为 $O(N\\log N)$。\n\n* 空间复杂度：$O(1)$。\n",
      "createdAt": "2019-07-22T05:51:13.739205+00:00",
      "hitCount": 16122,
      "identifier": "X9X0X4",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "chi-tou-er-fen-fa-xi-lie-cong-ru-men-dao-2eh6",
        "title": "【吃透二分法系列】：从入门到精通"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-k-th-smallest-pair-distance"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 23,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "hei-ming-dan-zhong-de-sui-ji-shu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：堆 [超出时间限制]\n使用堆可以帮我们找到第 k 小值。我们将数组排序，此时对于固定的下标 i，从小到大的距离分别为 (i, i + 1)，(i, i + 2)，...，(i, N - 1)。因为 (i, j + 1) 的距离不会小于 (i, j)，因此如果 (i, j) 还在堆中，我们没有必要把 (i, j ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "找出第 k 小的距离对",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 44,
        "id": 15929,
        "viewCount": 10644
      },
      "uuid": "X9X0X4",
      "videosInfo": []
    }
  }
}
