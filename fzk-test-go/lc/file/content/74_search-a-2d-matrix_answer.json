{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：两次二分查找\n\n**思路**\n\n由于每行的第一个元素大于前一行的最后一个元素，且每行元素是升序的，所以每行的第一个元素大于前一行的第一个元素，因此矩阵第一列的元素是升序的。\n\n我们可以对矩阵的第一列的元素二分查找，找到最后一个不大于目标值的元素，然后在该元素所在行中二分查找目标值是否存在。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>> matrix, int target) {\n        auto row = upper_bound(matrix.begin(), matrix.end(), target, [](const int b, const vector<int> &a) {\n            return b < a[0];\n        });\n        if (row == matrix.begin()) {\n            return false;\n        }\n        --row;\n        return binary_search(row->begin(), row->end(), target);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int rowIndex = binarySearchFirstColumn(matrix, target);\n        if (rowIndex < 0) {\n            return false;\n        }\n        return binarySearchRow(matrix[rowIndex], target);\n    }\n\n    public int binarySearchFirstColumn(int[][] matrix, int target) {\n        int low = -1, high = matrix.length - 1;\n        while (low < high) {\n            int mid = (high - low + 1) / 2 + low;\n            if (matrix[mid][0] <= target) {\n                low = mid;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return low;\n    }\n\n    public boolean binarySearchRow(int[] row, int target) {\n        int low = 0, high = row.length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            if (row[mid] == target) {\n                return true;\n            } else if (row[mid] > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc searchMatrix(matrix [][]int, target int) bool {\n    row := sort.Search(len(matrix), func(i int) bool { return matrix[i][0] > target }) - 1\n    if row < 0 {\n        return false\n    }\n    col := sort.SearchInts(matrix[row], target)\n    return col < len(matrix[row]) && matrix[row][col] == target\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar searchMatrix = function(matrix, target) {\n    const rowIndex = binarySearchFirstColumn(matrix, target);\n    if (rowIndex < 0) {\n        return false;\n    }\n    return binarySearchRow(matrix[rowIndex], target);\n};\n\nconst binarySearchFirstColumn = (matrix, target) => {\n    let low = -1, high = matrix.length - 1;\n    while (low < high) {\n        const mid = Math.floor((high - low + 1) / 2) + low;\n        if (matrix[mid][0] <= target) {\n            low = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nconst binarySearchRow = (row, target) => {\n    let low = 0, high = row.length - 1;\n    while (low <= high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        if (row[mid] == target) {\n            return true;\n        } else if (row[mid] > target) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return false;\n}\n```\n\n```C [sol1-C]\nint binarySearchFirstColumn(int** matrix, int matrixSize, int target) {\n    int low = -1, high = matrixSize - 1;\n    while (low < high) {\n        int mid = (high - low + 1) / 2 + low;\n        if (matrix[mid][0] <= target) {\n            low = mid;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\nbool binarySearchRow(int* row, int rowSize, int target) {\n    int low = 0, high = rowSize - 1;\n    while (low <= high) {\n        int mid = (high - low) / 2 + low;\n        if (row[mid] == target) {\n            return true;\n        } else if (row[mid] > target) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return false;\n}\n\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {\n    int rowIndex = binarySearchFirstColumn(matrix, matrixSize, target);\n    if (rowIndex < 0) {\n        return false;\n    }\n    return binarySearchRow(matrix[rowIndex], matrixColSize[rowIndex], target);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log m+\\log n)=O(\\log mn)$，其中 $m$ 和 $n$ 分别是矩阵的行数和列数。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：一次二分查找\n\n**思路**\n\n若将矩阵每一行拼接在上一行的末尾，则会得到一个升序数组，我们可以在该数组上二分找到目标元素。\n\n代码实现时，可以二分升序数组的下标，将其映射到原矩阵的行和列上。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\n        int m = matrix.size(), n = matrix[0].size();\n        int low = 0, high = m * n - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int x = matrix[mid / n][mid % n];\n            if (x < target) {\n                low = mid + 1;\n            } else if (x > target) {\n                high = mid - 1;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int m = matrix.length, n = matrix[0].length;\n        int low = 0, high = m * n - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int x = matrix[mid / n][mid % n];\n            if (x < target) {\n                low = mid + 1;\n            } else if (x > target) {\n                high = mid - 1;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc searchMatrix(matrix [][]int, target int) bool {\n    m, n := len(matrix), len(matrix[0])\n    i := sort.Search(m*n, func(i int) bool { return matrix[i/n][i%n] >= target })\n    return i < m*n && matrix[i/n][i%n] == target\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar searchMatrix = function(matrix, target) {\n    const m = matrix.length, n = matrix[0].length;\n    let low = 0, high = m * n - 1;\n    while (low <= high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        const x = matrix[Math.floor(mid / n)][mid % n];\n        if (x < target) {\n            low = mid + 1;\n        } else if (x > target) {\n            high = mid - 1;\n        } else {\n            return true;\n        }\n    }\n    return false;\n};\n```\n\n```C [sol2-C]\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target) {\n    int m = matrixSize, n = matrixColSize[0];\n    int low = 0, high = m * n - 1;\n    while (low <= high) {\n        int mid = (high - low) / 2 + low;\n        int x = matrix[mid / n][mid % n];\n        if (x < target) {\n            low = mid + 1;\n        } else if (x > target) {\n            high = mid - 1;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log mn)$，其中 $m$ 和 $n$ 分别是矩阵的行数和列数。\n\n- 空间复杂度：$O(1)$。\n\n#### 结语\n\n两种方法殊途同归，都利用了二分查找，在二维矩阵上寻找目标值。值得注意的是，若二维数组中的一维数组的元素个数不一，方法二将会失效，而方法一则能正确处理。",
      "createdAt": "2021-03-29T14:54:12.717950+00:00",
      "hitCount": 57471,
      "identifier": "0adAMH",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zuo-biao-zhou-fa-er-wei-shu-zu-zhong-de-nxfc8",
        "title": "【坐标轴法】搜索二维矩阵"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "search-a-2d-matrix"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 66,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "sou-suo-er-wei-ju-zhen-by-leetcode-solut-vxui",
      "status": "PUBLISHED",
      "summary": "方法一：两次二分查找 思路 由于每行的第一个元素大于前一行的最后一个元素，且每行元素是升序的，所以每行的第一个元素大于前一行的第一个元素，因此矩阵第一列的元素是升序的。 我们可以对矩阵的第一列的元素二分查找，找到最后一个不大于目标值的元素，然后在该元素所在行中二分查找目标值是否存在。 代码 C++ [sol1-C++]",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "搜索二维矩阵",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 178,
        "id": 688117,
        "viewCount": 41487
      },
      "uuid": "0adAMH",
      "videosInfo": []
    }
  }
}
