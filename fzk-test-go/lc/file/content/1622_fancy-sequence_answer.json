{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "jklp2",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/default_avatar.png",
          "userSlug": "jklp2"
        },
        "username": "jklp2"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路\n对x的若干次乘法加法操作例如$((x+inc1)*m1*m2+inc2))*m3+inc3$都可以化简为$ax+b$\n所以任意操作由两个数a，b即可描述。\n而且操作有可加性。\n假设$f(x)=a_0x+b_0$和$g(x)=a_1x+b_1$\n定义$h=f+g$ \n$h(x)=f(g(x))=a_0*a_1x+a_0*b_1+b_0$\n需要注意的是这种加法是不满足交换律的，但是本题不需要交换律性质也可求解\n将操作抽象成节点Node。\n我们用getIndex取数的时候需要将添加的数字操作，这个操作=添加该数后所有的添加的操作的和。\n这里就可以利用树状树组。\n\n![5530.png](https://pic.leetcode-cn.com/1602969373-EuKnSY-5530.png)\n假设在数组长度分别为3 5 8 10的时候添加操作op1,op2,op3,op4\n那么我们在树状树组倒序索引处添加这些操作。\n假设我们要查找第7个数字时，找到倒序索引7，这前面的所有操作（op3，op4）对该数字有效。\n求树状数组正序索引4之前的所有操作的和即可。\n\n### 树状树组代码\n```cpp\nconst int64_t MOD=1e9+7;\nstruct Node{\n    int64_t a,b;    //f(x)=ax+b\n    Node(int _a=1,int _b=0):a(_a),b(_b){}\n    void operator += (const Node &t){\n        a=a*t.a%MOD;\n        b=(b*t.a+t.b)%MOD;\n    }\n};\nNode A[200000];\nclass Fancy {\npublic:\n    vector<int64_t> nums;\n    Fancy(){\n        for(int i=0;i<200000;i++)\n            A[i].a=1,A[i].b=0;\n    }\n    void append(int val) {\n        nums.push_back(val);\n    }\n    void addAll(int inc) {\n        if(nums.empty())\n            return;\n        Node op(1,inc);\n        for(int i = 100000-nums.size();i<200000;i+=i&-i)\n            A[i]+=op;\n    }\n    void multAll(int m) {\n        if(nums.empty())\n            return;\n        Node op(m,0);\n        for(int i = 100000-nums.size();i<200000;i+=i&-i)\n            A[i]+=op;\n    }\n    int getIndex(int idx) {\n        if(idx>=nums.size())\n            return -1;\n        Node op;\n        for(int i = 100000-(idx+1);i>=1;i-=i&-i)\n            op += A[i];\n        return (op.a*nums[idx]+op.b)%MOD;\n    }\n};\n```\n\n另附线段树代码。\n### 线段树代码\n\n```cpp\nconst int64_t MOD=1e9+7;\nstruct Node{\n    int64_t a,b;    //f(x)=ax+b\n    Node(int _a=1,int _b=0):a(_a),b(_b){}\n    void operator += (const Node &t){\n        Node ret;\n        a=a*t.a%MOD;\n        b=(b*t.a+t.b)%MOD;\n    }\n};\nnamespace SegTree{\n    Node A[200000];\n    void init(){\n        for(int i=0;i<200000;i++){\n            A[i].a=1,A[i].b=0;\n        }\n    }\n    void update(int R,int l, int r,int i,Node &op){\n        A[R]+=op;\n        if(i==l&&i==r)\n            return;\n        int mid = l+r>>1;\n        if(i<=mid)\n            update(R<<1,l,mid,i,op);\n        else\n            update(R<<1|1,mid+1,r,i,op);\n    }\n    Node query(int R,int l,int r,int l1,int r1){\n        if(l==l1&&r==r1)\n            return A[R];\n        int mid = l+r>>1;\n        if(r1<=mid)return query(R<<1,l,mid,l1,r1);\n        if(l1>mid)return query(R<<1|1,mid+1,r,l1,r1);\n        Node ret;\n        ret+=query(R<<1,l,mid,l1,mid);\n        ret+=query(R<<1|1,mid+1,r,mid+1,r1);\n        return ret;\n    }\n};\nclass Fancy {\npublic:\n    vector<int64_t> nums;\n    Fancy() {\n        SegTree::init();\n    }\n    void append(int val) {\n        nums.push_back(val);\n    }\n    void addAll(int inc) {\n        if(nums.empty())\n            return;\n        Node op(1,inc);\n        SegTree::update(1,1,100000,nums.size(),op);\n    }\n    void multAll(int m) {\n        if(nums.empty())\n            return;\n        Node op(m,0);\n        SegTree::update(1,1,100000,nums.size(),op);\n    }\n    int getIndex(int idx) {\n        if(idx>=nums.size())\n            return -1;\n        Node op=SegTree::query(1,1,100000,idx+1,nums.size());\n        return (op.a*nums[idx]+op.b)%MOD;\n    }\n};\n```",
      "createdAt": "2020-10-17T20:45:57.533093+00:00",
      "hitCount": 2292,
      "identifier": "KpCmXC",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-dan-rong-yi-li-jie-de-fang-fa-zhi-s-6crf",
        "title": "简单容易理解的方法，只是把加和乘法操作合并"
      },
      "position": 4,
      "prev": {
        "__typename": "BriefSolutionNode",
        "slug": "1622qi-miao-xu-lie-xi-shu-he-bing-cheng-z6oe2",
        "title": "1622.奇妙序列. 系数合并, 乘法逆元, 打表优化."
      },
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "fancy-sequence"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "jiang-cao-zuo-chou-xiang-cheng-ke-jia-jie-dian-by-",
      "status": "PREPUBLISH",
      "summary": "解题思路\n对x的若干次乘法加法操作例如((x+inc1)*m1*m2+inc2))*m3+inc3都可以化简为ax+b\n所以任意操作由两个数a，b即可描述。\n而且操作有可加性。\n假设f(x)=a_0x+b_0和g(x)=a_1x+b_1\n定义h=f+g\nh(x)=f(g(x))=a_0*a_1x+a_0*b_1+b_0",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "cpp",
          "nameTranslated": "",
          "slug": "additional_cpp",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1602969373-EuKnSY-5530.png",
      "title": "将操作抽象成可加节点，树状数组求解",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 10,
        "id": 450533,
        "viewCount": 1825
      },
      "uuid": "KpCmXC",
      "videosInfo": []
    }
  }
}
