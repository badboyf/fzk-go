{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n根据翻转操作的定义，选定下标 $i$ 之后，翻转从下标 $i$ 到下标 $n-1$ 的每个灯泡，在下标 $i$ 前面的灯泡则不被翻转。因此，如果一个灯泡被翻转，则一定是选择了该灯泡的下标或者该灯泡前面的某个下标，然后进行了翻转操作。\n\n初始状态是所有的灯泡是关着的，即状态都是 $0$。对于下标为 $0$ 的灯泡，如果其在 $\\textit{target}$ 中的状态是 $1$，则一定有一次对下标为 $0$ 的灯泡的翻转操作。\n\n对于下标为 $i$（$i>0$）的灯泡，如果其在 $\\textit{target}$ 中的状态与前一个灯泡（即下标为 $i-1$ 的灯泡）的状态不同，则一定有一次对下标为 $i$ 的灯泡的翻转操作。\n\n因此，只需要从前往后遍历 $\\textit{target}$，对每个下标判断是否进行了翻转操作即可，同时计算最少翻转次数。\n\n```Java [sol1-Java]\nclass Solution {\n    public int minFlips(String target) {\n        int flips = 0;\n        char prev = '0';\n        int length = target.length();\n        for (int i = 0; i < length; i++) {\n            char curr = target.charAt(i);\n            if (curr != prev) {\n                flips++;\n                prev = curr;\n            }\n        }\n        return flips;\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int minFlips(string target) {\n        int flips = 0;\n        char prev = '0';\n        int length = target.size();\n        for (int i = 0; i < length; i++) {\n            char curr = target.at(i);\n            if (curr != prev) {\n                flips++;\n                prev = curr;\n            }\n        }\n        return flips;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minFlips(self, target: str) -> int:\n        flips, prev = 0, \"0\"\n        for curr in target:\n            if curr != prev:\n                flips += 1\n                prev = curr\n        return flips\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $\\textit{target}$ 的长度。遍历字符串一次。\n\n- 空间复杂度：$O(1)$。只需要维护常量的额外空间。",
      "createdAt": "2020-08-02T08:43:39.359689+00:00",
      "hitCount": 2948,
      "identifier": "OYIahV",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "cyi-ci-bian-li-by-miyuki_kazuya-3tpn",
        "title": "C++一次遍历"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "bulb-switcher-iv"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "deng-pao-kai-guan-iv-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 根据翻转操作的定义，选定下标 $i$ 之后，翻转从下标 $i$ 到下标 $n-1$ 的每个灯泡，在下标 $i$ 前面的灯泡则不被翻转。因此，如果一个灯泡被翻转，则一定是选择了该灯泡的下标或者该灯泡前面的某个下标，然后进行了翻转操作。 初始状态是所有的灯泡是关着的，即状态都是 $0$。对于下标为 $0$ 的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "灯泡开关 IV",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 2,
        "id": 357878,
        "viewCount": 2448
      },
      "uuid": "OYIahV",
      "videosInfo": []
    }
  }
}
