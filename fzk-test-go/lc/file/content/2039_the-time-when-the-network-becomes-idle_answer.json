{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "算法小爱",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/helen_class/avatar_1631327629.png",
          "userSlug": "helen_class"
        },
        "username": "Helen_Class"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "> 大家好，我是小爱，一个热爱算法并不断努力的女孩子！[关注我](https://leetcode-cn.com/u/helen_class/)，和我一起交流算法心得呀！\r\n\r\n---\r\n\r\n###  解法：广度优先搜索 + 数学推导\r\n\r\n我们假设某服务器 $i$ 向主服务器传输信息需要的时间为 $time$，那么其收到反馈信息的时间为 $2 \\times time$。在 $[1, 2 \\times time - 1]$ 秒内，该数据服务器每 `patience[i]` 秒重发一次信息，所以共重发了 $count = (2 \\times time  - 1)/ \\ patience[i]$ 次信息。最后一次信息的发送时间为第 $count \\times patience[i]$ 秒，该信息需要再经过一次主服务器反馈并返回服务器 $i$ ，到达时间为 $count \\times patience[i] + 2 \\times time$。\r\n\r\n由此，我们遍历所有数据服务器，取所有这些服务器接收到最后一条反馈信息的时间中的最大值，该时间的下一秒网络就会空闲。\r\n\r\n遍历所有数据服务器，我们可以先通过邻接表建图，并从主服务器 $0$ 开始，利用广度优先搜索即可。\r\n\r\n### 算法细节：\r\n\r\n具体见代码注释\r\n\r\n---\r\n\r\n### 代码：\r\n\r\n```c++\r\nclass Solution {\r\npublic:\r\n    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& p) {\r\n        int n = p.size();\r\n        \r\n        // 邻接表建图\r\n        vector<vector<int>> e(n);\r\n        for(auto &ed : edges) {\r\n            e[ed[0]].push_back(ed[1]);\r\n            e[ed[1]].push_back(ed[0]);\r\n        }\r\n        \r\n        // 记录哪些服务器已被扩展\r\n        vector<bool> vis(n);\r\n        queue<pair<int, int>> q;\r\n        q.emplace(0, 0);\r\n        vis[0] = true;\r\n        \r\n        // 记录最晚到达时间\r\n        int ret = 0;\r\n        \r\n        // 广度优先搜索\r\n        while(!q.empty()) {\r\n            auto [c, time] = q.front();\r\n            q.pop();\r\n            \r\n            if(c != 0) {\r\n                // c != 0 是因为首先会扩展到主服务器\r\n                int cost = ((2 * time - 1) / p[c]) * p[c] + 2 * time;\r\n                ret = max(ret, cost);\r\n            }\r\n            \r\n            // 扩展所有与当前数据服务器直接相连的服务器\r\n            for(int &next : e[c]) {\r\n                if(!vis[next]) {\r\n                    vis[next] = true;\r\n                    q.emplace(next, time + 1);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return ret + 1;\r\n    }\r\n};\r\n```\r\n\r\n---\r\n\r\n### 复杂度分析：\r\n\r\n- 时间复杂度：$O(V + E)$\r\n\r\n\r\n---\r\n\r\n# 推荐阅读\r\n小爱每周持续推出原创 C++、算法类文章，欢迎大家提出宝贵意见呀！\r\n![image.png](https://pic.leetcode-cn.com/1634315502-TxefPl-image.png)\r\n\r\n\r\n![image.png](https://pic.leetcode-cn.com/1634141705-yYOnhN-image.png)\r\n\r\n\r\n\r\n# [C++ 类 字符串](https://mp.weixin.qq.com/s?__biz=MzkyMzI3ODgzNQ==&mid=2247483827&idx=1&sn=eae09972d727ccaa47569bff957cc634&chksm=c1e6cd2ff69144392b2789a2e38a125aac8e75c4ff4b1ab7f032eab4be01920fe21bf110eea9&token=1377938079&lang=zh_CN#rd)\r\n\r\n# [C++ 类 第二部分](https://mp.weixin.qq.com/s?__biz=MzkyMzI3ODgzNQ==&mid=2247483814&idx=1&sn=547b85c54c0e3b7cb0ddc1f5e0ebc859&chksm=c1e6cd3af691442cc8a3d93c4205645c56abd4950ebe4a11b59cf8408a00022a9b3adb09093d&token=398550145&lang=zh_CN#rd)\r\n# [C++ 类 第一部分](https://mp.weixin.qq.com/s?__biz=MzkyMzI3ODgzNQ==&mid=2247483775&idx=1&sn=e899eaeec7d20098de254ba78dac8294&chksm=c1e6cde3f69144f5350eddc6809142144fb083e1fb6d772d5e30a3a2626e9871f0bcb96d9a3e&token=1582044052&lang=zh_CN#rd)\r\n# [C++ 基础语法](https://mp.weixin.qq.com/s?__biz=MzkyMzI3ODgzNQ==&mid=2247483757&idx=1&sn=a2584273d295cdaae16d9b7df296f4c0&chksm=c1e6cdf1f69144e7051725d5ac5feb4a7a4b221290b726e506ef307b31d73a7930e278c09e61#rd)\r\n# [树状数组](https://mp.weixin.qq.com/s?__biz=MzkyMzI3ODgzNQ==&mid=2247483674&idx=1&sn=263595b26950ac60e5bf789839d70c9e&chksm=c1e6cd86f691449062d780b96d9af6d9590a71872ebfee980d5b045b9963714043261027c16b#rd)",
      "createdAt": "2021-10-16T16:13:55.134209+00:00",
      "hitCount": 1134,
      "identifier": "3T9Vud",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "bfs-tong-ji-mei-ge-dian-bian-wei-kong-xi-mnm7",
        "title": "BFS + 统计每个点变为空闲状态的最早秒数"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "the-time-when-the-network-becomes-idle"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "suan-fa-xiao-ai-yan-du-you-xian-sou-suo-fqnyw",
      "status": "PREPUBLISH",
      "summary": "大家好，我是小爱，一个热爱算法并不断努力的女孩子！关注我，和我一起交流算法心得呀！\n\n解法：广度优先搜索 + 数学推导\n我们假设某服务器 i 向主服务器传输信息需要的时间为 time，那么其收到反馈信息的时间为 2 \\times time。在 [1, 2 \\times time - 1] 秒内，该数据服务器每 pat",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "搜索",
          "nameTranslated": "",
          "slug": "search",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1634315502-TxefPl-image.png",
      "title": "【算法小爱】广度优先搜索 + 数学推导",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 6,
        "id": 1050966,
        "viewCount": 761
      },
      "uuid": "3T9Vud",
      "videosInfo": []
    }
  }
}
