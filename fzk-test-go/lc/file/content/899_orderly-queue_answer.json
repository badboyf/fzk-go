{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：数学\n\n当 `K = 1` 时，每次操作只能将第一个字符移动到末尾，因此字符串 `S` 可以看成一个头尾相连的环。如果 `S` 的长度为 $N$，我们只需要找出这 $N$ 个位置中字典序最小的字符串即可。\n\n当 `K = 2` 时，可以发现，我们能够交换字符串中任意两个相邻的字母。具体地，设字符串 `S` 为 `S[1], S[2], ..., S[i], S[i + 1], ..., S[N]`，我们需要交换 `S[i]` 和 `S[j]`。首先我们依次将 `S[i]` 之前的所有字符依次移到末尾，得到\n\n`S[i], S[i + 1], ..., S[N], S[1], S[2], ..., S[i - 1]`\n\n随后我们先将 `S[i + 1]` 移到末尾，再将 `S[i]` 移到末尾，得到\n\n`S[i + 2], ..., S[N], S[1], S[2], ..., S[i - 1], S[i + 1], S[i]`\n\n最后将 `S[i + 1]` 之后的所有字符依次移到末尾，得到\n\n`S[1], S[2], ..., S[i - 1], S[i + 1], S[i], S[i + 2], ..., S[N]`\n\n这样就交换了 `S[i]` 和 `S[i + 1]`，而没有改变其余字符的位置。\n\n当我们可以交换任意两个相邻的字母后，就可以使用[冒泡排序](https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F)的方法，仅通过交换相邻两个字母，使得字符串变得有序。因此当 `K = 2` 时，我们可以将字符串移动得到最小的字典序。\n\n当 `K > 2` 时，我们可以完成 `K = 2` 时的所有操作。\n\n```Java [sol1]\nclass Solution {\n    public String orderlyQueue(String S, int K) {\n        if (K == 1) {\n            String ans = S;\n            for (int i = 0; i < S.length(); ++i) {\n                String T = S.substring(i) + S.substring(0, i);\n                if (T.compareTo(ans) < 0) ans = T;\n            }\n            return ans;\n        } else {\n            char[] ca = S.toCharArray();\n            Arrays.sort(ca);\n            return new String(ca);\n        }\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def orderlyQueue(self, S, K):\n        if K == 1:\n            return min(S[i:] + S[:i] for i in range(len(S)))\n        return \"\".join(sorted(S))\n```\n\n**复杂度分析**\n\n* 时间复杂度：当 `K = 1` 时为 $O(N^2)$，否则为 $O(N \\log N)$，其中 $N$ 是字符串 `S` 的长度。\n\n* 空间复杂度：当 `K = 1` 时为 $O(N^2)$，否则为 $O(N)$。",
      "createdAt": "2019-08-06T06:14:56.720738+00:00",
      "hitCount": 6538,
      "identifier": "X43kcU",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ping-zhi-jue-gan-jue-by-lwlvhy-bay5",
        "title": "凭直觉感觉"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "orderly-queue"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 19,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "you-xu-dui-lie-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：数学\n当 K = 1 时，每次操作只能将第一个字符移动到末尾，因此字符串 S 可以看成一个头尾相连的环。如果 S 的长度为 N，我们只需要找出这 N 个位置中字典序最小的字符串即可。\n当 K = 2 时，可以发现，我们能够交换字符串中任意两个相邻的字母。具体地，设字符串 S 为 S[1], S[2], ..",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "有序队列",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 17,
        "id": 18775,
        "viewCount": 4946
      },
      "uuid": "X43kcU",
      "videosInfo": []
    }
  }
}
