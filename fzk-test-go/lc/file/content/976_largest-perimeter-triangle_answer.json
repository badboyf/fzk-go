{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心 + 排序\n\n不失一般性，我们假设三角形的边长 $a,b,c$ 满足 $a \\leq b \\leq c$，那么这三条边组成面积不为零的三角形的充分必要条件为 $a+b>c$。\n\n基于此，我们可以选择枚举三角形的最长边 $c$，而从贪心的角度考虑，我们一定是选「小于 $c$ 的最大的两个数」作为边长 $a$ 和 $b$，此时最有可能满足 $a+b>c$，使得三条边能够组成一个三角形，且此时的三角形的周长是最大的。\n\n因此，我们先对整个数组排序，**倒序枚举**第 $i$ 个数作为最长边，那么我们只要看其前两个数 $A[i-2]$ 和 $A[i-1]$，判断 $A[i-2]+A[i-1]$ 是否大于 $A[i]$ 即可，如果能组成三角形我们就找到了最大周长的三角形，返回答案 $A[i-2]+A[i-1]+A[i]$ 即可。如果对于任何数作为最长边都不存在面积不为零的三角形，则返回答案 $0$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int largestPerimeter(int[] A) {\n        Arrays.sort(A);\n        for (int i = A.length - 1; i >= 2; --i) {\n            if (A[i - 2] + A[i - 1] > A[i]) {\n                return A[i - 2] + A[i - 1] + A[i];\n            }\n        }\n        return 0;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int largestPerimeter(vector<int>& A) {\n        sort(A.begin(), A.end());\n        for (int i = (int)A.size() - 1; i >= 2; --i) {\n            if (A[i - 2] + A[i - 1] > A[i]) {\n                return A[i - 2] + A[i - 1] + A[i];\n            }\n        }\n        return 0;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar largestPerimeter = function(A) {\n    A.sort((a, b) => a - b);\n    for (let i = A.length - 1; i >= 2; --i) {\n        if (A[i - 2] + A[i - 1] > A[i]) {\n            return A[i - 2] + A[i - 1] + A[i];\n        }\n    }\n    return 0;\n};\n```\n\n```Golang [sol1-Golang]\nfunc largestPerimeter(a []int) int {\n    sort.Ints(a)\n    for i := len(a) - 1; i >= 2; i-- {\n        if a[i-2]+a[i-1] > a[i] {\n            return a[i-2] + a[i-1] + a[i]\n        }\n    }\n    return 0\n}\n```\n\n```C [sol1-C]\nint cmp(void *_a, void *_b) {\n    int a = *(int *)_a, b = *(int *)_b;\n    return a - b;\n}\n\nint largestPerimeter(int *A, int ASize) {\n    qsort(A, ASize, sizeof(int), cmp);\n    for (int i = ASize - 1; i >= 2; --i) {\n        if (A[i - 2] + A[i - 1] > A[i]) {\n            return A[i - 2] + A[i - 1] + A[i];\n        }\n    }\n    return 0;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，其中 $N$ 是数组 $A$ 的长度。\n\n* 空间复杂度：$\\Omega(\\log N)$。",
      "createdAt": "2020-11-28T15:18:20.134127+00:00",
      "hitCount": 21296,
      "identifier": "G0kRTJ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "js-shi-jian-fu-za-du-on-kong-jian-fu-za-oygsy",
        "title": "js 时间复杂度o(n) 空间复杂度o(0)"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "largest-perimeter-triangle"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 23,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "san-jiao-xing-de-zui-da-zhou-chang-by-leetcode-sol",
      "status": "PUBLISHED",
      "summary": "方法一：贪心 + 排序 不失一般性，我们假设三角形的边长 $a,b,c$ 满足 $a \\leq b \\leq c$，那么这三条边组成面积不为零的三角形的充分必要条件为 $a+b>c$。 基于此，我们可以选择枚举三角形的最长边 $c$，而从贪心的角度考虑，我们一定是选「小于 $c$ 的最大的两个数」作为边长 $a$ 和 ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "三角形的最大周长",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 92,
        "id": 501924,
        "viewCount": 17870
      },
      "uuid": "G0kRTJ",
      "videosInfo": []
    }
  }
}
