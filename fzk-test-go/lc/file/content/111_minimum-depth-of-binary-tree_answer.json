{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：深度优先搜索\n\n**思路及解法**\n\n首先可以想到使用深度优先搜索的方法，遍历整棵树，记录最小深度。\n\n对于每一个非叶子节点，我们只需要分别计算其左右子树的最小叶子节点深度。这样就将一个大问题转化为了小问题，可以递归地解决该问题。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minDepth(TreeNode *root) {\n        if (root == nullptr) {\n            return 0;\n        }\n\n        if (root->left == nullptr && root->right == nullptr) {\n            return 1;\n        }\n\n        int min_depth = INT_MAX;\n        if (root->left != nullptr) {\n            min_depth = min(minDepth(root->left), min_depth);\n        }\n        if (root->right != nullptr) {\n            min_depth = min(minDepth(root->right), min_depth);\n        }\n\n        return min_depth + 1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        if (root.left == null && root.right == null) {\n            return 1;\n        }\n\n        int min_depth = Integer.MAX_VALUE;\n        if (root.left != null) {\n            min_depth = Math.min(minDepth(root.left), min_depth);\n        }\n        if (root.right != null) {\n            min_depth = Math.min(minDepth(root.right), min_depth);\n        }\n\n        return min_depth + 1;\n    }\n}\n```\n\n```C [sol1-C]\nint minDepth(struct TreeNode *root) {\n    if (root == NULL) {\n        return 0;\n    }\n\n    if (root->left == NULL && root->right == NULL) {\n        return 1;\n    }\n\n    int min_depth = INT_MAX;\n    if (root->left != NULL) {\n        min_depth = fmin(minDepth(root->left), min_depth);\n    }\n    if (root->right != NULL) {\n        min_depth = fmin(minDepth(root->right), min_depth);\n    }\n\n    return min_depth + 1;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def minDepth(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        min_depth = 10**9\n        if root.left:\n            min_depth = min(self.minDepth(root.left), min_depth)\n        if root.right:\n            min_depth = min(self.minDepth(root.right), min_depth)\n        \n        return min_depth + 1\n```\n\n```golang [sol1-Golang]\nfunc minDepth(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    if root.Left == nil && root.Right == nil {\n        return 1\n    }\n    minD := math.MaxInt32\n    if root.Left != nil {\n        minD = min(minDepth(root.Left), minD)\n    }\n    if root.Right != nil {\n        minD = min(minDepth(root.Right), minD)\n    }\n    return minD + 1\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树的节点数。对每个节点访问一次。\n  \n- 空间复杂度：$O(H)$，其中 $H$ 是树的高度。空间复杂度主要取决于递归时栈空间的开销，最坏情况下，树呈现链状，空间复杂度为 $O(N)$。平均情况下树的高度与节点数的对数正相关，空间复杂度为 $O(\\log N)$。\n\n#### 方法二：广度优先搜索\n\n**思路及解法**\n\n同样，我们可以想到使用广度优先搜索的方法，遍历整棵树。\n\n当我们找到一个叶子节点时，直接返回这个叶子节点的深度。广度优先搜索的性质保证了最先搜索到的叶子节点的深度一定最小。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int minDepth(TreeNode *root) {\n        if (root == nullptr) {\n            return 0;\n        }\n\n        queue<pair<TreeNode *, int> > que;\n        que.emplace(root, 1);\n        while (!que.empty()) {\n            TreeNode *node = que.front().first;\n            int depth = que.front().second;\n            que.pop();\n            if (node->left == nullptr && node->right == nullptr) {\n                return depth;\n            }\n            if (node->left != nullptr) {\n                que.emplace(node->left, depth + 1);\n            }\n            if (node->right != nullptr) {\n                que.emplace(node->right, depth + 1);\n            }\n        }\n\n        return 0;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    class QueueNode {\n        TreeNode node;\n        int depth;\n\n        public QueueNode(TreeNode node, int depth) {\n            this.node = node;\n            this.depth = depth;\n        }\n    }\n\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        Queue<QueueNode> queue = new LinkedList<QueueNode>();\n        queue.offer(new QueueNode(root, 1));\n        while (!queue.isEmpty()) {\n            QueueNode nodeDepth = queue.poll();\n            TreeNode node = nodeDepth.node;\n            int depth = nodeDepth.depth;\n            if (node.left == null && node.right == null) {\n                return depth;\n            }\n            if (node.left != null) {\n                queue.offer(new QueueNode(node.left, depth + 1));\n            }\n            if (node.right != null) {\n                queue.offer(new QueueNode(node.right, depth + 1));\n            }\n        }\n\n        return 0;\n    }\n}\n```\n\n```C [sol2-C]\ntypedef struct {\n    int val;\n    struct TreeNode *node;\n    struct queNode *next;\n} queNode;\n\nvoid init(queNode **p, int val, struct TreeNode *node) {\n    (*p) = (queNode *)malloc(sizeof(queNode));\n    (*p)->val = val;\n    (*p)->node = node;\n    (*p)->next = NULL;\n}\n\nint minDepth(struct TreeNode *root) {\n    if (root == NULL) {\n        return 0;\n    }\n\n    queNode *queLeft, *queRight;\n    init(&queLeft, 1, root);\n    queRight = queLeft;\n    while (queLeft != NULL) {\n        struct TreeNode *node = queLeft->node;\n        int depth = queLeft->val;\n        if (node->left == NULL && node->right == NULL) {\n            return depth;\n        }\n        if (node->left != NULL) {\n            init(&queRight->next, depth + 1, node->left);\n            queRight = queRight->next;\n        }\n        if (node->right != NULL) {\n            init(&queRight->next, depth + 1, node->right);\n            queRight = queRight->next;\n        }\n        queLeft = queLeft->next;\n    }\n    return false;\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def minDepth(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n\n        que = collections.deque([(root, 1)])\n        while que:\n            node, depth = que.popleft()\n            if not node.left and not node.right:\n                return depth\n            if node.left:\n                que.append((node.left, depth + 1))\n            if node.right:\n                que.append((node.right, depth + 1))\n        \n        return 0\n```\n\n```golang [sol2-Golang]\nfunc minDepth(root *TreeNode) int {\n    if root == nil {\n        return 0\n    }\n    queue := []*TreeNode{}\n    count := []int{}\n    queue = append(queue, root)\n    count = append(count, 1)\n    for i := 0; i < len(queue); i++ {\n        node := queue[i]\n        depth := count[i]\n        if node.Left == nil && node.Right == nil {\n            return depth\n        }\n        if node.Left != nil {\n            queue = append(queue, node.Left)\n            count = append(count, depth + 1)\n        }\n        if node.Right != nil {\n            queue = append(queue, node.Right)\n            count = append(count, depth + 1)\n        }\n    }\n    return 0\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树的节点数。对每个节点访问一次。\n  \n- 空间复杂度：$O(N)$，其中 $N$ 是树的节点数。空间复杂度主要取决于队列的开销，队列中的元素个数不会超过树的节点数。",
      "createdAt": "2020-08-20T14:22:35.260929+00:00",
      "hitCount": 107889,
      "identifier": "hwm4XO",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "li-jie-zhe-dao-ti-de-jie-shu-tiao-jian-by-user7208",
        "title": "二叉树的最小深度-理解递归结束条件"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-depth-of-binary-tree"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 58,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-cha-shu-de-zui-xiao-shen-du-by-leetcode-solutio",
      "status": "PUBLISHED",
      "summary": "方法一：深度优先搜索 思路及解法 首先可以想到使用深度优先搜索的方法，遍历整棵树，记录最小深度。 对于每一个非叶子节点，我们只需要分别计算其左右子树的最小叶子节点深度。这样就将一个大问题转化为了小问题，可以递归地解决该问题。 代码 ```C++ [sol1-C++] class Solution { public:  ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二叉树的最小深度",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 172,
        "id": 382646,
        "viewCount": 75522
      },
      "uuid": "hwm4XO",
      "videosInfo": []
    }
  }
}
