{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：位运算\n\n题目要求将给定的整数 $\\textit{num}$ 转换为十六进制数，负整数使用补码运算方法。\n\n在补码运算中，最高位表示符号位，符号位是 $0$ 表示正整数和零，符号位是 $1$ 表示负整数。$32$ 位有符号整数的二进制数有 $32$ 位，由于一位十六进制数对应四位二进制数，因此 $32$ 位有符号整数的十六进制数有 $8$ 位。将 $\\textit{num}$ 的二进制数按照四位一组分成 $8$ 组，依次将每一组转换为对应的十六进制数，即可得到 $\\textit{num}$ 的十六进制数。\n\n假设二进制数的 $8$ 组从低位到高位依次是第 $0$ 组到第 $7$ 组，则对于第 $i$ 组，可以通过 $(\\textit{nums} >> (4 \\times i))~\\&~\\text{0xf}$ 得到该组的值，其取值范围是 $0$ 到 $15$（即十六进制的 $\\text{f}$）。将每一组的值转换为十六进制数的做法如下：\n\n- 对于 $0$ 到 $9$，数字本身就是十六进制数；\n\n- 对于 $10$ 到 $15$，将其转换为 $\\text{a}$ 到 $\\text{f}$ 中的对应字母。\n\n对于负整数，由于最高位一定不是 $0$，因此不会出现前导零。对于零和正整数，可能出现前导零。避免前导零的做法如下：\n\n- 如果 $\\textit{num}=0$，则直接返回 $0$；\n\n- 如果 $\\textit{num}>0$，则在遍历每一组的值时，从第一个不是 $0$ 的值开始拼接成十六进制数。\n\n```Java [sol1-Java]\nclass Solution {\n    public String toHex(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        StringBuffer sb = new StringBuffer();\n        for (int i = 7; i >= 0; i --) {\n            int val = (num >> (4 * i)) & 0xf;\n            if (sb.length() > 0 || val > 0) {\n                char digit = val < 10 ? (char) ('0' + val) : (char) ('a' + val - 10);\n                sb.append(digit);\n            }\n        }\n        return sb.toString();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string ToHex(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 7; i >= 0; i --) {\n            int val = (num >> (4 * i)) & 0xf;\n            if (sb.Length > 0 || val > 0) {\n                char digit = val < 10 ? (char) ('0' + val) : (char) ('a' + val - 10);\n                sb.Append(digit);\n            }\n        }\n        return sb.ToString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar toHex = function(num) {\n    if (num === 0) {\n        return \"0\";\n    }\n    const sb = [];\n    for (let i = 7; i >= 0; i --) {\n        const val = (num >> (4 * i)) & 0xf;\n        if (sb.length > 0 || val > 0) {\n            const digit = val < 10 ? String.fromCharCode('0'.charCodeAt() + val) : String.fromCharCode('a'.charCodeAt() + val - 10);\n            sb.push(digit);\n        }\n    }\n    return sb.join('');\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string toHex(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        string sb;\n        for (int i = 7; i >= 0; i --) {\n            int val = (num >> (4 * i)) & 0xf;\n            if (sb.length() > 0 || val > 0) {\n                char digit = val < 10 ? (char) ('0' + val) : (char) ('a' + val - 10);\n                sb.push_back(digit);\n            }\n        }\n        return sb;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc toHex(num int) string {\n    if num == 0 {\n        return \"0\"\n    }\n    sb := &strings.Builder{}\n    for i := 7; i >= 0; i-- {\n        val := num >> (4 * i) & 0xf\n        if val > 0 || sb.Len() > 0 {\n            var digit byte\n            if val < 10 {\n                digit = '0' + byte(val)\n            } else {\n                digit = 'a' + byte(val-10)\n            }\n            sb.WriteByte(digit)\n        }\n    }\n    return sb.String()\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(k)$，其中 $k$ 是整数的十六进制数的位数，这道题中 $k=8$。无论 $\\textit{num}$ 的值是多少，都需要遍历 $\\textit{num}$ 的十六进制表示的全部数位。\n\n- 空间复杂度：$O(k)$，其中 $k$ 是整数的十六进制数的位数，这道题中 $k=8$。空间复杂度主要取决于中间结果的存储空间，这道题中需要存储 $\\textit{num}$ 的十六进制表示中的除了前导零以外的全部数位。",
      "createdAt": "2021-10-01T14:14:03.897028+00:00",
      "hitCount": 20885,
      "identifier": "lKU4vx",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-yi-ti-shuang-jie-jin-z-d93o",
        "title": "【宫水三叶】一题双解 :「进制转换」&「分组换算」"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "convert-a-number-to-hexadecimal"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 32,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "shu-zi-zhuan-huan-wei-shi-liu-jin-zhi-sh-2srt",
      "status": "PREPUBLISH",
      "summary": "方法一：位运算 题目要求将给定的整数 $\\textit{num}$ 转换为十六进制数，负整数使用补码运算方法。 在补码运算中，最高位表示符号位，符号位是 $0$ 表示正整数和零，符号位是 $1$ 表示负整数。$32$ 位有符号整数的二进制数有 $32$ 位，由于一位十六进制数对应四位二进制数，因此 $32$ 位有符号整",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Bit Manipulation",
          "nameTranslated": "位运算",
          "slug": "bit-manipulation",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "数字转换为十六进制数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 79,
        "id": 1027297,
        "viewCount": 14405
      },
      "uuid": "lKU4vx",
      "videosInfo": []
    }
  }
}
