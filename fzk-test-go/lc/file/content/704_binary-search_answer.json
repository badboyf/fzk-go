{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：二分查找\n\n在升序数组 $\\textit{nums}$ 中寻找目标值 $\\textit{target}$，对于特定下标 $i$，比较 $\\textit{nums}[i]$ 和 $\\textit{target}$ 的大小：\n\n- 如果 $\\textit{nums}[i] = \\textit{target}$，则下标 $i$ 即为要寻找的下标；\n\n- 如果 $\\textit{nums}[i] > \\textit{target}$，则 $\\textit{target}$ 只可能在下标 $i$ 的左侧；\n\n- 如果 $\\textit{nums}[i] < \\textit{target}$，则 $\\textit{target}$ 只可能在下标 $i$ 的右侧。\n\n基于上述事实，可以在有序数组中使用二分查找寻找目标值。\n\n二分查找的做法是，定义查找的范围 $[\\textit{left}, \\textit{right}]$，初始查找范围是整个数组。每次取查找范围的中点 $\\textit{mid}$，比较 $\\textit{nums}[\\textit{mid}]$ 和 $\\textit{target}$ 的大小，如果相等则 $\\textit{mid}$ 即为要寻找的下标，如果不相等则根据 $\\textit{nums}[\\textit{mid}]$ 和 $\\textit{target}$ 的大小关系将查找范围缩小一半。\n\n由于每次查找都会将查找范围缩小一半，因此二分查找的时间复杂度是 $O(\\log n)$，其中 $n$ 是数组的长度。\n\n二分查找的条件是查找范围不为空，即 $\\textit{left} \\le \\textit{right}$。如果 $\\textit{target}$ 在数组中，二分查找可以保证找到 $\\textit{target}$，返回 $\\textit{target}$ 在数组中的下标。如果 $\\textit{target}$ 不在数组中，则当 $\\textit{left} > \\textit{right}$ 时结束查找，返回 $-1$。\n\n```Java [sol1-Java]\nclass Solution {\n    public int search(int[] nums, int target) {\n        int low = 0, high = nums.length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int Search(int[] nums, int target) {\n        int low = 0, high = nums.Length - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int low = 0, high = nums.size() - 1;\n        while(low <= high){\n            int mid = (high - low) / 2 + low;\n            int num = nums[mid];\n            if (num == target) {\n                return mid;\n            } else if (num > target) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar search = function(nums, target) {\n    let low = 0, high = nums.length - 1;\n    while (low <= high) {\n        const mid = Math.floor((high - low) / 2) + low;\n        const num = nums[mid];\n        if (num === target) {\n            return mid;\n        } else if (num > target) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n};\n```\n\n```go [sol1-Golang]\nfunc search(nums []int, target int) int {\n    low, high := 0, len(nums)-1\n    for low <= high {\n        mid := (high-low)/2 + low\n        num := nums[mid]\n        if num == target {\n            return mid\n        } else if num > target {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        low, high = 0, len(nums) - 1\n        while low <= high:\n            mid = (high - low) // 2 + low\n            num = nums[mid]\n            if num == target:\n                return mid\n            elif num > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，其中 $n$ 是数组的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-09-05T15:52:36.128708+00:00",
      "hitCount": 59518,
      "identifier": "823S3e",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hua-jie-suan-fa-704-er-fen-cha-zhao-by-guanpengchn",
        "title": " 画解算法：704. 二分查找"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "binary-search"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 36,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-fen-cha-zhao-by-leetcode-solution-f0xw",
      "status": "PUBLISHED",
      "summary": "方法一：二分查找 在升序数组 $\\textit{nums}$ 中寻找目标值 $\\textit{target}$，对于特定下标 $i$，比较 $\\textit{nums}[i]$ 和 $\\textit{target}$ 的大小： 如果 $\\textit{nums}[i] = \\textit{target}$，则下标 $i",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二分查找",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 79,
        "id": 980494,
        "viewCount": 42045
      },
      "uuid": "823S3e",
      "videosInfo": []
    }
  }
}
