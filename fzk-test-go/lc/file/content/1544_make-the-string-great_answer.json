{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路与算法**\n\n从左到右扫描字符串 `s` 的每个字符。扫描过程中，维护当前整理好的字符串，记为 `ret`。当扫描到字符 `ch` 时，有两种情况：\n- 字符 `ch` 与字符串 `ret` 的最后一个字符互为同一个字母的大小写：根据题意，两个字符都要在整理过程中被删除，因此要弹出 `ret` 的最后一个字符；\n- 否则：两个字符都需要被保留，因此要将字符 `ch` 附加在字符串 `ret` 的后面。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string makeGood(string s) {\n        string ret;\n        for (char ch: s) {\n            if (!ret.empty() && tolower(ret.back()) == tolower(ch) && ret.back() != ch) {\n                ret.pop_back();\n            }\n            else {\n                ret.push_back(ch);\n            }\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String makeGood(String s) {\n        StringBuffer ret = new StringBuffer();\n        int retIndex = -1;\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char ch = s.charAt(i);\n            if (ret.length() > 0 && Character.toLowerCase(ret.charAt(retIndex)) == Character.toLowerCase(ch) && ret.charAt(retIndex) != ch) {\n                ret.deleteCharAt(retIndex);\n                retIndex--;\n            } else {\n                ret.append(ch);\n                retIndex++;\n            }\n        }\n        return ret.toString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar makeGood = function(s) {\n    const len = s.length;\n    const ret = [];\n    let i = 0;\n    while (i < len) {\n        if (ret.length > 0\n        && ret[ret.length - 1].toLowerCase() === s.charAt(i).toLowerCase()\n        && ret[ret.length - 1] !== s.charAt(i)\n        ) {\n            ret.pop();\n        } else {\n            ret.push(s.charAt(i));\n        }\n        i += 1;\n    }\n    return ret.join('');\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def makeGood(self, s: str) -> str:\n        ret = list()\n        for ch in s:\n            if ret and ret[-1].lower() == ch.lower() and ret[-1] != ch:\n                ret.pop()\n            else:\n                ret.append(ch)\n        return \"\".join(ret)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为字符串 `s` 的长度。我们要遍历字符串 `s` 的每一个字符，而对每个字符都只需要常数时间的操作。\n\n- 空间复杂度：$O(N)$ 或 $O(1)$，取决于使用语言的字符串类型是否是可修改的。",
      "createdAt": "2020-08-20T12:47:59.774293+00:00",
      "hitCount": 8385,
      "identifier": "VF6KzN",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zhan-zheng-li-zi-fu-chuan-by-demigodliu-5xwr",
        "title": "【栈】整理字符串"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "make-the-string-great"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "zheng-li-zi-fu-chuan-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 思路与算法 从左到右扫描字符串 s 的每个字符。扫描过程中，维护当前整理好的字符串，记为 ret。当扫描到字符 ch 时，有两种情况： - 字符 ch 与字符串 ret 的最后一个字符互为同一个字母的大小写：根据题意，两个字符都要在整理过程中被删除，因此要弹出 ret 的最后一个字符； - 否则：两个字符",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "整理字符串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 17,
        "id": 382513,
        "viewCount": 6442
      },
      "uuid": "VF6KzN",
      "videosInfo": []
    }
  }
}
