{
  "data": {
    "question": {
      "__typename": "QuestionNode",
      "book": null,
      "boundTopicId": 1235,
      "categoryTitle": "Database",
      "codeSnippets": [
        {
          "__typename": "CodeSnippetNode",
          "code": "# Write your MySQL query statement below",
          "lang": "MySQL",
          "langSlug": "mysql"
        }
      ],
      "companyTagStats": null,
      "content": "<p>Table: <code>Person</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to <strong>delete</strong> all the duplicate emails, keeping only one unique email with the smallest <code>id</code>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\n<strong>Output:</strong> \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n<strong>Explanation:</strong> john@example.com is repeated two times. We keep the row with the smallest Id = 1.\n</pre>\n",
      "contributors": [],
      "dailyRecordStatus": null,
      "difficulty": "Easy",
      "dislikes": 0,
      "editorType": "CKEDITOR",
      "enableRunCode": true,
      "envInfo": "{\"mysql\":[\"MySQL\",\"<p>\\u7248\\u672c\\uff1a<code>MySQL 8.0<\\/code><\\/p>\"]}",
      "exampleTestcases": "{\"headers\": {\"Person\": [\"id\", \"email\"]}, \"rows\": {\"Person\": [[1, \"john@example.com\"], [2, \"bob@example.com\"], [3, \"john@example.com\"]]}}",
      "hints": [],
      "isDailyQuestion": false,
      "isLiked": null,
      "isPaidOnly": false,
      "isSubscribed": false,
      "judgeType": "large",
      "judgerAvailable": true,
      "langToValidPlayground": "{\"cpp\": false, \"java\": false, \"python\": false, \"python3\": false, \"mysql\": false, \"mssql\": false, \"oraclesql\": false, \"c\": false, \"csharp\": false, \"javascript\": false, \"ruby\": false, \"bash\": false, \"swift\": false, \"golang\": false, \"scala\": false, \"html\": false, \"pythonml\": false, \"kotlin\": false, \"rust\": false, \"php\": false, \"typescript\": false, \"racket\": false, \"erlang\": false, \"elixir\": false}",
      "likes": 424,
      "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Person (Id int, Email varchar(255))\"\n  ],\n  \"mssql\": [\n    \"Create table Person (Id int, Email varchar(255))\"\n  ],\n  \"oraclesql\": [\n    \"Create table Person (Id int, Email varchar(255))\"\n  ],\n  \"database\": true,\n  \"manual\": true,\n  \"languages\": [\n    \"mysql\"\n  ]\n}",
      "mysqlSchemas": [
        "Create table If Not Exists Person (Id int, Email varchar(255))",
        "Truncate table Person",
        "insert into Person (id, email) values ('1', 'john@example.com')",
        "insert into Person (id, email) values ('2', 'bob@example.com')",
        "insert into Person (id, email) values ('3', 'john@example.com')"
      ],
      "questionFrontendId": "196",
      "questionId": "196",
      "sampleTestCase": "{\"headers\": {\"Person\": [\"id\", \"email\"]}, \"rows\": {\"Person\": [[1, \"john@example.com\"], [2, \"bob@example.com\"], [3, \"john@example.com\"]]}}",
      "similarQuestions": "[]",
      "solution": {
        "__typename": "ArticleNode",
        "canSeeDetail": true,
        "id": "98"
      },
      "stats": "{\"totalAccepted\": \"107.5K\", \"totalSubmission\": \"161.7K\", \"totalAcceptedRaw\": 107526, \"totalSubmissionRaw\": 161710, \"acRate\": \"66.5%\"}",
      "status": null,
      "style": "LEETCODE",
      "title": "Delete Duplicate Emails",
      "titleSlug": "delete-duplicate-emails",
      "topicTags": [
        {
          "__typename": "TopicTagNode",
          "name": "Database",
          "slug": "database",
          "translatedName": "数据库"
        }
      ],
      "translatedContent": "<p>编写一个 SQL 查询，来删除&nbsp;<code>Person</code>&nbsp;表中所有重复的电子邮箱，重复的邮箱里只保留&nbsp;<strong>Id&nbsp;</strong><em>最小&nbsp;</em>的那个。</p>\n\n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nId 是这个表的主键。\n</pre>\n\n<p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:</p>\n\n<pre>+----+------------------+\n| Id | Email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>执行 SQL 之后，输出是整个 <code>Person</code>&nbsp;表。</li>\n\t<li>使用 <code>delete</code> 语句。</li>\n</ul>\n",
      "translatedTitle": "删除重复的电子邮箱",
      "ugcQuestionId": null
    }
  }
}
