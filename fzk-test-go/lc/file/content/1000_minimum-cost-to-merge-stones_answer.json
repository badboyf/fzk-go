{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Ellie Feng",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/s7ven/avatar_1594613934.png",
          "userSlug": "elliefeng"
        },
        "username": "EllieFeng"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路\n第1000题，Mark一下。\n非常好的一道区间DP题目。题目意思很好理解，在一堆石子里面每次连续取$K$堆合并，求合并到最后一堆最小的合并成本。\n我们从结果反向来倒退，如果要合并至一堆，那么必定是从K堆石子合并而来，我们把这个$K$堆表示为$K-1$堆和$1$堆，继续往前推导，$K-1$堆的每一堆都可能从$K$堆合并而来，所以对于有解的情况下合并情况如下：\n$1 + (1 + (1 + (1 + Z))$ 而这里面的Z一定是K-1的倍数，所以就是要有解的话，``(n - 1) % (K - 1) == 0``。简单理解就是除了一堆，剩下的堆数必定是$K-1$堆的倍数。\n知道以上前提后，我们特判掉无解情况，剩下的都是合法的解。\n由上面推导的过程可知，所有的石子合并都是从$1$堆和$K-1$堆合并而来，我们令$f[i][j][k]$为在$[i, j]$这个区间合并成k堆石子的最小成本，按照区间DP常用的套路，先枚举区间长度$len$,再枚举左端点$i$，再枚举$k$堆石子数，再枚举分界点$m$，所以我们四层循环有：\n```C++\nfor (int len = 2; len <= n; ++len) {\n    for (int i = 0; i <= n - len; ++i) {\n        int j = i + len - 1;\n        for (int k = 2; k <= K; ++k) {\n            for (int m = i; m < j; m++) {\n```\n转移方程为：``f[i][j][k] = min(f[i][j][k], f[i][m][1] + f[m + 1][j][k - 1])``，意思就是$k$堆需要从$1$堆和$k-1$堆相加而来，**注意此处不是合并！合并的是只有K堆才可以合并（大K不是小k）**，依次枚举，当$k==K$时，此时我们再计算出这K堆合并的结果：\n``f[i][j][1] = f[i][j][K] + prefix[j + 1] - prefix[i]``\n最后我们返回$f[0][n-1][1]$即可。\n\n### 优化一（m迭代步长）\n一个合法的合并是由左边1堆和右边K-1堆转换而来，而$f[i][m][1]$这个状态表示的$[i,m]$区间合并成$1$堆的最小成本，按照题意只有$K$堆才能合并，所以$[i,m]$区间的长度一定是K的倍数，所以$m$的循环步长可以优化为$k-1$而不是之前的$++$\n\n### 优化二（空间压缩）\n将三维DP降维至两维，去掉第三维k的空间，令$f[i][j]$表示为$[i,j]$空间内**尽可能多合并的最小成本**。做此优化的前提和上面提到限制一致：只有K堆才能合并。所以合并的情况是确定的，可以与k无关。\n转移方程为：``f[i][j] = min(f[i][j], f[i][m] + f[m + 1][j])``，不过此时我们要判断下当[i,j]区间是否可以合并，如果可以做一次合并。可以合并的条件是：``(len - 1) % (K - 1) == 0``（与题解最开始特判的情况一致）\n详细代码贴在代码二处。\n\nPS:题解思想和代码参考花花酱。\n \n### 代码一\n\n```cpp\nclass Solution {\npublic:\n    int mergeStones(vector<int>& stones, int K) {\n        int n = stones.size();\n        if ((n - 1) % (K - 1) != 0) return -1;\n        vector<int> prefix(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            prefix[i] = prefix[i - 1] + stones[i - 1];\n        }\n        vector<vector<vector<int>>> f(n, vector<vector<int>>(n, vector<int>(K + 1, 0x3f3f3f3f)));\n        for (int i = 0; i < n; ++i) {\n            f[i][i][1] = 0;\n        }\n        for (int len = 2; len <= n; ++len) {\n            for (int i = 0; i <= n - len; ++i) {\n                int j = i + len - 1;\n                for (int k = 2; k <= K; ++k) {\n                    for (int m = i; m < j; m += K - 1) {\n                        f[i][j][k] = min(f[i][j][k], f[i][m][1] + f[m + 1][j][k - 1]);\n                    }\n                }\n                f[i][j][1] = f[i][j][K] + prefix[j + 1] - prefix[i];\n            }\n        }\n        return f[0][n - 1][1];\n    }\n};\n```\n### 代码二\n```c++\nclass Solution {\npublic:\n    int mergeStones(vector<int>& stones, int K) {\n        int n = stones.size();\n        if ((n - 1) % (K - 1) != 0) return -1;\n        vector<int> prefix(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            prefix[i] = prefix[i - 1] + stones[i - 1];\n        }\n        vector<vector<int>> f(n, vector<int>(n, 0x3f3f3f3f));\n        for (int i = 0; i < n; ++i) {\n            f[i][i] = 0;\n        }\n        for (int len = 2; len <= n; ++len) {\n            for (int i = 0; i <= n - len; ++i) {\n                int j = i + len - 1;\n                for (int m = i; m < j; m += K - 1) {\n                    f[i][j] = min(f[i][j], f[i][m] + f[m + 1][j]);\n                }\n                if ((len - 1) % (K - 1) == 0) {\n                    f[i][j] += prefix[j + 1] - prefix[i];\n                }\n            }\n        }\n        return f[0][n - 1];\n    }\n};\n```",
      "createdAt": "2021-10-05T09:27:02.723162+00:00",
      "hitCount": 647,
      "identifier": "cN1dbs",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-dong-you-yi-dao-nan-yi-bu-bu-shuo-ming-si-lu-he",
        "title": "（详解）由易到难，一步步说明思路和细节"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-cost-to-merge-stones"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": true,
      "slug": "c-acde-di-1000ti-xian-gei-di-1000ti-jing-ecs9",
      "status": "PREPUBLISH",
      "summary": "解题思路\n第1000题，Mark一下。\n非常好的一道区间DP题目。题目意思很好理解，在一堆石子里面每次连续取K堆合并，求合并到最后一堆最小的合并成本。\n我们从结果反向来倒退，如果要合并至一堆，那么必定是从K堆石子合并而来，我们把这个K堆表示为K-1堆和1堆，继续往前推导，K-1堆的每一堆都可能从K堆合并而来，所以对于有",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "【C++】AC的第1000题献给第1000题，经典区间DP",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1032073,
        "viewCount": 425
      },
      "uuid": "cN1dbs",
      "videosInfo": []
    }
  }
}
