{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "lhrst",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/lhrst/avatar_1586416274.png",
          "userSlug": "lhrst"
        },
        "username": "lhrst"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "题目翻译应该背锅。\r\n正确的理解是，2n个球，随机挑选n个，那么这n个中所有的颜色数量等于另外n个中所有的**颜色数量**的概率。即如果一个箱子里有三种不同的颜色比如红黄蓝，那另外一个箱子里也必须有三种不同的颜色，比如绿红蓝。\r\n第一想法就是**组合数**。上网查询找回高中组合数学知识：\r\n![ceb34a4567428f8d4f9593bcdc4aec5a.svg](https://pic.leetcode-cn.com/96e6253065ed0a8cc80ac65c4fb8518d32a5c59735e0a2cf2fc818c215596bcb-ceb34a4567428f8d4f9593bcdc4aec5a.svg)\r\n![87ca694de378801e74dcde18e98dc34c.svg](https://pic.leetcode-cn.com/e3a2721d25092a883fae64416330ce4eea43d6f814fc1988076a359db0411bd2-87ca694de378801e74dcde18e98dc34c.svg)\r\n好的我们现在知道最多48个球的时候，一共有C(48, 24)种挑选方法,拿python算了一下大概是10^13数量级，似乎也不多，然后我们要在**这么多挑选方法中**找到那些左边右边颜色数量相同的。\r\n方法就是dfs，一层一层找，举例来说：（3，2，1）\r\n第一层是3个颜色为0的球。\r\n我们遍历它，可以找到4种放法，即放0个到第一个箱子，放3个到第二个箱子，或者放1个到第一个箱子，放2个到第二个箱子，或者放2个到第一个箱子，放1个到第二个箱子，或者最后，放3个到第一个箱子，放2个到第二个箱子。\r\n一共就这四种情况，我们分别算出在这四种情况下**满足条件的概率**，再乘以这四种情况的**权重**（即这四种情况分别出现的概率）即可。\r\n假设我们的深搜函数是 dfs(balls, m, greatersum, greatercolor)\r\nballs是不同的球有多少个，m是当前搜索的位置（第几种颜色的球），greatersum是左边的箱子比右边的箱子**多出**多少个球，而greatercolor是左边的箱子比右边**多出**多少种颜色。\r\n我们只有在后两个参数**都为0**的时候，才可以说是一种满足我们条件的情况。\r\n那么，在第一层，我们要返回的概率就是：\r\n( combination(3, 0)/powerof2[3] )*dfs(balls, 2, -3, -1)\r\n+( combination(3, 1)/powerof2[3] )*dfs(balls, 2, -1, 0)\r\n+( combination(3, 2)/powerof2[3] )*dfs(balls, 2, 1, 0)\r\n+( combination(3, 3)/powerof2[3] )*dfs(balls, 2, 3, 0)\r\n前面一部分代表着在所有选择方法中，选择出0/1/2/3个颜色为0的球放在左边的箱子（同时会有3/2/1/0个颜色为0的球放在右边的箱子）的概率，后面一部分代表在这种前提下，能够满足我们要求（最终两边球的个数相等以及球的颜色数相等）的概率。加起来返回就是 **在所有的选择情况下，左右箱子个数相同且颜色数相同的概率**，注意，这里的**所有情况**包括了左边箱子有全部的球，右边的箱子一个都没有这种情况，我们再将这个概率除以两边放的球数量相同的概率（即如果一共有2n个球，就要除以C(2n, n)/2^(2n)），就是题目要我们求的结果。\r\n上代码：\r\n```\r\nclass Solution {\r\npublic:\r\n    int left[10]; //剩余的球的数量，用于剪枝\r\n    double powerof2[15] = {1, 2, 4, 8, 16,32, 64, 128, 256,512,1024,2048,4096,8192,16384}; //2的幂，用来算所有组合情况\r\n    int n = 0;\r\n    long long factorial[15];//算阶乘，用于计算组合数\r\n    double getProbability(vector<int>& balls) {\r\n        calculatefactorial();\r\n        n = balls.size();\r\n        int sum = 0; //一共有多少个球，用于最后的除法\r\n        for(int i = 0; i < n; i++)\r\n            sum += balls[i];\r\n        double q = 1; //计算出C(2n, n)/2^(2n)，即满足左n右n的概率\r\n        for(int i = 1; i <= sum/2; i++){\r\n            q *= (i+sum/2)*1.0/i/4;\r\n        }\r\n        left[n-1] = balls[n-1]; //计算剩余球数，用于剪枝\r\n        for(int i = n-2; i >= 0; i--)\r\n            left[i] = left[i+1] + balls[i];\r\n        return dfs(balls, 0, 0, 0)/q;\r\n    }\r\n    //计算阶乘，不解释\r\n    void calculatefactorial(){\r\n        factorial[0] = 1;\r\n        for(int i = 1; i <= 10; i++)\r\n            factorial[i] = i * factorial[i-1];\r\n    }\r\n    //根据公式算组合数\r\n    int combination(int a, int b){\r\n        return factorial[a]/(factorial[b]*factorial[a-b]);\r\n    }\r\n    //深搜函数，balls是题目给的数组，m代表当前搜索颜色m，greatersum是左边的箱子比右边箱子多几个球，greatercolor是左边比右边多几种颜色\r\n    double dfs(vector<int> & balls, int m, int greatersum, int greatercolor){\r\n        if(m == n) //只有左边右边球的数量和颜色种类的数量相等时才算，否则免谈\r\n            return greatersum == 0 && greatercolor == 0;\r\n        //剪枝，假设目前还剩余x个球没有分配，但是左边比右边的球多的数量，或者右边箱子比左边箱子多出的球的数量大于x，那么我们无论怎么分配，都不可能在最后满足左右球的数量相等这个条件，所以剪枝\r\n        if(abs(greatersum) > left[m])\r\n            return 0;\r\n        double result = 0;\r\n        //计算取不同数量的球放在左边，最后满足条件的概率 （感谢来自 @金木盐 的改进）\r\n        for(int i = 0; i <= balls[m];i ++){\r\n            int color = i == 0 ? -1 : (i == balls[m] ? 1 : 0);\r\n            result += (combination(balls[m], i) / powerof2[balls[m]]) * \r\n                dfs(balls, m + 1, greatersum + i - (balls[m] - i), greatercolor + color);\r\n        }\r\n        /* 原来的写法需要写三次，太不简洁了\r\n        for(int i = 0; i <= balls[m];i ++){\r\n            if(i == 0){\r\n                result +=  dfs(balls, m+1, greatersum-balls[m], greatercolor-1)/powerof2[balls[m]];\r\n            }\r\n            else if(i == balls[m]){\r\n                result +=  dfs(balls, m+1, greatersum+balls[m], greatercolor+1)/powerof2[balls[m]];\r\n            }\r\n            else{\r\n                result += (combination(balls[m], i)/powerof2[balls[m]]) * dfs(balls, m+1, greatersum + (i-(balls[m]-i)), greatercolor);\r\n            }\r\n        }\r\n        */\r\n        return result;\r\n    }\r\n\r\n};\r\n```\r\n\r\n\r\n\r\n",
      "createdAt": "2020-05-31T05:29:09.492661+00:00",
      "hitCount": 2439,
      "identifier": "wBVw9F",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-dp-si-lu-gai-shu-dai-ma-by-zqy1018",
        "title": "C++ DP 思路概述+代码"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 22,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "c-dfs-zu-he-shu-xue-si-lu-dai-ma-by-lhrst",
      "status": "PUBLISHED",
      "summary": "题目翻译应该背锅。\n正确的理解是，2n个球，随机挑选n个，那么这n个中所有的颜色数量等于另外n个中所有的颜色数量的概率。即如果一个箱子里有三种不同的颜色比如红黄蓝，那另外一个箱子里也必须有三种不同的颜色，比如绿红蓝。\n第一想法就是组合数。上网查询找回高中组合数学知识：\n\n\n好的我们现在知道最多48个球的时候，一共有C(",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "c++ dfs 组合数学？（思路+代码）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 13,
        "id": 268886,
        "viewCount": 1802
      },
      "uuid": "wBVw9F",
      "videosInfo": []
    }
  }
}
