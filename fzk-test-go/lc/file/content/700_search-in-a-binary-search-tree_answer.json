{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：递归\n\n二叉搜索树满足如下性质：\n\n- 左子树所有节点的元素值均小于根的元素值；\n- 右子树所有节点的元素值均大于根的元素值。\n\n据此可以得到如下算法：\n\n- 若 $\\textit{root}$ 为空则返回空节点；\n- 若 $\\textit{val}=\\textit{root}.\\textit{val}$，则返回 $\\textit{root}$；\n- 若 $\\textit{val}<\\textit{root}.\\textit{val}$，递归左子树；\n- 若 $\\textit{val}>\\textit{root}.\\textit{val}$，递归右子树。\n\n```Python [sol1-Python3]\nclass Solution:\n    def searchBST(self, root: TreeNode, val: int) -> TreeNode:\n        if root is None:\n            return None\n        if val == root.val:\n            return root\n        return self.searchBST(root.left if val < root.val else root.right, val)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    TreeNode *searchBST(TreeNode *root, int val) {\n        if (root == nullptr) {\n            return nullptr;\n        }\n        if (val == root->val) {\n            return root;\n        }\n        return searchBST(val < root->val ? root->left : root->right, val);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n        if (root == null) {\n            return null;\n        }\n        if (val == root.val) {\n            return root;\n        }\n        return searchBST(val < root.val ? root.left : root.right, val);\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public TreeNode SearchBST(TreeNode root, int val) {\n        if (root == null) {\n            return null;\n        }\n        if (val == root.val) {\n            return root;\n        }\n        return SearchBST(val < root.val ? root.left : root.right, val);\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc searchBST(root *TreeNode, val int) *TreeNode {\n    if root == nil {\n        return nil\n    }\n    if val == root.Val {\n        return root\n    }\n    if val < root.Val {\n        return searchBST(root.Left, val)\n    }\n    return searchBST(root.Right, val)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar searchBST = function(root, val) {\n    if (!root) {\n        return null;\n    }\n    if (val === root.val) {\n        return root;\n    }\n    return searchBST(val < root.val ? root.left : root.right, val);\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是二叉搜索树的节点数。最坏情况下二叉搜索树是一条链，且要找的元素比链末尾的元素值还要小（大），这种情况下我们需要递归 $N$ 次。\n\n- 空间复杂度：$O(N)$。最坏情况下递归需要 $O(N)$ 的栈空间。\n\n#### 方法二：迭代\n\n我们将方法一的递归改成迭代写法：\n\n- 若 $\\textit{root}$ 为空则跳出循环，并返回空节点；\n- 若 $\\textit{val}=\\textit{root}.\\textit{val}$，则返回 $\\textit{root}$；\n- 若 $\\textit{val}<\\textit{root}.\\textit{val}$，将 $\\textit{root}$ 置为 $\\textit{root}.\\textit{left}$；\n- 若 $\\textit{val}>\\textit{root}.\\textit{val}$，将 $\\textit{root}$ 置为 $\\textit{root}.\\textit{right}$。\n\n```Python [sol2-Python3]\nclass Solution:\n    def searchBST(self, root: TreeNode, val: int) -> TreeNode:\n        while root:\n            if val == root.val:\n                return root\n            root = root.left if val < root.val else root.right\n        return None\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    TreeNode *searchBST(TreeNode *root, int val) {\n        while (root) {\n            if (val == root->val) {\n                return root;\n            }\n            root = val < root->val ? root->left : root->right;\n        }\n        return nullptr;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n        while (root != null) {\n            if (val == root.val) {\n                return root;\n            }\n            root = val < root.val ? root.left : root.right;\n        }\n        return null;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public TreeNode SearchBST(TreeNode root, int val) {\n        while (root != null) {\n            if (val == root.val) {\n                return root;\n            }\n            root = val < root.val ? root.left : root.right;\n        }\n        return null;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc searchBST(root *TreeNode, val int) *TreeNode {\n    for root != nil {\n        if val == root.Val {\n            return root\n        }\n        if val < root.Val {\n            root = root.Left\n        } else {\n            root = root.Right\n        }\n    }\n    return nil\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar searchBST = function(root, val) {\n    while (root) {\n        if (val === root.val) {\n            return root;\n        }\n        root = val < root.val ? root.left : root.right;\n    }\n    return null;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是二叉搜索树的节点数。最坏情况下二叉搜索树是一条链，且要找的元素比链末尾的元素值还要小（大），这种情况下我们需要迭代 $N$ 次。\n\n- 空间复杂度：$O(1)$。没有使用额外的空间。",
      "createdAt": "2021-11-25T03:16:57.494244+00:00",
      "hitCount": 12153,
      "identifier": "766Uoe",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-er-cha-shu-de-sou-suo-8z7hj",
        "title": "【宫水三叶】二叉树的搜索"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "search-in-a-binary-search-tree"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 13,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-cha-sou-suo-shu-zhong-de-sou-suo-by-l-d8zi",
      "status": "PUBLISHED",
      "summary": "方法一：递归 二叉搜索树满足如下性质： 左子树所有节点的元素值均小于根的元素值； 右子树所有节点的元素值均大于根的元素值。 据此可以得到如下算法： 若 $\\textit{root}$ 为空则返回空节点； 若 $\\textit{val}=\\textit{root}.\\textit{val}$，则返回 $\\textit{r",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search Tree",
          "nameTranslated": "二叉搜索树",
          "slug": "binary-search-tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Recursion",
          "nameTranslated": "递归",
          "slug": "recursion",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Tree",
          "nameTranslated": "二叉树",
          "slug": "binary-tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二叉搜索树中的搜索",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 58,
        "id": 1121178,
        "viewCount": 9883
      },
      "uuid": "766Uoe",
      "videosInfo": []
    }
  }
}
