{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![LeetCode 200 ZYH.mp4](0a3f7b6f-abd0-4af8-87ef-89c565b967d4)\n### 📖 文字题解\n#### 方法一：深度优先搜索\n\n我们可以将二维网格看成一个无向图，竖直或水平相邻的 $1$ 之间有边相连。\n\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 $1$，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 $1$ 都会被重新标记为 $0$。\n\n最终岛屿的数量就是我们进行深度优先搜索的次数。\n\n下面的动画展示了整个算法。\n\n<![image.png](https://pic.leetcode-cn.com/5dae0de2a06f4eae5113f9cadfa5c51bbcf0b9347c5861aa73c93d7bc1d50b34-image.png),![image.png](https://pic.leetcode-cn.com/61a98091fe75de107bf886a608e87d5bb29d810b9e7eb1e00c541f49194ea543-image.png),![image.png](https://pic.leetcode-cn.com/6d060f275561dc390841f78d85124fd193efb0801ea2dc865b2767f1093e4f3a-image.png),![image.png](https://pic.leetcode-cn.com/233368eab82832268c3c7266fd7fe65c78626de9fd89cb90b3f36a7b4e52860d-image.png),![image.png](https://pic.leetcode-cn.com/bf055c3d5f6b310f6a110ada65d503de6d7793276f5638731c81c53b4276b835-image.png),![image.png](https://pic.leetcode-cn.com/195ba530a5350e0a8f8e372319d061c85316c1064017d5c00d7cfc2b0c055de6-image.png),![image.png](https://pic.leetcode-cn.com/c21a88bde9450ad83d6164c2df4677b16154fa5990408459a2a45982b9cd70fd-image.png),![image.png](https://pic.leetcode-cn.com/0cfddec2d15ed9a56c434f470ff07eb3dfc83dccbda0160583d1bce469077274-image.png)>\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    void dfs(vector<vector<char>>& grid, int r, int c) {\n        int nr = grid.size();\n        int nc = grid[0].size();\n\n        grid[r][c] = '0';\n        if (r - 1 >= 0 && grid[r-1][c] == '1') dfs(grid, r - 1, c);\n        if (r + 1 < nr && grid[r+1][c] == '1') dfs(grid, r + 1, c);\n        if (c - 1 >= 0 && grid[r][c-1] == '1') dfs(grid, r, c - 1);\n        if (c + 1 < nc && grid[r][c+1] == '1') dfs(grid, r, c + 1);\n    }\n\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int nr = grid.size();\n        if (!nr) return 0;\n        int nc = grid[0].size();\n\n        int num_islands = 0;\n        for (int r = 0; r < nr; ++r) {\n            for (int c = 0; c < nc; ++c) {\n                if (grid[r][c] == '1') {\n                    ++num_islands;\n                    dfs(grid, r, c);\n                }\n            }\n        }\n\n        return num_islands;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    void dfs(char[][] grid, int r, int c) {\n        int nr = grid.length;\n        int nc = grid[0].length;\n\n        if (r < 0 || c < 0 || r >= nr || c >= nc || grid[r][c] == '0') {\n            return;\n        }\n\n        grid[r][c] = '0';\n        dfs(grid, r - 1, c);\n        dfs(grid, r + 1, c);\n        dfs(grid, r, c - 1);\n        dfs(grid, r, c + 1);\n    }\n\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0) {\n            return 0;\n        }\n\n        int nr = grid.length;\n        int nc = grid[0].length;\n        int num_islands = 0;\n        for (int r = 0; r < nr; ++r) {\n            for (int c = 0; c < nc; ++c) {\n                if (grid[r][c] == '1') {\n                    ++num_islands;\n                    dfs(grid, r, c);\n                }\n            }\n        }\n\n        return num_islands;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def dfs(self, grid, r, c):\n        grid[r][c] = 0\n        nr, nc = len(grid), len(grid[0])\n        for x, y in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:\n            if 0 <= x < nr and 0 <= y < nc and grid[x][y] == \"1\":\n                self.dfs(grid, x, y)\n\n    def numIslands(self, grid: List[List[str]]) -> int:\n        nr = len(grid)\n        if nr == 0:\n            return 0\n        nc = len(grid[0])\n\n        num_islands = 0\n        for r in range(nr):\n            for c in range(nc):\n                if grid[r][c] == \"1\":\n                    num_islands += 1\n                    self.dfs(grid, r, c)\n        \n        return num_islands\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(MN)$，其中 $M$ 和 $N$ 分别为行数和列数。\n\n* 空间复杂度：$O(MN)$，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到 $M N$。\n\n#### 方法二：广度优先搜索\n\n同样地，我们也可以使用广度优先搜索代替深度优先搜索。\n\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 $1$，则将其加入队列，开始进行广度优先搜索。在广度优先搜索的过程中，每个搜索到的 $1$ 都会被重新标记为 $0$。直到队列为空，搜索结束。\n\n最终岛屿的数量就是我们进行广度优先搜索的次数。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int nr = grid.size();\n        if (!nr) return 0;\n        int nc = grid[0].size();\n\n        int num_islands = 0;\n        for (int r = 0; r < nr; ++r) {\n            for (int c = 0; c < nc; ++c) {\n                if (grid[r][c] == '1') {\n                    ++num_islands;\n                    grid[r][c] = '0';\n                    queue<pair<int, int>> neighbors;\n                    neighbors.push({r, c});\n                    while (!neighbors.empty()) {\n                        auto rc = neighbors.front();\n                        neighbors.pop();\n                        int row = rc.first, col = rc.second;\n                        if (row - 1 >= 0 && grid[row-1][col] == '1') {\n                            neighbors.push({row-1, col});\n                            grid[row-1][col] = '0';\n                        }\n                        if (row + 1 < nr && grid[row+1][col] == '1') {\n                            neighbors.push({row+1, col});\n                            grid[row+1][col] = '0';\n                        }\n                        if (col - 1 >= 0 && grid[row][col-1] == '1') {\n                            neighbors.push({row, col-1});\n                            grid[row][col-1] = '0';\n                        }\n                        if (col + 1 < nc && grid[row][col+1] == '1') {\n                            neighbors.push({row, col+1});\n                            grid[row][col+1] = '0';\n                        }\n                    }\n                }\n            }\n        }\n\n        return num_islands;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0) {\n            return 0;\n        }\n\n        int nr = grid.length;\n        int nc = grid[0].length;\n        int num_islands = 0;\n\n        for (int r = 0; r < nr; ++r) {\n            for (int c = 0; c < nc; ++c) {\n                if (grid[r][c] == '1') {\n                    ++num_islands;\n                    grid[r][c] = '0';\n                    Queue<Integer> neighbors = new LinkedList<>();\n                    neighbors.add(r * nc + c);\n                    while (!neighbors.isEmpty()) {\n                        int id = neighbors.remove();\n                        int row = id / nc;\n                        int col = id % nc;\n                        if (row - 1 >= 0 && grid[row-1][col] == '1') {\n                            neighbors.add((row-1) * nc + col);\n                            grid[row-1][col] = '0';\n                        }\n                        if (row + 1 < nr && grid[row+1][col] == '1') {\n                            neighbors.add((row+1) * nc + col);\n                            grid[row+1][col] = '0';\n                        }\n                        if (col - 1 >= 0 && grid[row][col-1] == '1') {\n                            neighbors.add(row * nc + col-1);\n                            grid[row][col-1] = '0';\n                        }\n                        if (col + 1 < nc && grid[row][col+1] == '1') {\n                            neighbors.add(row * nc + col+1);\n                            grid[row][col+1] = '0';\n                        }\n                    }\n                }\n            }\n        }\n\n        return num_islands;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        nr = len(grid)\n        if nr == 0:\n            return 0\n        nc = len(grid[0])\n\n        num_islands = 0\n        for r in range(nr):\n            for c in range(nc):\n                if grid[r][c] == \"1\":\n                    num_islands += 1\n                    grid[r][c] = \"0\"\n                    neighbors = collections.deque([(r, c)])\n                    while neighbors:\n                        row, col = neighbors.popleft()\n                        for x, y in [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]:\n                            if 0 <= x < nr and 0 <= y < nc and grid[x][y] == \"1\":\n                                neighbors.append((x, y))\n                                grid[x][y] = \"0\"\n        \n        return num_islands\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(MN)$，其中 $M$ 和 $N$ 分别为行数和列数。\n\n* 空间复杂度：$O(\\min(M, N))$，在最坏情况下，整个网格均为陆地，队列的大小可以达到 $\\min(M, N)$。\n\n#### 方法三：并查集\n\n同样地，我们也可以使用并查集代替搜索。\n\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 $1$，则将其与相邻四个方向上的 $1$ 在并查集中进行合并。\n\n最终岛屿的数量就是并查集中连通分量的数目。\n\n下面的动画展示了整个算法。\n\n<![image.png](https://pic.leetcode-cn.com/41b6ce1794ba80a7a82b31dc4c0642b26ccd280457d254d2fdad37a1f5a73ca6-image.png),![image.png](https://pic.leetcode-cn.com/82fa6f7b52294fdd8a2f4a0a28d4ca2dd3d71e86e7ddf5fa5ef4b18a13d3c438-image.png),![image.png](https://pic.leetcode-cn.com/773a3ac931ca2b397b0ba6cac17a15a0dd21fe2d0f2887d6b90405d9025c3f85-image.png),![image.png](https://pic.leetcode-cn.com/6c1a18d84a24f74c18654e0f20b17c263646a9fad911e6bb227e665688abb037-image.png),![image.png](https://pic.leetcode-cn.com/1a35068b177ce3ed70de37d3e7a1fb3e91ba0e5588ab3e3633ddb963f3d64f68-image.png),![image.png](https://pic.leetcode-cn.com/6f35cbfc7410e54ec80f96af3123c5eed5e5b8f73e6a1cc2fa4aea0f911e919c-image.png)>\n\n\n```C++ [sol3-C++]\nclass UnionFind {\npublic:\n    UnionFind(vector<vector<char>>& grid) {\n        count = 0;\n        int m = grid.size();\n        int n = grid[0].size();\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == '1') {\n                    parent.push_back(i * n + j);\n                    ++count;\n                }\n                else {\n                    parent.push_back(-1);\n                }\n                rank.push_back(0);\n            }\n        }\n    }\n\n    int find(int i) {\n        if (parent[i] != i) {\n            parent[i] = find(parent[i]);\n        }\n        return parent[i];\n    }\n\n    void unite(int x, int y) {\n        int rootx = find(x);\n        int rooty = find(y);\n        if (rootx != rooty) {\n            if (rank[rootx] < rank[rooty]) {\n                swap(rootx, rooty);\n            }\n            parent[rooty] = rootx;\n            if (rank[rootx] == rank[rooty]) rank[rootx] += 1;\n            --count;\n        }\n    }\n\n    int getCount() const {\n        return count;\n    }\n\nprivate:\n    vector<int> parent;\n    vector<int> rank;\n    int count;\n};\n\nclass Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int nr = grid.size();\n        if (!nr) return 0;\n        int nc = grid[0].size();\n\n        UnionFind uf(grid);\n        int num_islands = 0;\n        for (int r = 0; r < nr; ++r) {\n            for (int c = 0; c < nc; ++c) {\n                if (grid[r][c] == '1') {\n                    grid[r][c] = '0';\n                    if (r - 1 >= 0 && grid[r-1][c] == '1') uf.unite(r * nc + c, (r-1) * nc + c);\n                    if (r + 1 < nr && grid[r+1][c] == '1') uf.unite(r * nc + c, (r+1) * nc + c);\n                    if (c - 1 >= 0 && grid[r][c-1] == '1') uf.unite(r * nc + c, r * nc + c - 1);\n                    if (c + 1 < nc && grid[r][c+1] == '1') uf.unite(r * nc + c, r * nc + c + 1);\n                }\n            }\n        }\n\n        return uf.getCount();\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    class UnionFind {\n        int count;\n        int[] parent;\n        int[] rank;\n\n        public UnionFind(char[][] grid) {\n            count = 0;\n            int m = grid.length;\n            int n = grid[0].length;\n            parent = new int[m * n];\n            rank = new int[m * n];\n            for (int i = 0; i < m; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    if (grid[i][j] == '1') {\n                        parent[i * n + j] = i * n + j;\n                        ++count;\n                    }\n                    rank[i * n + j] = 0;\n                }\n            }\n        }\n\n        public int find(int i) {\n            if (parent[i] != i) parent[i] = find(parent[i]);\n            return parent[i];\n        }\n\n        public void union(int x, int y) {\n            int rootx = find(x);\n            int rooty = find(y);\n            if (rootx != rooty) {\n                if (rank[rootx] > rank[rooty]) {\n                    parent[rooty] = rootx;\n                } else if (rank[rootx] < rank[rooty]) {\n                    parent[rootx] = rooty;\n                } else {\n                    parent[rooty] = rootx;\n                    rank[rootx] += 1;\n                }\n                --count;\n            }\n        }\n\n        public int getCount() {\n            return count;\n        }\n    }\n\n    public int numIslands(char[][] grid) {\n        if (grid == null || grid.length == 0) {\n            return 0;\n        }\n\n        int nr = grid.length;\n        int nc = grid[0].length;\n        int num_islands = 0;\n        UnionFind uf = new UnionFind(grid);\n        for (int r = 0; r < nr; ++r) {\n            for (int c = 0; c < nc; ++c) {\n                if (grid[r][c] == '1') {\n                    grid[r][c] = '0';\n                    if (r - 1 >= 0 && grid[r-1][c] == '1') {\n                        uf.union(r * nc + c, (r-1) * nc + c);\n                    }\n                    if (r + 1 < nr && grid[r+1][c] == '1') {\n                        uf.union(r * nc + c, (r+1) * nc + c);\n                    }\n                    if (c - 1 >= 0 && grid[r][c-1] == '1') {\n                        uf.union(r * nc + c, r * nc + c - 1);\n                    }\n                    if (c + 1 < nc && grid[r][c+1] == '1') {\n                        uf.union(r * nc + c, r * nc + c + 1);\n                    }\n                }\n            }\n        }\n\n        return uf.getCount();\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass UnionFind:\n    def __init__(self, grid):\n        m, n = len(grid), len(grid[0])\n        self.count = 0\n        self.parent = [-1] * (m * n)\n        self.rank = [0] * (m * n)\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == \"1\":\n                    self.parent[i * n + j] = i * n + j\n                    self.count += 1\n    \n    def find(self, i):\n        if self.parent[i] != i:\n            self.parent[i] = self.find(self.parent[i])\n        return self.parent[i]\n    \n    def union(self, x, y):\n        rootx = self.find(x)\n        rooty = self.find(y)\n        if rootx != rooty:\n            if self.rank[rootx] < self.rank[rooty]:\n                rootx, rooty = rooty, rootx\n            self.parent[rooty] = rootx\n            if self.rank[rootx] == self.rank[rooty]:\n                self.rank[rootx] += 1\n            self.count -= 1\n    \n    def getCount(self):\n        return self.count\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        nr = len(grid)\n        if nr == 0:\n            return 0\n        nc = len(grid[0])\n\n        uf = UnionFind(grid)\n        num_islands = 0\n        for r in range(nr):\n            for c in range(nc):\n                if grid[r][c] == \"1\":\n                    grid[r][c] = \"0\"\n                    for x, y in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:\n                        if 0 <= x < nr and 0 <= y < nc and grid[x][y] == \"1\":\n                            uf.union(r * nc + c, x * nc + y)\n        \n        return uf.getCount()\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(MN \\times \\alpha(MN))$，其中 $M$ 和 $N$ 分别为行数和列数。注意当使用路径压缩（见 `find` 函数）和按秩合并（见数组 `rank`）实现并查集时，单次操作的时间复杂度为 $\\alpha(MN)$，其中 $\\alpha(x)$ 为反阿克曼函数，当自变量 $x$ 的值在人类可观测的范围内（宇宙中粒子的数量）时，函数 $\\alpha(x)$ 的值不会超过 $5$，因此也可以看成是常数时间复杂度。\n\n* 空间复杂度：$O(MN)$，这是并查集需要使用的空间。",
      "createdAt": "2019-07-08T06:43:02.069434+00:00",
      "hitCount": 310878,
      "identifier": "yoesri",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-",
        "title": "岛屿类问题的通用解法、DFS 遍历框架"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "number-of-islands"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 310,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 36,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "dao-yu-shu-liang-by-leetcode",
      "status": "PUBLISHED",
      "summary": "📺 视频题解\n📖 文字题解\n 方法一：深度优先搜索\n我们可以将二维网格看成一个无向图，竖直或水平相邻的 1 之间有边相连。\n为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 1，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0。\n最终岛屿的数量就是我们",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Union Find",
          "nameTranslated": "并查集",
          "slug": "union-find",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": " 岛屿数量",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 311,
        "id": 13103,
        "viewCount": 204746
      },
      "uuid": "yoesri",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/E69EA693A09541FD83FC539A2753F462-6-2.png",
          "duration": 296.6187,
          "videoId": "d4a7d323e55e44ee9bb3698a3b045385"
        }
      ]
    }
  }
}
