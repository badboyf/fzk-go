{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解 \n\n![LeetCode 445.mp4](15db8673-92e9-4991-a9ce-82b721dca389)\n\n### 📖 文字题解\n#### 方法一：栈\n\n**思路与算法**\n\n本题的主要难点在于链表中数位的顺序与我们做加法的顺序是相反的，为了逆序处理所有数位，我们可以使用栈：把所有数字压入栈中，再依次取出相加。计算过程中需要注意进位的情况。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        stack<int> s1, s2;\n        while (l1) {\n            s1.push(l1 -> val);\n            l1 = l1 -> next;\n        }\n        while (l2) {\n            s2.push(l2 -> val);\n            l2 = l2 -> next;\n        }\n        int carry = 0;\n        ListNode* ans = nullptr;\n        while (!s1.empty() or !s2.empty() or carry != 0) {\n            int a = s1.empty() ? 0 : s1.top();\n            int b = s2.empty() ? 0 : s2.top();\n            if (!s1.empty()) s1.pop();\n            if (!s2.empty()) s2.pop();\n            int cur = a + b + carry;\n            carry = cur / 10;\n            cur %= 10;\n            auto curnode = new ListNode(cur);\n            curnode -> next = ans;\n            ans = curnode;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        Deque<Integer> stack1 = new LinkedList<Integer>();\n        Deque<Integer> stack2 = new LinkedList<Integer>();\n        while (l1 != null) {\n            stack1.push(l1.val);\n            l1 = l1.next;\n        }\n        while (l2 != null) {\n            stack2.push(l2.val);\n            l2 = l2.next;\n        }\n        int carry = 0;\n        ListNode ans = null;\n        while (!stack1.isEmpty() || !stack2.isEmpty() || carry != 0) {\n            int a = stack1.isEmpty() ? 0 : stack1.pop();\n            int b = stack2.isEmpty() ? 0 : stack2.pop();\n            int cur = a + b + carry;\n            carry = cur / 10;\n            cur %= 10;\n            ListNode curnode = new ListNode(cur);\n            curnode.next = ans;\n            ans = curnode;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        s1, s2 = [], []\n        while l1:\n            s1.append(l1.val)\n            l1 = l1.next\n        while l2:\n            s2.append(l2.val)\n            l2 = l2.next\n        ans = None\n        carry = 0\n        while s1 or s2 or carry != 0:\n            a = 0 if not s1 else s1.pop()\n            b = 0 if not s2 else s2.pop()\n            cur = a + b + carry\n            carry = cur // 10\n            cur %= 10\n            curnode = ListNode(cur)\n            curnode.next = ans\n            ans = curnode\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\max(m, n))$，其中 $m$ 和 $n$ 分别为两个链表的长度。我们需要遍历两个链表的全部位置，而处理每个位置只需要 $O(1)$ 的时间。\n\n- 空间复杂度：$O(m + n)$，其中 $m$ 和 $n$ 分别为两个链表的长度。空间复杂度主要取决于我们把链表内容放入栈中所用的空间。",
      "createdAt": "2020-04-13T08:00:26.134652+00:00",
      "hitCount": 58764,
      "identifier": "VIgXf9",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "fu-xue-ming-zhu-xiang-jie-qiu-jia-fa-xue-ofb5",
        "title": "【负雪明烛】详解「求加法」，学会 1 题秒杀 7 题！"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "add-two-numbers-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 49,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "liang-shu-xiang-jia-ii-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 方法一：栈 思路与算法 本题的主要难点在于链表中数位的顺序与我们做加法的顺序是相反的，为了逆序处理所有数位，我们可以使用栈：把所有数字压入栈中，再依次取出相加。计算过程中需要注意进位的情况。 C++ [sol1-C++] class Solution { public:     ListNo",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "两数相加 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 134,
        "id": 200585,
        "viewCount": 43049
      },
      "uuid": "VIgXf9",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/C5A8AEC6AC524FF3A1B3BEB708979030-6-2.png",
          "duration": 206.72,
          "videoId": "17b1952894de4946864ae071219c79c3"
        }
      ]
    }
  }
}
