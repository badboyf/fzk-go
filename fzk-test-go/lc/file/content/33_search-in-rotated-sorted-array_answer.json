{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解\n\n![33. 搜索旋转排序数组_1.mp4](791f4a50-ba15-468d-8d0a-0fedfdc814c4)\n\n### 📖 文字题解\n#### 方法一：二分查找\n\n**思路和算法**\n\n对于有序数组，可以使用二分查找的方法查找元素。\n\n但是这道题中，数组本身不是有序的，进行旋转后只保证了数组的局部是有序的，这还能进行二分查找吗？答案是可以的。\n\n可以发现的是，我们将数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的。拿示例来看，我们从 `6` 这个位置分开以后数组变成了 `[4, 5, 6]` 和 `[7, 0, 1, 2]` 两个部分，其中左边 `[4, 5, 6]` 这个部分的数组是有序的，其他也是如此。\n\n这启示我们可以在常规二分查找的时候查看当前 `mid` 为分割位置分割出来的两个部分 `[l, mid]` 和 `[mid + 1, r]` 哪个部分是有序的，并根据有序的那个部分确定我们该如何改变二分查找的上下界，因为我们能够根据有序的那部分判断出 `target` 在不在这个部分：\n\n- 如果 `[l, mid - 1]` 是有序数组，且 `target` 的大小满足 $[\\textit{nums}[l],\\textit{nums}[mid])$，则我们应该将搜索范围缩小至 `[l, mid - 1]`，否则在 `[mid + 1, r]` 中寻找。\n- 如果 `[mid, r]` 是有序数组，且 `target` 的大小满足 $(\\textit{nums}[mid+1],\\textit{nums}[r]]$，则我们应该将搜索范围缩小至 `[mid + 1, r]`，否则在 `[l, mid - 1]` 中寻找。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/33/33_fig1.png)\n\n需要注意的是，二分的写法有很多种，所以在判断 `target` 大小与有序部分的关系的时候可能会出现细节上的差别。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int n = (int)nums.size();\n        if (!n) {\n            return -1;\n        }\n        if (n == 1) {\n            return nums[0] == target ? 0 : -1;\n        }\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) return mid;\n            if (nums[0] <= nums[mid]) {\n                if (nums[0] <= target && target < nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n};\n```\n```Java [sol1-Java]\nclass Solution {\n    public int search(int[] nums, int target) {\n        int n = nums.length;\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return nums[0] == target ? 0 : -1;\n        }\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            if (nums[0] <= nums[mid]) {\n                if (nums[0] <= target && target < nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\n```\n```Python [sol1-Python3]\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        if not nums:\n            return -1\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[0] <= nums[mid]:\n                if nums[0] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[len(nums) - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return -1\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(\\log n)$，其中 $n$ 为 $\\textit{nums}$ 数组的大小。整个算法时间复杂度即为二分查找的时间复杂度 $O(\\log n)$。\n\n* 空间复杂度： $O(1)$ 。我们只需要常数级别的空间存放变量。",
      "createdAt": "2020-04-26T02:40:54.017090+00:00",
      "hitCount": 270342,
      "identifier": "8IX3Wn",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ji-jian-solution-by-lukelee",
        "title": "极简 Solution"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "search-in-rotated-sorted-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 262,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 26,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 19,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 方法一：二分查找 思路和算法 对于有序数组，可以使用二分查找的方法查找元素。 但是这道题中，数组本身不是有序的，进行旋转后只保证了数组的局部是有序的，这还能进行二分查找吗？答案是可以的。 可以发现的是，我们将数组从中间分开成左右两部分的时候，一定有一部分的数组是有序的。拿示例来看，我们从 6",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://assets.leetcode-cn.com/solution-static/33/33_fig1.png",
      "title": "搜索旋转排序数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 380,
        "id": 220083,
        "viewCount": 168983
      },
      "uuid": "8IX3Wn",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/62F4FD74E5624FBB8811944A9029B95B-6-2.png",
          "duration": 338.1333,
          "videoId": "fcbba0292b0249189c30cb5a0120f1d9"
        }
      ]
    }
  }
}
