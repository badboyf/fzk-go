{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n根据题干描述的贪心算法，对于每一行，我们首先确定最多可以放置多少单词，这样可以得到该行的空格个数，从而确定该行单词之间的空格个数。\n\n根据题目中填充空格的细节，我们分以下三种情况讨论：\n\n- 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格；\n- 当前行不是最后一行，且只有一个单词：该单词左对齐，在行末填充空格；\n- 当前行不是最后一行，且不只一个单词：设当前行单词数为 $\\textit{numWords}$，空格数为 $\\textit{numSpaces}$，我们需要将空格均匀分配在单词之间，则单词之间应至少有 \n  $$\\textit{avgSpaces}=\\Big\\lfloor\\dfrac{\\textit{numSpaces}}{\\textit{numWords}-1}\\Big\\rfloor$$\n  个空格，对于多出来的  \n  $$\\textit{extraSpaces}=\\textit{numSpaces}\\bmod(\\textit{numWords}-1)$$ \n  个空格，应填在前 $\\textit{extraSpaces}$ 个单词之间。因此，前 $\\textit{extraSpaces}$ 个单词之间填充 $\\textit{avgSpaces}+1$ 个空格，其余单词之间填充 $\\textit{avgSpaces}$ 个空格。\n\n```Python [sol1-Python3]\n# blank 返回长度为 n 的由空格组成的字符串\ndef blank(n: int) -> str:\n    return ' ' * n\n\nclass Solution:\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\n        ans = []\n        right, n = 0, len(words)\n        while True:\n            left = right  # 当前行的第一个单词在 words 的位置\n            sumLen = 0  # 统计这一行单词长度之和\n            # 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格\n            while right < n and sumLen + len(words[right]) + right - left <= maxWidth:\n                sumLen += len(words[right])\n                right += 1\n\n            # 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格\n            if right == n:\n                s = \" \".join(words[left:])\n                ans.append(s + blank(maxWidth - len(s)))\n                break\n\n            numWords = right - left\n            numSpaces = maxWidth - sumLen\n\n            # 当前行只有一个单词：该单词左对齐，在行末填充空格\n            if numWords == 1:\n                ans.append(words[left] + blank(numSpaces))\n                continue\n\n            # 当前行不只一个单词\n            avgSpaces = numSpaces // (numWords - 1)\n            extraSpaces = numSpaces % (numWords - 1)\n            s1 = blank(avgSpaces + 1).join(words[left:left + extraSpaces + 1])  # 拼接额外加一个空格的单词\n            s2 = blank(avgSpaces).join(words[left + extraSpaces + 1:right])  # 拼接其余单词\n            ans.append(s1 + blank(avgSpaces) + s2)\n\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\n    // blank 返回长度为 n 的由空格组成的字符串\n    string blank(int n) {\n        return string(n, ' ');\n    }\n\n    // join 返回用 sep 拼接 [left, right) 范围内的 words 组成的字符串\n    string join(vector<string> &words, int left, int right, string sep) {\n        string s = words[left];\n        for (int i = left + 1; i < right; ++i) {\n            s += sep + words[i];\n        }\n        return s;\n    }\n\npublic:\n    vector<string> fullJustify(vector<string> &words, int maxWidth) {\n        vector<string> ans;\n        int right = 0, n = words.size();\n        while (true) {\n            int left = right; // 当前行的第一个单词在 words 的位置\n            int sumLen = 0; // 统计这一行单词长度之和\n            // 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格\n            while (right < n && sumLen + words[right].length() + right - left <= maxWidth) {\n                sumLen += words[right++].length();\n            }\n\n            // 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格\n            if (right == n) {\n                string s = join(words, left, n, \" \");\n                ans.emplace_back(s + blank(maxWidth - s.length()));\n                return ans;\n            }\n\n            int numWords = right - left;\n            int numSpaces = maxWidth - sumLen;\n\n            // 当前行只有一个单词：该单词左对齐，在行末填充剩余空格\n            if (numWords == 1) {\n                ans.emplace_back(words[left] + blank(numSpaces));\n                continue;\n            }\n\n            // 当前行不只一个单词\n            int avgSpaces = numSpaces / (numWords - 1);\n            int extraSpaces = numSpaces % (numWords - 1);\n            string s1 = join(words, left, left + extraSpaces + 1, blank(avgSpaces + 1)); // 拼接额外加一个空格的单词\n            string s2 = join(words, left + extraSpaces + 1, right, blank(avgSpaces)); // 拼接其余单词\n            ans.emplace_back(s1 + blank(avgSpaces) + s2);\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<String> fullJustify(String[] words, int maxWidth) {\n        List<String> ans = new ArrayList<String>();\n        int right = 0, n = words.length;\n        while (true) {\n            int left = right; // 当前行的第一个单词在 words 的位置\n            int sumLen = 0; // 统计这一行单词长度之和\n            // 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格\n            while (right < n && sumLen + words[right].length() + right - left <= maxWidth) {\n                sumLen += words[right++].length();\n            }\n\n            // 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格\n            if (right == n) {\n                StringBuffer sb = join(words, left, n, \" \");\n                sb.append(blank(maxWidth - sb.length()));\n                ans.add(sb.toString());\n                return ans;\n            }\n\n            int numWords = right - left;\n            int numSpaces = maxWidth - sumLen;\n\n            // 当前行只有一个单词：该单词左对齐，在行末填充剩余空格\n            if (numWords == 1) {\n                StringBuffer sb = new StringBuffer(words[left]);\n                sb.append(blank(numSpaces));\n                ans.add(sb.toString());\n                continue;\n            }\n\n            // 当前行不只一个单词\n            int avgSpaces = numSpaces / (numWords - 1);\n            int extraSpaces = numSpaces % (numWords - 1);\n            StringBuffer sb = new StringBuffer();\n            sb.append(join(words, left, left + extraSpaces + 1, blank(avgSpaces + 1))); // 拼接额外加一个空格的单词\n            sb.append(blank(avgSpaces));\n            sb.append(join(words, left + extraSpaces + 1, right, blank(avgSpaces))); // 拼接其余单词\n            ans.add(sb.toString());\n        }\n    }\n\n    // blank 返回长度为 n 的由空格组成的字符串\n    public String blank(int n) {\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < n; ++i) {\n            sb.append(' ');\n        }\n        return sb.toString();\n    }\n\n    // join 返回用 sep 拼接 [left, right) 范围内的 words 组成的字符串\n    public StringBuffer join(String[] words, int left, int right, String sep) {\n        StringBuffer sb = new StringBuffer(words[left]);\n        for (int i = left + 1; i < right; ++i) {\n            sb.append(sep);\n            sb.append(words[i]);\n        }\n        return sb;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public IList<string> FullJustify(string[] words, int maxWidth) {\n        IList<string> ans = new List<string>();\n        int right = 0, n = words.Length;\n        while (true) {\n            int left = right; // 当前行的第一个单词在 words 的位置\n            int sumLen = 0; // 统计这一行单词长度之和\n            // 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格\n            while (right < n && sumLen + words[right].Length + right - left <= maxWidth) {\n                sumLen += words[right++].Length;\n            }\n\n            // 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格\n            if (right == n) {\n                StringBuilder sb = Join(words, left, n, \" \");\n                sb.Append(Blank(maxWidth - sb.Length));\n                ans.Add(sb.ToString());\n                return ans;\n            }\n\n            int numWords = right - left;\n            int numSpaces = maxWidth - sumLen;\n\n            // 当前行只有一个单词：该单词左对齐，在行末填充剩余空格\n            if (numWords == 1) {\n                StringBuilder sb = new StringBuilder(words[left]);\n                sb.Append(Blank(numSpaces));\n                ans.Add(sb.ToString());\n                continue;\n            }\n\n            // 当前行不只一个单词\n            int avgSpaces = numSpaces / (numWords - 1);\n            int extraSpaces = numSpaces % (numWords - 1);\n            StringBuilder curr = new StringBuilder();\n            curr.Append(Join(words, left, left + extraSpaces + 1, Blank(avgSpaces + 1))); // 拼接额外加一个空格的单词\n            curr.Append(Blank(avgSpaces));\n            curr.Append(Join(words, left + extraSpaces + 1, right, Blank(avgSpaces))); // 拼接其余单词\n            ans.Add(curr.ToString());\n        }\n    }\n\n    // Blank 返回长度为 n 的由空格组成的字符串\n    public string Blank(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; ++i) {\n            sb.Append(' ');\n        }\n        return sb.ToString();\n    }\n\n    // Join 返回用 sep 拼接 [left, right) 范围内的 words 组成的字符串\n    public StringBuilder Join(string[] words, int left, int right, string sep) {\n        StringBuilder sb = new StringBuilder(words[left]);\n        for (int i = left + 1; i < right; ++i) {\n            sb.Append(sep);\n            sb.Append(words[i]);\n        }\n        return sb;\n    }\n}\n```\n\n```go [sol1-Golang]\n// blank 返回长度为 n 的由空格组成的字符串\nfunc blank(n int) string {\n    return strings.Repeat(\" \", n)\n}\n\nfunc fullJustify(words []string, maxWidth int) (ans []string) {\n    right, n := 0, len(words)\n    for {\n        left := right // 当前行的第一个单词在 words 的位置\n        sumLen := 0   // 统计这一行单词长度之和\n        // 循环确定当前行可以放多少单词，注意单词之间应至少有一个空格\n        for right < n && sumLen+len(words[right])+right-left <= maxWidth {\n            sumLen += len(words[right])\n            right++\n        }\n\n        // 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格\n        if right == n {\n            s := strings.Join(words[left:], \" \")\n            ans = append(ans, s+blank(maxWidth-len(s)))\n            return\n        }\n\n        numWords := right - left\n        numSpaces := maxWidth - sumLen\n\n        // 当前行只有一个单词：该单词左对齐，在行末填充剩余空格\n        if numWords == 1 {\n            ans = append(ans, words[left]+blank(numSpaces))\n            continue\n        }\n\n        // 当前行不只一个单词\n        avgSpaces := numSpaces / (numWords - 1)\n        extraSpaces := numSpaces % (numWords - 1)\n        s1 := strings.Join(words[left:left+extraSpaces+1], blank(avgSpaces+1)) // 拼接额外加一个空格的单词\n        s2 := strings.Join(words[left+extraSpaces+1:right], blank(avgSpaces))  // 拼接其余单词\n        ans = append(ans, s1+blank(avgSpaces)+s2)\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst fullJustify = (words, maxWidth) => {\n    const ans = [];\n    let right = 0, n = words.length;\n    while (true) {\n        const left = right; // 当前行的第一个单词在 words 的位置\n        let sumLen = 0; // 统计这一行单词长度之和\n        while (right < n && sumLen + words[right].length + right - left <= maxWidth) {\n            sumLen += words[right].length;\n            right++;\n        }\n\n        // 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格\n        if (right === n) {\n            const s = words.slice(left).join(' ');\n            ans.push(s + blank(maxWidth - s.length));\n            break;\n        }\n        const numWords = right - left;\n        const numSpaces = maxWidth - sumLen;\n\n        // 当前行只有一个单词：该单词左对齐，在行末填充空格\n        if (numWords === 1) {\n            ans.push(words[left] + blank(numSpaces));\n            continue;\n        }\n        \n        // 当前行不只一个单词\n        const avgSpaces = Math.floor(numSpaces / (numWords - 1));\n        const extraSpaces = numSpaces % (numWords - 1);\n        const s1 = words.slice(left, left + extraSpaces + 1).join(blank(avgSpaces + 1)); // 拼接额外加一个空格的单词\n        const s2 = words.slice(left + extraSpaces + 1, right).join(blank(avgSpaces)); // 拼接其余单词\n        ans.push(s1 + blank(avgSpaces) + s2);\n    }\n    return ans;\n}\n\nconst blank = (n) => {\n    return new Array(n).fill(' ').join('');\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m)$，其中 $m$ 是数组 $\\textit{words}$ 中所有字符串的长度之和。\n\n- 空间复杂度：$O(m)$。",
      "createdAt": "2021-09-08T15:20:55.012259+00:00",
      "hitCount": 26042,
      "identifier": "NrXYR9",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "text-justification-by-ikaruga",
        "title": "【文本左右对齐】平均分布额外空格"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "text-justification"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 41,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "wen-ben-zuo-you-dui-qi-by-leetcode-solut-dyeg",
      "status": "PREPUBLISH",
      "summary": "方法一：模拟 根据题干描述的贪心算法，对于每一行，我们首先确定最多可以放置多少单词，这样可以得到该行的空格个数，从而确定该行单词之间的空格个数。 根据题目中填充空格的细节，我们分以下三种情况讨论： 当前行是最后一行：单词左对齐，且单词之间应只有一个空格，在行末填充剩余空格； 当前行不是最后一行，且只有一个单词：该单词左",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Simulation",
          "nameTranslated": "模拟",
          "slug": "simulation",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "文本左右对齐",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 81,
        "id": 986756,
        "viewCount": 18106
      },
      "uuid": "NrXYR9",
      "videosInfo": []
    }
  }
}
