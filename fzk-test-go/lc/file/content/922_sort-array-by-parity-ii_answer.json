{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：两次遍历\n\n**思路和算法**\n\n遍历一遍数组把所有的偶数放进 $\\textit{ans}[0]$，$\\textit{ans}[2]$，$\\textit{ans}[4]$，以此类推。\n\n再遍历一遍数组把所有的奇数依次放进 $\\textit{ans}[1]$，$\\textit{ans}[3]$，$\\textit{ans}[5]$，以此类推。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans(n);\n\n        int i = 0;\n        for (int x: nums) {\n            if (x % 2 == 0) {\n                ans[i] = x;\n                i += 2;\n            }\n        }\n        i = 1;\n        for (int x: nums) {\n            if (x % 2 == 1) {\n                ans[i] = x;\n                i += 2;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] sortArrayByParityII(int[] nums) {\n        int n = nums.length;\n        int[] ans = new int[n];\n\n        int i = 0;\n        for (int x : nums) {\n            if (x % 2 == 0) {\n                ans[i] = x;\n                i += 2;\n            }\n        }\n        i = 1;\n        for (int x : nums) {\n            if (x % 2 == 1) {\n                ans[i] = x;\n                i += 2;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C [sol1-C]\nint* sortArrayByParityII(int* nums, int numsSize, int* returnSize) {\n    int* ans = malloc(sizeof(int) * numsSize);\n    int add = 0;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] % 2 == 0) {\n            ans[add] = nums[i];\n            add += 2;\n        }\n    }\n    add = 1;\n    for (int i = 0; i < numsSize; i++) {\n        if (nums[i] % 2 == 1) {\n            ans[add] = nums[i];\n            add += 2;\n        }\n    }\n    *returnSize = numsSize;\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar sortArrayByParityII = function(nums) {\n    const n  = nums.length;\n    const ans = new Array(n);\n    let i = 0;\n    for (const x of nums) {\n        if (!(x & 1)) {\n            ans[i] = x;\n            i += 2;\n        } \n    }\n\n    i = 1;\n    for (const x of nums) {\n        if (x & 1) {\n            ans[i] = x;\n            i += 2;\n        }\n    }\n\n    return ans;\n};\n```\n\n```Golang [sol1-Golang]\nfunc sortArrayByParityII(nums []int) []int {\n    ans := make([]int, len(nums))\n    i := 0\n    for _, v := range nums {\n        if v%2 == 0 {\n            ans[i] = v\n            i += 2\n        }\n    }\n    i = 1\n    for _, v := range nums {\n        if v%2 == 1 {\n            ans[i] = v\n            i += 2\n        }\n    }\n    return ans\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是数组 $\\textit{nums}$ 的长度。\n\n* 空间复杂度：$O(1)$。注意在这里我们不考虑输出数组的空间占用。\n\n#### 方法二：双指针\n\n**思路与算法**\n\n如果原数组可以修改，则可以使用就地算法求解。\n\n为数组的偶数下标部分和奇数下标部分分别维护指针 $i, j$。随后，在每一步中，如果 $\\textit{nums}[i]$ 为奇数，则不断地向前移动 $j$（每次移动两个单位），直到遇见下一个偶数。此时，可以直接将 $\\textit{nums}[i]$ 与 $\\textit{nums}[j]$ 交换。我们不断进行这样的过程，最终能够将所有的整数放在正确的位置上。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& nums) {\n        int n = nums.size();\n        int j = 1;\n        for (int i = 0; i < n; i += 2) {\n            if (nums[i] % 2 == 1) {\n                while (nums[j] % 2 == 1) {\n                    j += 2;\n                }\n                swap(nums[i], nums[j]);\n            }\n        }   \n        return nums;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] sortArrayByParityII(int[] nums) {\n        int n = nums.length;\n        int j = 1;\n        for (int i = 0; i < n; i += 2) {\n            if (nums[i] % 2 == 1) {\n                while (nums[j] % 2 == 1) {\n                    j += 2;\n                }\n                swap(nums, i, j);\n            }\n        }   \n        return nums;\n    }\n\n    public void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n```\n\n```C [sol2-C]\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b, *b = t;\n}\n\nint* sortArrayByParityII(int* nums, int numsSize, int* returnSize) {\n    int j = 1;\n    for (int i = 0; i < numsSize; i += 2) {\n        if (nums[i] % 2 == 1) {\n            while (nums[j] % 2 == 1) {\n                j += 2;\n            }\n            swap(nums + i, nums + j);\n        }\n    }\n    *returnSize = numsSize;\n    return nums;\n}\n```\n\n```JavaScript [sol2-JavaScript]\nconst swap = (nums, i, j) => {\n    const temp = nums[i];\n    nums[i] = nums[j];\n    nums[j] = temp;\n};\nvar sortArrayByParityII = function(nums) {\n    const n  = nums.length;\n    let j = 1;\n    for (let i = 0; i < n; i += 2) {\n        if (nums[i] & 1) {\n            while (nums[j] & 1) {\n                j += 2;\n            }\n            swap(nums, i, j);\n        }\n    }   \n    return nums;\n};\n```\n\n```Golang [sol2-Golang]\nfunc sortArrayByParityII(nums []int) []int {\n    for i, j := 0, 1; i < len(nums); i += 2 {\n        if nums[i]%2 == 1 {\n            for nums[j]%2 == 1 {\n                j += 2\n            }\n            nums[i], nums[j] = nums[j], nums[i]\n        }\n    }\n    return nums\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是数组 $\\textit{nums}$ 的长度。\n\n* 空间复杂度：$O(1)$。",
      "createdAt": "2020-11-11T15:14:32.759090+00:00",
      "hitCount": 27476,
      "identifier": "bfdY88",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "922-an-qi-ou-pai-xu-shu-zu-ii-by-chen-we-p76w",
        "title": "922. 按奇偶排序数组 II"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "sort-array-by-parity-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 20,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "an-qi-ou-pai-xu-shu-zu-ii-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：两次遍历 思路和算法 遍历一遍数组把所有的偶数放进 $\\textit{ans}[0]$，$\\textit{ans}[2]$，$\\textit{ans}[4]$，以此类推。 再遍历一遍数组把所有的奇数依次放进 $\\textit{ans}[1]$，$\\textit{ans}[3]$，$\\textit{ans}[5]",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "按奇偶排序数组 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 129,
        "id": 481450,
        "viewCount": 21635
      },
      "uuid": "bfdY88",
      "videosInfo": []
    }
  }
}
