{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺视频题解  \n\n![680. 验证回文字符串 Ⅱ.mp4](93497e92-4bb9-494f-8550-f4a59326a9e8)\n\n### 📖文字题解\n\n#### 方法一：贪心\n\n考虑最朴素的方法：首先判断原串是否是回文串，如果是，就返回 $\\text{true}$；如果不是，则枚举每一个位置作为被删除的位置，再判断剩下的字符串是否是回文串。这种做法的渐进时间复杂度是 $O(n^2)$ 的，会超出时间限制。\n\n我们换一种想法。首先考虑如果不允许删除字符，如何判断一个字符串是否是回文串。常见的做法是使用双指针。定义左右指针，初始时分别指向字符串的第一个字符和最后一个字符，每次判断左右指针指向的字符是否相同，如果不相同，则不是回文串；如果相同，则将左右指针都往中间移动一位，直到左右指针相遇，则字符串是回文串。\n\n在允许最多删除一个字符的情况下，同样可以使用双指针，通过贪心实现。初始化两个指针 $\\textit{low}$ 和 $\\textit{high}$ 分别指向字符串的第一个字符和最后一个字符。每次判断两个指针指向的字符是否相同，如果相同，则更新指针，将 $\\textit{low}$ 加 $1$，$\\textit{high}$ 减 $1$，然后判断更新后的指针范围内的子串是否是回文字符串。如果两个指针指向的字符不同，则两个字符中必须有一个被删除，此时我们就分成两种情况：即删除左指针对应的字符，留下子串 $s[\\textit{low} + 1 : \\textit{high}]$，或者删除右指针对应的字符，留下子串 $s[\\textit{low} : \\textit{high} - 1]$。当这两个子串中至少有一个是回文串时，就说明原始字符串删除一个字符之后就以成为回文串。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/680/680_fig1.png)\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean validPalindrome(String s) {\n        int low = 0, high = s.length() - 1;\n        while (low < high) {\n            char c1 = s.charAt(low), c2 = s.charAt(high);\n            if (c1 == c2) {\n                ++low;\n                --high;\n            } else {\n                return validPalindrome(s, low, high - 1) || validPalindrome(s, low + 1, high);\n            }\n        }\n        return true;\n    }\n\n    public boolean validPalindrome(String s, int low, int high) {\n        for (int i = low, j = high; i < j; ++i, --j) {\n            char c1 = s.charAt(i), c2 = s.charAt(j);\n            if (c1 != c2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```python [sol1-Python3]\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def checkPalindrome(low, high):\n            i, j = low, high\n            while i < j:\n                if s[i] != s[j]:\n                    return False\n                i += 1\n                j -= 1\n            return True\n\n        low, high = 0, len(s) - 1\n        while low < high:\n            if s[low] == s[high]: \n                low += 1\n                high -= 1\n            else:\n                return checkPalindrome(low + 1, high) or checkPalindrome(low, high - 1)\n        return True\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool checkPalindrome(const string& s, int low, int high) {\n        for (int i = low, j = high; i < j; ++i, --j) {\n            if (s[i] != s[j]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    bool validPalindrome(string s) {\n        int low = 0, high = s.size() - 1;\n        while (low < high) {\n            char c1 = s[low], c2 = s[high];\n            if (c1 == c2) {\n                ++low;\n                --high;\n            } else {\n                return checkPalindrome(s, low, high - 1) || checkPalindrome(s, low + 1, high);\n            }\n        }\n        return true;\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc validPalindrome(s string) bool {\n    low, high := 0, len(s) - 1\n    for low < high {\n        if s[low] == s[high] {\n            low++\n            high--\n        } else {\n            flag1, flag2 := true, true\n            for i, j := low, high - 1; i < j; i, j = i + 1, j - 1 {\n                if s[i] != s[j] {\n                    flag1 = false\n                    break\n                }\n            }\n            for i, j := low + 1, high; i < j; i, j = i + 1, j - 1 {\n                if s[i] != s[j] {\n                    flag2 = false\n                    break\n                }\n            }\n            return flag1 || flag2\n        }\n    }\n    return true\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是字符串的长度。判断整个字符串是否是回文字符串的时间复杂度是 $O(n)$，遇到不同字符时，判断两个子串是否是回文字符串的时间复杂度也都是 $O(n)$。\n\n* 空间复杂度：$O(1)$。只需要维护有限的常量空间。",
      "createdAt": "2020-05-18T05:02:03.365871+00:00",
      "hitCount": 56625,
      "identifier": "cxj64u",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "cong-liang-ce-xiang-zhong-jian-zhao-dao-bu-deng-de",
        "title": "从两侧向中间找到不等的字符，删除后判断是否回文"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "valid-palindrome-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 56,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "yan-zheng-hui-wen-zi-fu-chuan-ii-by-leetcode-solut",
      "status": "PUBLISHED",
      "summary": "📺视频题解 📖文字题解 方法一：贪心 考虑最朴素的方法：首先判断原串是否是回文串，如果是，就返回 $\\text{true}$；如果不是，则枚举每一个位置作为被删除的位置，再判断剩下的字符串是否是回文串。这种做法的渐进时间复杂度是 $O(n^2)$ 的，会超出时间限制。 我们换一种想法。首先考虑如果不允许删除字符，如何判",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "验证回文字符串 Ⅱ",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 158,
        "id": 251842,
        "viewCount": 41437
      },
      "uuid": "cxj64u",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/C5D42A88335940A7BCB9C503DB98EED1-6-2.png",
          "duration": 358.0373,
          "videoId": "c2d67f641e6c497981af1adf7bf18deb"
        }
      ]
    }
  }
}
