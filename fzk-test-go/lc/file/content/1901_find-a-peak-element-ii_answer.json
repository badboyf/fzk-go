{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "稳健",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/zhi-xing-qie-wen-jian-69/avatar_1612197356.png",
          "userSlug": "wen-jian-69"
        },
        "username": "wen-jian-69"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "对`[0, m - 1]`行进行二分验证，顶峰有两个特点：\r\n- 相邻的三行中，中间的那一行的最大值，如果大于另外两行的最大值，则中间行的最大值的对应元素必定为顶峰\r\n- 如果三行的最大值中，不是中间行的最大，那搜索范围就往最大的那一行的方向缩\r\n```java\r\nclass Solution {\r\n    public int[] findPeakGrid(int[][] mat) {\r\n        int m = mat.length;\r\n        int l = 0, r = m - 1;\r\n        while (l < r) {\r\n            int mid = l + r >> 1;\r\n            int maxCol = findMaxCol(mat, mid);\r\n            int max1 = mid - 1 >= 0 ? mat[mid - 1][findMaxCol(mat, mid - 1)] : -1; //mid-1行的最大值\r\n            int max2 = mat[mid][maxCol]; //mid行的最大值\r\n            int max3 = mid + 1 < m ? mat[mid + 1][findMaxCol(mat, mid + 1)] : -1; //mid+1行的最大值\r\n            if (max2 > max1 && max2 > max3) return new int[]{mid, maxCol};\r\n            if (max1 > max3) r = mid - 1;\r\n            else l = mid + 1;\r\n        }\r\n        return new int[]{l, findMaxCol(mat, l)};\r\n    }\r\n    int findMaxCol(int[][] mat, int x) { //返回x行中最大值的那一列\r\n        int maxCol = 0, n = mat[x].length;\r\n        for (int y = 0; y < n; y++) {\r\n            if (mat[x][y] >= mat[x][maxCol]) {\r\n                maxCol = y;\r\n            }\r\n        }\r\n        return maxCol;\r\n    }\r\n}\r\n```\r\n",
      "createdAt": "2021-11-27T09:07:42.199357+00:00",
      "hitCount": 1,
      "identifier": "hw8WIp",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hqtu-jie-er-fen-de-zhi-hui-by-hq_-x3k9",
        "title": "✔️【hq图解】二分的智慧"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-a-peak-element-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "1901-zhao-chu-ding-feng-yuan-su-ii-er-fe-a8jg",
      "status": "PREPUBLISH",
      "summary": "对[0, m - 1]行进行二分验证，顶峰有两个特点：\n\n相邻的三行中，中间的那一行的最大值，如果大于另外两行的最大值，则中间行的最大值的对应元素必定为顶峰\n如果三行的最大值中，不是中间行的最大，那搜索范围就往最大的那一行的方向缩",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "二分",
          "nameTranslated": "",
          "slug": "er-fen",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "【1901. 找出顶峰元素 II】【二分】Java简单实现",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1125119,
        "viewCount": 1
      },
      "uuid": "hw8WIp",
      "videosInfo": []
    }
  }
}
