{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心\n\n**思路**\n\n两只相同颜色的兔子看到的其他同色兔子数必然是相同的。反之，若两只兔子看到的其他同色兔子数不同，那么这两只兔子颜色也不同。\n\n因此，将 $\\textit{answers}$ 中值相同的元素分为一组，对于每一组，计算出兔子的最少数量，然后将所有组的计算结果累加，就是最终的答案。\n\n例如，现在有 $13$ 只兔子回答 $5$。假设其中有一只红色的兔子，那么森林中必然有 $6$ 只红兔子。再假设其中还有一只蓝色的兔子，同样的道理森林中必然有 $6$ 只蓝兔子。为了最小化可能的兔子数量，我们假设这 $12$ 只兔子都在这 $13$ 只兔子中。那么还有一只额外的兔子回答 $5$，这只兔子只能是其他的颜色，这一颜色的兔子也有 $6$ 只。因此这种情况下最少会有 $18$ 只兔子。\n\n一般地，如果有 $x$ 只兔子都回答 $y$，则至少有 $\\lceil\\dfrac{x}{y+1}\\rceil$ 种不同的颜色，且每种颜色有 $y+1$ 只兔子，因此兔子数至少为 \n\n$$\\lceil\\dfrac{x}{y+1}\\rceil\\cdot(y+1)$$\n\n我们可以用哈希表统计 $\\textit{answers}$ 中各个元素的出现次数，对每个元素套用上述公式计算，并将计算结果累加，即为最终答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numRabbits(vector<int> &answers) {\n        unordered_map<int, int> count;\n        for (int y : answers) {\n            ++count[y];\n        }\n        int ans = 0;\n        for (auto &[y, x] : count) {\n            ans += (x + y) / (y + 1) * (y + 1);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numRabbits(int[] answers) {\n        Map<Integer, Integer> count = new HashMap<Integer, Integer>();\n        for (int y : answers) {\n            count.put(y, count.getOrDefault(y, 0) + 1);\n        }\n        int ans = 0;\n        for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n            int y = entry.getKey(), x = entry.getValue();\n            ans += (x + y) / (y + 1) * (y + 1);\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc numRabbits(answers []int) (ans int) {\n    count := map[int]int{}\n    for _, y := range answers {\n        count[y]++\n    }\n    for y, x := range count {\n        ans += (x + y) / (y + 1) * (y + 1)\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numRabbits = function(answers) {\n    const count = new Map();\n    for (const y of answers) {\n        count.set(y, (count.get(y) || 0) + 1);\n    }\n    let ans = 0;\n    for (const [y, x] of count.entries()) {\n        ans += Math.floor((x + y) / (y + 1)) * (y + 1);\n    }\n    return ans;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n        count = Counter(answers)\n        ans = sum((x + y) // (y + 1) * (y + 1) for y, x in count.items())\n        return ans\n```\n\n```C [sol1-C]\nstruct HashTable {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\nint numRabbits(int* answers, int answersSize) {\n    struct HashTable* hashTable = NULL;\n    for (int i = 0; i < answersSize; i++) {\n        struct HashTable* tmp;\n        HASH_FIND_INT(hashTable, &answers[i], tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct HashTable));\n            tmp->key = answers[i];\n            tmp->val = 1;\n            HASH_ADD_INT(hashTable, key, tmp);\n        } else {\n            tmp->val++;\n        }\n    }\n    int ans = 0;\n    struct HashTable *iter, *tmp;\n    HASH_ITER(hh, hashTable, iter, tmp) {\n        int x = iter->val, y = iter->key;\n        ans += (x + y) / (y + 1) * (y + 1);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{answers}$ 的长度。\n\n- 空间复杂度：$O(n)$。最坏情况下，哈希表中含有 $n$ 个元素。",
      "createdAt": "2021-04-03T16:10:32.988424+00:00",
      "hitCount": 32725,
      "identifier": "v65S4j",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "cyu-yan-jie-fa-shu-tu-zi-by-youzikun-qlmz",
        "title": "C语言解法，数兔子"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "rabbits-in-forest"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 39,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "sen-lin-zhong-de-tu-zi-by-leetcode-solut-kvla",
      "status": "PREPUBLISH",
      "summary": "方法一：贪心 思路 两只相同颜色的兔子看到的其他同色兔子数必然是相同的。反之，若两只兔子看到的其他同色兔子数不同，那么这两只兔子颜色也不同。 因此，将 $\\textit{answers}$ 中值相同的元素分为一组，对于每一组，计算出兔子的最少数量，然后将所有组的计算结果累加，就是最终的答案。 例如，现在有 $13$ 只",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "森林中的兔子",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 154,
        "id": 698444,
        "viewCount": 22708
      },
      "uuid": "v65S4j",
      "videosInfo": []
    }
  }
}
