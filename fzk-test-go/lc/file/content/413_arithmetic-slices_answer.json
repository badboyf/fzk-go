{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：差分 + 计数\n\n**思路与算法**\n\n考虑一个比较直观的做法：\n\n- 我们枚举等差数列的最后两项 $\\textit{nums}[i - 1]$ 以及 $\\textit{nums}[i]$，那么等差数列的公差 $d$ 即为 $\\textit{nums}[i - 1] - \\textit{nums}[i]$；\n\n- 随后我们使用一个指针 $j$ 从 $i - 2$ 开始逆序地遍历数组的前缀部分 $\\textit{nums}[0 .. i-2]$：\n\n    - 如果 $\\textit{nums}[j] - \\textit{nums}[j + 1] = d$，那么说明 $\\textit{nums}[j], \\cdots, \\textit{nums}[i]$ 组成了一个长度至少为 $3$ 的等差数列，答案增加 $1$；\n\n    - 否则更小的 $j$ 也无法作为等差数列的首个位置了，我们直接退出遍历。\n\n这个做法的时间复杂度是 $O(n^2)$ 的，即枚举最后两项的时间复杂度为 $O(n)$，使用指针 $j$ 遍历的时间复杂度也为 $O(n)$，相乘得到总时间复杂度 $O(n^2)$。对于一些运行较慢的语言，该方法可能会超出时间限制，因此我们需要进行优化。\n\n**优化**\n\n如果我们已经求出了 $\\textit{nums}[i - 1]$ 以及 $\\textit{nums}[i]$ 作为等差数列的最后两项时，答案增加的次数 $t_i$，那么能否快速地求出 $t_{i+1}$ 呢？\n\n答案是可以的：\n\n- 如果 $\\textit{nums}[i] - \\textit{nums}[i + 1] = d$，那么在这一轮遍历中，$j$ 会遍历到与上一轮相同的位置，答案增加的次数相同，并且额外多出了 $\\textit{nums}[i-1], \\textit{nums}[i], \\textit{nums}[i+1]$ 这一个等差数列，因此有：\n\n$$\nt_{i+1} = t_i + 1\n$$\n\n- 如果 $\\textit{nums}[i] - \\textit{num}[i + 1] \\neq d$，那么 $j$ 从初始值 $i-1$ 开始就会直接退出遍历，答案不会增加，因此有：\n\n$$\nt_{i+1} = 0\n$$\n\n这样一来，我们通过上述简单的递推，即可在 $O(1)$ 的时间计算等差数列数量的增量，总时间复杂度减少至 $O(n)$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numberOfArithmeticSlices(vector<int>& nums) {\n        int n = nums.size();\n        if (n == 1) {\n            return 0;\n        }\n\n        int d = nums[0] - nums[1], t = 0;\n        int ans = 0;\n        // 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n        for (int i = 2; i < n; ++i) {\n            if (nums[i - 1] - nums[i] == d) {\n                ++t;\n            }\n            else {\n                d = nums[i - 1] - nums[i];\n                t = 0;\n            }\n            ans += t;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numberOfArithmeticSlices(int[] nums) {\n        int n = nums.length;\n        if (n == 1) {\n            return 0;\n        }\n\n        int d = nums[0] - nums[1], t = 0;\n        int ans = 0;\n        // 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n        for (int i = 2; i < n; ++i) {\n            if (nums[i - 1] - nums[i] == d) {\n                ++t;\n            } else {\n                d = nums[i - 1] - nums[i];\n                t = 0;\n            }\n            ans += t;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NumberOfArithmeticSlices(int[] nums) {\n        int n = nums.Length;\n        if (n == 1) {\n            return 0;\n        }\n\n        int d = nums[0] - nums[1], t = 0;\n        int ans = 0;\n        // 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n        for (int i = 2; i < n; ++i) {\n            if (nums[i - 1] - nums[i] == d) {\n                ++t;\n            } else {\n                d = nums[i - 1] - nums[i];\n                t = 0;\n            }\n            ans += t;\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        d, t = nums[0] - nums[1], 0\n        ans = 0\n        \n        # 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n        for i in range(2, n):\n            if nums[i - 1] - nums[i] == d:\n                t += 1\n            else:\n                d = nums[i - 1] - nums[i]\n                t = 0\n            ans += t\n        \n        return ans\n```\n\n```go [sol1-Golang]\nfunc numberOfArithmeticSlices(nums []int) (ans int) {\n    n := len(nums)\n    if n == 1 {\n        return\n    }\n\n    d, t := nums[0]-nums[1], 0\n    // 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n    for i := 2; i < n; i++ {\n        if nums[i-1]-nums[i] == d {\n            t++\n        } else {\n            d, t = nums[i-1]-nums[i], 0\n        }\n        ans += t\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint numberOfArithmeticSlices(int* nums, int numsSize) {\n    if (numsSize == 1) {\n        return 0;\n    }\n\n    int d = nums[0] - nums[1], t = 0;\n    int ans = 0;\n    // 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n    for (int i = 2; i < numsSize; ++i) {\n        if (nums[i - 1] - nums[i] == d) {\n            ++t;\n        } else {\n            d = nums[i - 1] - nums[i];\n            t = 0;\n        }\n        ans += t;\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numberOfArithmeticSlices = function(nums) {\n    const n = nums.length;\n    if (n === 1) {\n        return 0;\n    }\n\n    let d = nums[0] - nums[1], t = 0;\n    let ans = 0;\n    // 因为等差数列的长度至少为 3，所以可以从 i=2 开始枚举\n    for (let i = 2; i < n; ++i) {\n        if (nums[i - 1] - nums[i] === d) {\n            ++t;\n        } else {\n            d = nums[i - 1] - nums[i];\n            t = 0;\n        }\n        ans += t;\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-08-09T15:21:03.508605+00:00",
      "hitCount": 33840,
      "identifier": "8SlLJq",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ti-gong-yi-chong-guan-fang-mei-you-xie-de-xiang-fa",
        "title": "提供一种官方没有写的想法，不需要 dp，O(n)"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "arithmetic-slices"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 43,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "deng-chai-shu-lie-hua-fen-by-leetcode-so-g7os",
      "status": "PUBLISHED",
      "summary": "方法一：差分 + 计数 思路与算法 考虑一个比较直观的做法： 我们枚举等差数列的最后两项 $\\textit{nums}[i - 1]$ 以及 $\\textit{nums}[i]$，那么等差数列的公差 $d$ 即为 $\\textit{nums}[i - 1] - \\textit{nums}[i]$； 随后我们使用一个指针",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "java",
          "nameTranslated": "",
          "slug": "java-11",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "等差数列划分",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 121,
        "id": 925973,
        "viewCount": 24483
      },
      "uuid": "8SlLJq",
      "videosInfo": []
    }
  }
}
