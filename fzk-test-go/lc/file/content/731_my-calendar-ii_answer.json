{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：暴力法\n维护一重预订列表和双重预订列表。当预订一个新的日程安排 `[start, end)` 时，如果它与双重预订列表冲突，则会产生三重预定。\n\n**算法：**\n- 当且仅当事件 `[s1, e1)` 在另一个事件` [s2, e2)` 结束后开始，两个事件不冲突，也就是说满足 `e1<=s2` 或 `e2<=s1` 时，两个事件不冲突。这意味着当 `s1<e2` 和 `s2<e1` 时，事件发生冲突。\n- 如果新的日程安排与双重预订冲突，则返回 `false`。否则，我们会将与一重预定列表冲突的时间添加到双重预订列表中，并将该预定添加到一重预定列表中。\n\n```Python [ ]\nclass MyCalendarTwo:\n    def __init__(self):\n        self.calendar = []\n        self.overlaps = []\n\n    def book(self, start, end):\n        for i, j in self.overlaps:\n            if start < j and end > i:\n                return False\n        for i, j in self.calendar:\n            if start < j and end > i:\n                self.overlaps.append((max(start, i), min(end, j)))\n        self.calendar.append((start, end))\n        return True\n```\n\n```Java  [ ]\npublic class MyCalendarTwo {\n    List<int[]> calendar;\n    List<int[]> overlaps;\n\n    MyCalendarTwo() {\n        calendar = new ArrayList();\n    }\n\n    public boolean book(int start, int end) {\n        for (int[] iv: overlaps) {\n            if (iv[0] < end && start < iv[1]) return false;\n        }\n        for (int[] iv: calendar) {\n            if (iv[0] < end && start < iv[1])\n                overlaps.add(new int[]{Math.max(start, iv[0]), Math.min(end, iv[1])});\n        }\n        calendar.add(new int[]{start, end});\n        return true;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$。$N$ 指的是日程安排的数量。对于每个新的日程安排，我们会遍历已预定的每个日程安排，以决定是否可以预订新的日程安排。这需要 $\\sum_k^N O(k) = O(N^2)$ 的时间。\n* 空间复杂度：$O(N)$，`calendar` 所使用的空间。\n\n\n####  方法二：边界计数\n**算法：**\n- 当我们预定一个新的日程安排 `[start, end)`，则执行 `delta[start]++` 和 `delta[end]--`。其中 `delta` 是按照 `key` 值从小到大排序的结构，我们用 `active` 来记录当前正在进行的日程安排数，当 `active>=3` 时，说明产生了三重预定。\n- 此方法不包括 python 实现，因为没有 TreeMap。\n```Java [ ]\nclass MyCalendarTwo {\n    TreeMap<Integer, Integer> delta;\n\n    public MyCalendarTwo() {\n        delta = new TreeMap();\n    }\n\n    public boolean book(int start, int end) {\n        delta.put(start, delta.getOrDefault(start, 0) + 1);\n        delta.put(end, delta.getOrDefault(end, 0) - 1);\n\n        int active = 0;\n        for (int d: delta.values()) {\n            active += d;\n            if (active >= 3) {\n                delta.put(start, delta.get(start) - 1);\n                delta.put(end, delta.get(end) + 1);\n                if (delta.get(start) == 0)\n                    delta.remove(start);\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$。$N$ 指的是日程安排的数量。对于每个新的日程安排，我们遍历 `delta` 需要 $O(N)$ 的时间\n* 空间复杂度：$O(N)$，`delta` 所使用的空间。",
      "createdAt": "2019-10-29T06:28:36.684068+00:00",
      "hitCount": 6255,
      "identifier": "YcSj1v",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-fa-jie-nti-by-laughhhh-pll7",
        "title": "[ 一法解N题] ✔"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "my-calendar-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "wo-de-ri-cheng-an-pai-biao-ii-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：暴力法\n维护一重预订列表和双重预订列表。当预订一个新的日程安排 [start, end) 时，如果它与双重预订列表冲突，则会产生三重预定。\n算法：\n\n当且仅当事件 [s1, e1) 在另一个事件 [s2, e2) 结束后开始，两个事件不冲突，也就是说满足 e1<=s2 或 e2<=s1 时，两个事件不冲突。",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "我的日程安排表 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 12,
        "id": 38863,
        "viewCount": 4203
      },
      "uuid": "YcSj1v",
      "videosInfo": []
    }
  }
}
