{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：根据题目要求实现\n\n**思路和算法**\n\n根据题目要求，若单词的大写用法正确，则需要满足：\n\n- 若第 $1$ 个字母为大写，则其他字母必须均为大写或均为小写，即其他字母必须与第 $2$ 个字母的大小写相同；\n\n- 若第 $1$ 个字母为小写，则其他字母必须均为小写。\n\n根据以上规则，可以整理得到以下更简单的判断规则：\n\n- 无论第 $1$ 个字母是否大写，其他字母必须与第 $2$ 个字母的大小写相同；\n\n- 若第 $1$ 个字母为小写，则需额外判断第 $2$ 个字母是否为小写。\n\n**代码**\n\n```Python [sol1-Python3]\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        # 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写\n        if len(word) >= 2 and word[0].islower() and word[1].isupper():\n            return False\n        \n        # 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同\n        return all(word[i].islower() == word[1].islower() for i in range(2, len(word)))\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        // 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写\n        if (word.length() >= 2 && Character.isLowerCase(word.charAt(0)) && Character.isUpperCase(word.charAt(1))) {\n            return false;\n        }\n        \n        // 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同\n        for (int i = 2; i < word.length(); ++i) {\n            if (Character.isLowerCase(word.charAt(i)) ^ Character.isLowerCase(word.charAt(1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public bool DetectCapitalUse(string word) {\n        // 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写\n        if (word.Length >= 2 && char.IsLower(word[0]) && char.IsUpper(word[1])) {\n            return false;\n        }\n        \n        // 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同\n        for (int i = 2; i < word.Length; ++i) {\n            if (char.IsLower(word[i]) ^ char.IsLower(word[1])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool detectCapitalUse(string word) {\n        // 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写\n        if (word.size() >= 2 && islower(word[0]) && isupper(word[1])) {\n            return false;\n        }\n        \n        // 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同\n        for (int i = 2; i < word.size(); ++i) {\n            if (islower(word[i]) ^ islower(word[1])) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```go [sol1-Golang]\nfunc detectCapitalUse(word string) bool {\n    // 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写\n    if len(word) >= 2 && unicode.IsLower(rune(word[0])) && unicode.IsUpper(rune(word[1])) {\n        return false\n    }\n\n    // 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同\n    for i := 2; i < len(word); i++ {\n        if unicode.IsLower(rune(word[i])) != unicode.IsLower(rune(word[1])) {\n            return false\n        }\n    }\n    return true\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar detectCapitalUse = function(word) {\n    // 若第 1 个字母为小写，则需额外判断第 2 个字母是否为小写\n    if (word.length >= 2 && word[0] === word[0].toLowerCase() && word[1] === word[1].toUpperCase()) {\n        return false;\n    }\n    \n    // 无论第 1 个字母是否大写，其他字母必须与第 2 个字母的大小写相同\n    for (let i = 2; i < word.length; ++i) {\n        if (word[i] === word[i].toLowerCase() ^ word[1] === word[1].toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为字符串的长度。我们需要遍历字符串中的每个字符。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-11-12T02:47:43.100939+00:00",
      "hitCount": 15368,
      "identifier": "qdgNcA",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-jian-dan-zi-fu-chuan-m-rpor",
        "title": "【宫水三叶】简单字符串模拟题"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "detect-capital"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 28,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "jian-ce-da-xie-zi-mu-by-leetcode-solutio-449z",
      "status": "PUBLISHED",
      "summary": "方法一：根据题目要求实现 思路和算法 根据题目要求，若单词的大写用法正确，则需要满足： 若第 $1$ 个字母为大写，则其他字母必须均为大写或均为小写，即其他字母必须与第 $2$ 个字母的大小写相同； 若第 $1$ 个字母为小写，则其他字母必须均为小写。 根据以上规则，可以整理得到以下更简单的判断规则： 无论第 $1$ ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "检测大写字母",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 89,
        "id": 1097378,
        "viewCount": 12054
      },
      "uuid": "qdgNcA",
      "videosInfo": []
    }
  }
}
