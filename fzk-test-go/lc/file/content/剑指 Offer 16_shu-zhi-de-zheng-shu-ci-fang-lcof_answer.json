{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\r\n\r\n> 求 $x^n$ 最简单的方法是通过循环将 $n$ 个 $x$ 乘起来，依次求 $x^1, x^2, ..., x^{n-1}, x^n$ ，时间复杂度为 $O(n)$ 。\r\n> **快速幂法** 可将时间复杂度降低至 $O(log_2 n)$ ，以下从 **“二分法”** 和 **“二进制”** 两个角度解析快速幂法。\r\n\r\n##### 快速幂解析（二进制角度）：\r\n\r\n> 利用十进制数字 $n$ 的二进制表示，可对快速幂进行数学化解释。\r\n\r\n- 对于任何十进制正整数 $n$ ，设其二进制为 \"$b_m...b_3b_2b_1$\"（ $b_i$ 为二进制某位值，$i \\in [1,m]$ ），则有：\r\n  - **二进制转十进制：** $n = 1b_1 + 2b_2 + 4b_3 + ... + 2^{m-1}b_m$ *（即二进制转十进制公式）* ；\r\n  - **幂的二进制展开：** $x^n = x^{1b_1 + 2b_2 + 4b_3 + ... + 2^{m-1}b_m} = x^{1b_1}x^{2b_2}x^{4b_3}...x^{2^{m-1}b_m}$  ；\r\n\r\n- 根据以上推导，可把计算 $x^n$ 转化为解决以下两个问题：\r\n  - **计算 $x^1, x^2, x^4, ..., x^{2^{m-1}}$ 的值：** 循环赋值操作 $x = x^2$ 即可；\r\n  - **获取二进制各位 $b_1, b_2, b_3, ..., b_m$ 的值：** 循环执行以下操作即可。\r\n    1. **$n \\& 1$ （与操作）：** 判断 $n$ 二进制最右一位是否为 $1$ ；\r\n    2. **$n>>1$  （移位操作）：** $n$ 右移一位（可理解为删除最后一位）。\r\n\r\n- 因此，应用以上操作，可在循环中依次计算 $x^{2^{0}b_1}, x^{2^{1}b_2}, ..., x^{2^{m-1}b_m}$ 的值，并将所有 $x^{2^{i-1}b_i}$ 累计相乘即可。\r\n  - 当 $b_i = 0$ 时：$x^{2^{i-1}b_i} = 1$ ；\r\n  - 当 $b_i = 1$ 时：$x^{2^{i-1}b_i} = x^{2^{i-1}}$ ；\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/40a7a874523e26cacae9c502a6e8cf8b58dba878739f17e6bb3ed6be76e97569-Picture1.png){:width=450}\r\n\r\n##### 快速幂解析（二分法角度）：\r\n\r\n> 快速幂实际上是二分思想的一种应用。\r\n\r\n- **二分推导：** $x^n = x^{n/2} \\times x^{n/2} = (x^2)^{n/2}$ ，令 $n/2$ 为整数，则需要分为奇偶两种情况（设向下取整除法符号为 \"$//$\" ）：\r\n  - 当 $n$ 为偶数： $x^n = (x^2)^{n//2}$ ；\r\n  - 当 $n$ 为奇数： $x^n = x(x^2)^{n//2}$ ，即会多出一项 $x$ ；\r\n\r\n- **幂结果获取：**\r\n  - 根据二分推导，可通过循环 $x = x^2$ 操作，每次把幂从 $n$ 降至 $n//2$ ，直至将幂降为 $0$ ；\r\n  - 设 $res=1$ ，则初始状态 $x^n = x^n \\times res$ 。在循环二分时，每当 $n$ 为奇数时，将多出的一项 $x$ 乘入 $res$ ，则最终可化至 $x^n = x^0 \\times res = res$ ，返回 $res$ 即可。\r\n\r\n![Picture2.png](https://pic.leetcode-cn.com/379a042b9d8df3a96d1ac0f27346718033bf3bfce69731bab52bf6f372b4c8f4-Picture2.png){:width=450}\r\n\r\n- **转化为位运算：**\r\n  - 向下整除 $n // 2$  **等价于** 右移一位 $n >> 1$ ；\r\n  - 取余数 $n \\% 2$ **等价于** 判断二进制最右一位值 $n \\& 1$ ；\r\n\r\n##### 算法流程：\r\n\r\n1. 当 $x = 0$ 时：直接返回 $0$ （避免后续 $x = 1 / x$ 操作报错）。\r\n2. 初始化 $res = 1$ ；\r\n2. 当 $n < 0$ 时：把问题转化至 $n \\geq 0$ 的范围内，即执行 $x = 1/x$ ，$n = - n$ ；\r\n3. 循环计算：当 $n = 0$ 时跳出；\r\n   1. 当 $n \\& 1 = 1$ 时：将当前 $x$ 乘入 $res$ （即 $res *= x$ ）；\r\n   2. 执行 $x = x^2$ （即 $x *= x$ ）；\r\n   3. 执行 $n$ 右移一位（即 $n >>= 1$）。\r\n4. 返回 $res$ 。\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(log_2 n)$ ：** 二分的时间复杂度为对数级别。 \r\n- **空间复杂度 $O(1)$ ：** $res$, $b$ 等变量占用常数大小额外空间。\r\n\r\n#### 代码：\r\n\r\n> Java 代码中 `int32` 变量 $n \\in [-2147483648, 2147483647]$ ，因此当 $n = -2147483648$ 时执行 $n = -n$ 会因越界而赋值出错。解决方法是先将 $n$ 存入 `long` 变量 $b$ ，后面用 $b$ 操作即可。\r\n\r\n```python []\r\nclass Solution:\r\n    def myPow(self, x: float, n: int) -> float:\r\n        if x == 0: return 0\r\n        res = 1\r\n        if n < 0: x, n = 1 / x, -n\r\n        while n:\r\n            if n & 1: res *= x\r\n            x *= x\r\n            n >>= 1\r\n        return res\r\n```\r\n\r\n```java []\r\nclass Solution {\r\n    public double myPow(double x, int n) {\r\n        if(x == 0) return 0;\r\n        long b = n;\r\n        double res = 1.0;\r\n        if(b < 0) {\r\n            x = 1 / x;\r\n            b = -b;\r\n        }\r\n        while(b > 0) {\r\n            if((b & 1) == 1) res *= x;\r\n            x *= x;\r\n            b >>= 1;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n```",
      "createdAt": "2020-02-27T19:10:08.898274+00:00",
      "hitCount": 153689,
      "identifier": "KipvTB",
      "isEditorsPick": true,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "er-fen-kuai-su-mi-cheng-yun-suan-by-enth-4rms",
        "title": "二分快速幂乘运算"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "shu-zhi-de-zheng-shu-ci-fang-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 504,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 49,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 20,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-16-shu-zhi-de-zheng-shu-ci-fang-kuai-s",
      "status": "PUBLISHED",
      "summary": " 解题思路：\n\n求 x^n 最简单的方法是通过循环将 n 个 x 乘起来，依次求 x^1, x^2, ..., x^{n-1}, x^n ，时间复杂度为 O(n) 。\n快速幂法 可将时间复杂度降低至 O(log_2 n) ，以下从 “二分法” 和 “二进制” 两个角度解析快速幂法。\n\n 快速幂解析（二进制角度）：\n\n利",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/40a7a874523e26cacae9c502a6e8cf8b58dba878739f17e6bb3ed6be76e97569-Picture1.png",
      "title": "面试题16. 数值的整数次方（快速幂，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 336,
        "id": 112529,
        "viewCount": 98051
      },
      "uuid": "KipvTB",
      "videosInfo": []
    }
  }
}
