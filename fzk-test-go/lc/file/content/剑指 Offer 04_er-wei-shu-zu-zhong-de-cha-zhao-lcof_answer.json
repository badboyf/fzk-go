{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "\n### 方法一：暴力\n\n如果不考虑二维数组排好序的特点，则直接遍历整个二维数组的每一个元素，判断目标值是否在二维数组中存在。\n\n依次遍历二维数组的每一行和每一列。如果找到一个元素等于目标值，则返回 `true`。如果遍历完毕仍未找到等于目标值的元素，则返回 `false`。\n\n```Java []\nclass Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < columns; j++) {\n                if (matrix[i][j] == target) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(nm)$。二维数组中的每个元素都被遍历，因此时间复杂度为二维数组的大小。\n* 空间复杂度：$O(1)$。\n\n### 方法二：线性查找\n\n由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。\n\n从二维数组的右上角开始查找。如果当前元素等于目标值，则返回 `true`。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。\n\n可以证明这种方法不会错过目标值。如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因此往左查找不可能找到目标值，往下查找可能找到目标值。\n\n \n* 若数组为空，返回 `false`\n* 初始化行下标为 0，列下标为二维数组的列数减 1\n* 重复下列步骤，直到行下标或列下标超出边界\n  * 获得当前下标位置的元素 `num`\n  * 如果 `num` 和 `target` 相等，返回 `true`\n  * 如果 `num` 大于 `target`，列下标减 1\n  * 如果 `num` 小于 `target`，行下标加 1\n* 循环体执行完毕仍未找到元素等于 `target ，说明不存在这样的元素，返回 `false`\n\n```Java []\nclass Solution {\n    public boolean findNumberIn2DArray(int[][] matrix, int target) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {\n            return false;\n        }\n        int rows = matrix.length, columns = matrix[0].length;\n        int row = 0, column = columns - 1;\n        while (row < rows && column >= 0) {\n            int num = matrix[row][column];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n                column--;\n            } else {\n                row++;\n            }\n        }\n        return false;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n+m)$。访问到的下标的行最多增加 `n` 次，列最多减少 `m` 次，因此循环体最多执行 `n + m` 次。\n* 空间复杂度：$O(1)$。",
      "createdAt": "2020-02-20T04:10:40.733742+00:00",
      "hitCount": 166981,
      "identifier": "QgbxWF",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-zuo",
        "title": "面试题04. 二维数组中的查找（标志数，清晰图解）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "er-wei-shu-zu-zhong-de-cha-zhao-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 138,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3",
      "status": "PUBLISHED",
      "summary": "方法一：暴力\n如果不考虑二维数组排好序的特点，则直接遍历整个二维数组的每一个元素，判断目标值是否在二维数组中存在。\n依次遍历二维数组的每一行和每一列。如果找到一个元素等于目标值，则返回 true。如果遍历完毕仍未找到等于目标值的元素，则返回 false。\n复杂度分析\n\n时间复杂度：O(nm)。二维数组中的每个元素都被遍",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "面试题04. 二维数组中的查找",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 157,
        "id": 103053,
        "viewCount": 117992
      },
      "uuid": "QgbxWF",
      "videosInfo": []
    }
  }
}
