{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Stack_Chan",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/stack_chan/avatar_1635665272.png",
          "userSlug": "stack_chan"
        },
        "username": "stack_chan"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "\r\n## 题目地址(17.12. BiNode)\r\n\r\nhttps://leetcode-cn.com/problems/binode-lcci/\r\n\r\n## 题目描述\r\n\r\n```\r\n二叉树数据结构TreeNode可用来表示单向链表（其中left置空，right为下一个链表节点）。实现一个方法，把二叉搜索树转换为单向链表，要求依然符合二叉搜索树的性质，转换操作应是原址的，也就是在原始的二叉搜索树上直接修改。\r\n\r\n返回转换后的单向链表的头节点。\r\n\r\n\r\n \r\n\r\n示例：\r\n\r\n输入： [4,2,5,1,3,null,6,0]\r\n输出： [0,null,1,null,2,null,3,null,4,null,5,null,6]\r\n\r\n\r\n提示：\r\n\r\n节点数量不会超过 100000。\r\n```\r\n\r\n## 前置知识\r\n1.  测试用例[4,2,5,1,3,null,6,0]是树的串行化格式，表达了一个水平顺序遍历(或者说层序遍历)的二叉树;\r\n如图:\r\n![image.png](https://pic.leetcode-cn.com/1635664949-mlgNkO-image.png)\r\n\r\n2. 二叉查找树是一颗有序树,二叉树的结构\r\n3.. 中序遍历的实现\r\n- \r\n\r\n## 公司\r\n\r\n- 暂无\r\n\r\n## 思路\r\n\r\n1. 题干点明操作:left置空，right为下一个链表节点,关键是二叉查找树的遍历方式\r\n2. 结合测试用例,画出运行前后树图,可知,遍历方式为中序遍历\r\n图解:\r\n![image.png](https://pic.leetcode-cn.com/1635664970-QnwjjQ-image.png)\r\n\r\n\r\n## 关键点\r\n二叉查找树\r\n中序遍历\r\n-  \r\n\r\n## 代码\r\n\r\n- 语言支持：Java\r\n\r\nJava Code:\r\n\r\n```java\r\n\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode convertBiNode(TreeNode root) {\r\n        inOrder(root);\r\n        return resultNode;\r\n    }\r\n\r\n    TreeNode resultNode;\r\n\r\n    void inOrder(TreeNode node){\r\n        /**\r\n         * 用flag旗标来记录第一个左子树为空的点,即搜索树最左下角的点,并把它作为头结点\r\n         */\r\n        if(node!=null){\r\n            inOrder(node.left);\r\n            visit(node);\r\n            inOrder(node.right);\r\n        }\r\n    }\r\n\r\n    TreeNode pre = null;\r\n    void visit(TreeNode cur){\r\n        if(pre == null){\r\n            resultNode = cur;\r\n        }else {\r\n            cur.left = null;\r\n            pre.right = cur;\r\n        }\r\n        pre=cur;\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n**复杂度分析**\r\n\r\n令 n 为节点数,h为树高。\r\n\r\n- 时间复杂度：$O(n)$\r\n- 空间复杂度：$O(h)$\r\n\r\n\r\n",
      "createdAt": "2021-10-31T07:26:02.951397+00:00",
      "hitCount": 425,
      "identifier": "dBLwIW",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "binode100jian-dan-yi-dong-by-zui-weng-jiu-xian",
        "title": "BiNode，100%，简单易懂"
      },
      "position": 2,
      "prev": {
        "__typename": "BriefSolutionNode",
        "slug": "ni-zhong-xu-bian-li-si-lu-jian-ji-gao-xi-d9au",
        "title": "逆中序遍历（思路）——简洁高效"
      },
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "binode-lcci"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "binodezhong-xu-bian-li-die-dai-jie-fa-su-olcc",
      "status": "PREPUBLISH",
      "summary": "题目地址(17.12. BiNode)\nhttps://leetcode-cn.com/problems/binode-lcci/\n题目描述\n前置知识\n\n\n测试用例[4,2,5,1,3,null,6,0]是树的串行化格式，表达了一个水平顺序遍历(或者说层序遍历)的二叉树;\n如图:\n\n\n\n二叉查找树是一颗有序树,二叉树的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search Tree",
          "nameTranslated": "二叉搜索树",
          "slug": "binary-search-tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "迭代",
          "nameTranslated": "",
          "slug": "die-dai",
          "tagType": "ADDITIONAL_TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "中序遍历",
          "nameTranslated": "",
          "slug": "zhong-xu-bian-li",
          "tagType": "ADDITIONAL_TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": " Java",
          "nameTranslated": "",
          "slug": "java-2",
          "tagType": "ADDITIONAL_TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "java",
          "nameTranslated": "",
          "slug": "java-11",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1635664949-mlgNkO-image.png",
      "title": "BiNode,中序遍历迭代解法,速度100%",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1076205,
        "viewCount": 310
      },
      "uuid": "dBLwIW",
      "videosInfo": []
    }
  }
}
