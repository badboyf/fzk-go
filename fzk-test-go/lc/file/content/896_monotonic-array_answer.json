{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：两次遍历\n\n遍历两次数组，分别判断其是否为单调递增或单调递减。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isMonotonic(vector<int>& nums) {\n        return is_sorted(nums.begin(), nums.end()) || is_sorted(nums.rbegin(), nums.rend());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean isMonotonic(int[] nums) {\n        return isSorted(nums, true) || isSorted(nums, false);\n    }\n\n    public boolean isSorted(int[] nums, boolean increasing) {\n        int n = nums.length;\n        if (increasing) {\n            for (int i = 0; i < n - 1; ++i) {\n                if (nums[i] > nums[i + 1]) {\n                    return false;\n                }\n            }\n        } else {\n            for (int i = 0; i < n - 1; ++i) {\n                if (nums[i] < nums[i + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc isMonotonic(nums []int) bool {\n    return sort.IntsAreSorted(nums) || sort.IsSorted(sort.Reverse(sort.IntSlice(nums)))\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar isMonotonic = function(nums) {\n    return isSorted(nums) || isSorted(nums.reverse());\n};\n\nfunction isSorted(nums) {\n    return nums.slice(1).every((item, i) => nums[i] <= item)\n}\n```\n\n```C [sol1-C]\nbool isSorted(int* nums, int numsSize, bool increasing) {\n    if (increasing) {\n        for (int i = 0; i < numsSize - 1; ++i) {\n            if (nums[i] > nums[i + 1]) {\n                return false;\n            }\n        }\n    } else {\n        for (int i = 0; i < numsSize - 1; ++i) {\n            if (nums[i] < nums[i + 1]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nbool isMonotonic(int* nums, int numsSize) {\n    return isSorted(nums, numsSize, true) || isSorted(nums, numsSize, false);\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：一次遍历\n\n遍历数组 $\\textit{nums}$，若既遇到了 $\\textit{nums}[i]>\\textit{nums}[i+1]$ 又遇到了 $\\textit{nums}[i']<\\textit{nums}[i'+1]$，则说明 $\\textit{nums}$ 既不是单调递增的，也不是单调递减的。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isMonotonic(vector<int>& nums) {\n        bool inc = true, dec = true;\n        int n = nums.size();\n        for (int i = 0; i < n - 1; ++i) {\n            if (nums[i] > nums[i + 1]) {\n                inc = false;\n            }\n            if (nums[i] < nums[i + 1]) {\n                dec = false;\n            }\n        }\n        return inc || dec;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isMonotonic(int[] nums) {\n        boolean inc = true, dec = true;\n        int n = nums.length;\n        for (int i = 0; i < n - 1; ++i) {\n            if (nums[i] > nums[i + 1]) {\n                inc = false;\n            }\n            if (nums[i] < nums[i + 1]) {\n                dec = false;\n            }\n        }\n        return inc || dec;\n    }\n}\n```\n\n```go [sol2-Golang]\nfunc isMonotonic(nums []int) bool {\n    inc, dec := true, true\n    for i := 0; i < len(nums)-1; i++ {\n        if nums[i] > nums[i+1] {\n            inc = false\n        }\n        if nums[i] < nums[i+1] {\n            dec = false\n        }\n    }\n    return inc || dec\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar isMonotonic = function(nums) {\n    let inc = true, dec = true;\n    const n = nums.length;\n    for (let i = 0; i < n - 1; ++i) {\n        if (nums[i] > nums[i + 1]) {\n            inc = false;\n        }\n        if (nums[i] < nums[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n};\n```\n\n```C [sol2-C]\nbool isMonotonic(int* nums, int numsSize) {\n    bool inc = true, dec = true;\n    int n = numsSize;\n    for (int i = 0; i < n - 1; ++i) {\n        if (nums[i] > nums[i + 1]) {\n            inc = false;\n        }\n        if (nums[i] < nums[i + 1]) {\n            dec = false;\n        }\n    }\n    return inc || dec;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-02-27T10:38:10.661790+00:00",
      "hitCount": 17905,
      "identifier": "Bt29bH",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shu-zu-mo-ni-by-euyvvl-azbq",
        "title": "数组模拟"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "monotonic-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 28,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "dan-diao-shu-lie-by-leetcode-solution-ysex",
      "status": "PUBLISHED",
      "summary": "方法一：两次遍历 遍历两次数组，分别判断其是否为单调递增或单调递减。 代码 C++ [sol1-C++] class Solution { public:     bool isMonotonic(vector<int>& nums) {         return is_sorted(nums.begin(), n",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "单调数列",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 105,
        "id": 624659,
        "viewCount": 15180
      },
      "uuid": "Bt29bH",
      "videosInfo": []
    }
  }
}
