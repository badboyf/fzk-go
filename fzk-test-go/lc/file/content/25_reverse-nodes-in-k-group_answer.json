{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路与算法**\n\n本题的目标非常清晰易懂，不涉及复杂的算法，但是实现过程中需要考虑的细节比较多，容易写出冗长的代码。主要考查面试者设计的能力。\n\n我们需要把链表节点按照 `k` 个一组分组，所以可以使用一个指针 `head` 依次指向每组的头节点。这个指针每次向前移动 `k` 步，直至链表结尾。对于每个分组，我们先判断它的长度是否大于等于 `k`。若是，我们就翻转这部分链表，否则不需要翻转。\n\n接下来的问题就是如何翻转一个分组内的子链表。翻转一个链表并不难，过程可以参考「[206. 反转链表](https://leetcode-cn.com/problems/reverse-linked-list/)」。但是对于一个子链表，除了翻转其本身之外，还需要将子链表的头部与上一个子链表连接，以及子链表的尾部与下一个子链表连接。如下图所示：\n\n![fig1](https://assets.leetcode-cn.com/solution-static/25/25_fig1.png)\n\n因此，在翻转子链表的时候，我们不仅需要子链表头节点 `head`，还需要有 `head` 的上一个节点 `pre`，以便翻转完后把子链表再接回 `pre`。\n\n但是对于第一个子链表，它的头节点 `head` 前面是没有节点 `pre` 的。太麻烦了！难道只能特判了吗？答案是否定的。没有条件，我们就创造条件；没有节点，我们就创建一个节点。我们新建一个节点，把它接到链表的头部，让它作为 `pre` 的初始值，这样 `head` 前面就有了一个节点，我们就可以避开链表头部的边界条件。这么做还有一个好处，下面我们会看到。\n\n反复移动指针 `head` 与 `pre`，对 `head` 所指向的子链表进行翻转，直到结尾，我们就得到了答案。下面我们该返回函数值了。\n\n有的同学可能发现这又是一件麻烦事：链表翻转之后，链表的头节点发生了变化，那么应该返回哪个节点呢？照理来说，前 `k` 个节点翻转之后，链表的头节点应该是第 `k` 个节点。那么要在遍历过程中记录第 `k` 个节点吗？但是如果链表里面没有 `k` 个节点，答案又还是原来的头节点。我们又多了一大堆循环和判断要写，太崩溃了！\n\n等等！还记得我们创建了节点 `pre` 吗？这个节点一开始被连接到了头节点的前面，而无论之后链表有没有翻转，它的 `next` 指针都会指向正确的头节点。那么我们只要返回它的下一个节点就好了。至此，问题解决。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/25/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/25/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/25/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/25/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/25/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/25/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/25/7.PNG),![fig8](https://assets.leetcode-cn.com/solution-static/25/8.PNG),![fig9](https://assets.leetcode-cn.com/solution-static/25/9.PNG),![fig10](https://assets.leetcode-cn.com/solution-static/25/10.PNG),![fig11](https://assets.leetcode-cn.com/solution-static/25/11.PNG),![fig12](https://assets.leetcode-cn.com/solution-static/25/12.PNG),![fig13](https://assets.leetcode-cn.com/solution-static/25/13.PNG),![fig14](https://assets.leetcode-cn.com/solution-static/25/14.PNG),![fig15](https://assets.leetcode-cn.com/solution-static/25/15.PNG),![fig16](https://assets.leetcode-cn.com/solution-static/25/16.PNG),![fig17](https://assets.leetcode-cn.com/solution-static/25/17.PNG),![fig18](https://assets.leetcode-cn.com/solution-static/25/18.PNG),![fig19](https://assets.leetcode-cn.com/solution-static/25/19.PNG)>\n\n```Python [sol1-Python3]\nclass Solution:\n    # 翻转一个子链表，并且返回新的头与尾\n    def reverse(self, head: ListNode, tail: ListNode):\n        prev = tail.next\n        p = head\n        while prev != tail:\n            nex = p.next\n            p.next = prev\n            prev = p\n            p = nex\n        return tail, head\n\n    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:\n        hair = ListNode(0)\n        hair.next = head\n        pre = hair\n\n        while head:\n            tail = pre\n            # 查看剩余部分长度是否大于等于 k\n            for i in range(k):\n                tail = tail.next\n                if not tail:\n                    return hair.next\n            nex = tail.next\n            head, tail = self.reverse(head, tail)\n            # 把子链表重新接回原链表\n            pre.next = head\n            tail.next = nex\n            pre = tail\n            head = tail.next\n        \n        return hair.next\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    // 翻转一个子链表，并且返回新的头与尾\n    pair<ListNode*, ListNode*> myReverse(ListNode* head, ListNode* tail) {\n        ListNode* prev = tail->next;\n        ListNode* p = head;\n        while (prev != tail) {\n            ListNode* nex = p->next;\n            p->next = prev;\n            prev = p;\n            p = nex;\n        }\n        return {tail, head};\n    }\n\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode* hair = new ListNode(0);\n        hair->next = head;\n        ListNode* pre = hair;\n\n        while (head) {\n            ListNode* tail = pre;\n            // 查看剩余部分长度是否大于等于 k\n            for (int i = 0; i < k; ++i) {\n                tail = tail->next;\n                if (!tail) {\n                    return hair->next;\n                }\n            }\n            ListNode* nex = tail->next;\n            // 这里是 C++17 的写法，也可以写成\n            // pair<ListNode*, ListNode*> result = myReverse(head, tail);\n            // head = result.first;\n            // tail = result.second;\n            tie(head, tail) = myReverse(head, tail);\n            // 把子链表重新接回原链表\n            pre->next = head;\n            tail->next = nex;\n            pre = tail;\n            head = tail->next;\n        }\n\n        return hair->next;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        ListNode hair = new ListNode(0);\n        hair.next = head;\n        ListNode pre = hair;\n\n        while (head != null) {\n            ListNode tail = pre;\n            // 查看剩余部分长度是否大于等于 k\n            for (int i = 0; i < k; ++i) {\n                tail = tail.next;\n                if (tail == null) {\n                    return hair.next;\n                }\n            }\n            ListNode nex = tail.next;\n            ListNode[] reverse = myReverse(head, tail);\n            head = reverse[0];\n            tail = reverse[1];\n            // 把子链表重新接回原链表\n            pre.next = head;\n            tail.next = nex;\n            pre = tail;\n            head = tail.next;\n        }\n\n        return hair.next;\n    }\n\n    public ListNode[] myReverse(ListNode head, ListNode tail) {\n        ListNode prev = tail.next;\n        ListNode p = head;\n        while (prev != tail) {\n            ListNode nex = p.next;\n            p.next = prev;\n            prev = p;\n            p = nex;\n        }\n        return new ListNode[]{tail, head};\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nconst myReverse = (head, tail) => {\n    let prev = tail.next;\n    let p = head;\n    while (prev !== tail) {\n        const nex = p.next;\n        p.next = prev;\n        prev = p;\n        p = nex;\n    }\n    return [tail, head];\n}\nvar reverseKGroup = function(head, k) {\n    const hair = new ListNode(0);\n    hair.next = head;\n    let pre = hair;\n\n    while (head) {\n        let tail = pre;\n        // 查看剩余部分长度是否大于等于 k\n        for (let i = 0; i < k; ++i) {\n            tail = tail.next;\n            if (!tail) {\n                return hair.next;\n            }\n        }\n        const nex = tail.next;\n        [head, tail] = myReverse(head, tail);\n        // 把子链表重新接回原链表\n        pre.next = head;\n        tail.next = nex;\n        pre = tail;\n        head = tail.next;\n    }\n    return hair.next;\n};\n```\n\n```golang [sol1-Golang]\nfunc reverseKGroup(head *ListNode, k int) *ListNode {\n    hair := &ListNode{Next: head}\n    pre := hair\n\n    for head != nil {\n        tail := pre\n        for i := 0; i < k; i++ {\n            tail = tail.Next\n            if tail == nil {\n                return hair.Next\n            }\n        }\n        nex := tail.Next\n        head, tail = myReverse(head, tail)\n        pre.Next = head\n        tail.Next = nex\n        pre = tail\n        head = tail.Next\n    }\n    return hair.Next\n}\n\nfunc myReverse(head, tail *ListNode) (*ListNode, *ListNode) {\n    prev := tail.Next\n    p := head\n    for prev != tail {\n        nex := p.Next\n        p.Next = prev\n        prev = p\n        p = nex\n    }\n    return tail, head\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为链表的长度。`head` 指针会在 $O(\\lfloor \\frac{n}{k} \\rfloor)$ 个节点上停留，每次停留需要进行一次 $O(k)$ 的翻转操作。\n\n- 空间复杂度：$O(1)$，我们只需要建立常数个变量。",
      "createdAt": "2020-05-15T13:32:42.334003+00:00",
      "hitCount": 179487,
      "identifier": "R4xJ9y",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "tu-jie-kge-yi-zu-fan-zhuan-lian-biao-by-user7208t",
        "title": "图解k个一组翻转链表"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "reverse-nodes-in-k-group"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 120,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "k-ge-yi-zu-fan-zhuan-lian-biao-by-leetcode-solutio",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 思路与算法 本题的目标非常清晰易懂，不涉及复杂的算法，但是实现过程中需要考虑的细节比较多，容易写出冗长的代码。主要考查面试者设计的能力。 我们需要把链表节点按照 k 个一组分组，所以可以使用一个指针 head 依次指向每组的头节点。这个指针每次向前移动 k 步，直至链表结尾。对于每个分组，我们先判断它的长",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "K 个一组翻转链表",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 278,
        "id": 248591,
        "viewCount": 119709
      },
      "uuid": "R4xJ9y",
      "videosInfo": []
    }
  }
}
