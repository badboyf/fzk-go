{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "灵茶山艾府",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/endlesscheng/avatar_1589367048.png",
          "userSlug": "endlesscheng"
        },
        "username": "endlesscheng"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "根据题意：\r\n\r\n- 对于类型为先进先出（队列）的安检室，第一个进入的人总是第一个出去的；\r\n- 对于类型为后进先出（栈）的安检室，当栈填满时，最后一个进入的人才可以最先出去。\r\n\r\n我们可以对栈填充 $x_i=\\textit{capacities}_i-1$ 个人，这样可以将栈转换成一个大小为 $1$ 的队列。\r\n\r\n因此，为了使编号为 $k$ 的观众第一个通过最后一个安检室，我们需要将其中一些安检室设定为栈类型，且这些安检室的 $x_i$ 之和恰好为 $k$。当这些安检室都各自填充了 $x_i$ 个人之后，所有安检室可以串成一个队列，此时编号为 $k$ 的观众就自然地成为第一个通过最后一个安检室的人。\r\n\r\n把 $x_i$ 看成物品大小，$k$ 看成背包容量，则该问题就转换成了一个经典模型——求 01 背包的方案数。\r\n\r\n```go\r\nfunc securityCheck(capacities []int, k int) int {\r\n\tconst mod int = 1e9 + 7\r\n\tdp := make([]int, k+1)\r\n\tdp[0] = 1\r\n\tfor _, x := range capacities {\r\n\t\tx--\r\n\t\tfor s := k; s >= x; s-- {\r\n\t\t\tdp[s] = (dp[s] + dp[s-x]) % mod\r\n\t\t}\r\n\t}\r\n\treturn dp[k]\r\n}\r\n```",
      "createdAt": "2021-09-25T10:16:30.216097+00:00",
      "hitCount": 468,
      "identifier": "dnCN2z",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "bei-bao-wen-ti-by-frederick-von-stein-6h8g",
        "title": "背包问题"
      },
      "position": 2,
      "prev": {
        "__typename": "BriefSolutionNode",
        "slug": "lcp2021qiu-ji-tuan-dui-sai-t4golangdong-j4nrm",
        "title": "LCP，2021，秋季，团队赛，T4，Golang，动态规划"
      },
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "oPs9Bm"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 8,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "zhuan-huan-wei-01-bei-bao-fang-an-shu-by-1dax",
      "status": "PREPUBLISH",
      "summary": "根据题意：\n\n对于类型为先进先出（队列）的安检室，第一个进入的人总是第一个出去的；\n对于类型为后进先出（栈）的安检室，当栈填满时，最后一个进入的人才可以最先出去。\n\n我们可以对栈填充 x_i=\\textit{capacities}_i-1 个人，这样可以将栈转换成一个大小为 1 的队列。\n因此，为了使编号为 k 的观众",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Brainteaser",
          "nameTranslated": "脑筋急转弯",
          "slug": "brainteaser",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "0-1背包",
          "nameTranslated": "",
          "slug": "0-1bei-bao",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "转换为 01 背包方案数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 2,
        "id": 1016968,
        "viewCount": 323
      },
      "uuid": "dnCN2z",
      "videosInfo": []
    }
  }
}
