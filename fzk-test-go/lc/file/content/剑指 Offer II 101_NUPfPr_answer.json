{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "逗比克星",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/wo-shi-xie-wu-rui-la-wang-chai/avatar_1618042786.png",
          "userSlug": "master_xue"
        },
        "username": "master_xue"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "# **动态规划**\r\n该问题的本质就是，能否从数组中选出若个数字，使它们的和等于 target = sum / 2，那么所有数字之和 sum 必须为偶数，若 sum 不为偶数则等和子集肯定不存在。有 n 个数字，每一步都判断该数字是否加入等和子集，最终需要判断组合的解的个数是否大于 0，所以该问题可以使用动态规划解决。更确切一点该问题属于 0 - 1 背包问题，此类问题的一般描述为：能否选择若干物品，使它们刚好放满一个容量为 t 的背包。若每种物品只有一个，则为 0 - 1 背包问题；若每个物品的个数有限，则为多重背包问题；若每个物品的个数无限，则为完全背包问题。\r\n\r\n设 f(i, j) 表示能否从前 i 个物品(物品编号为 0 ~ i - 1)中选择若干物品放满容量为 j 的背包。对于 f(i, j) 存在两个选择，第一个选择是将标号为 i - 1 的物品放入背包，如果能从前 i - 1 个物品中选择若干物品放满容量为 j - nums[i - 1] 的背包(即 f(i - 1, j - nums[i - 1]) 为 true)，那么 f(i, j) 为 true。另一个选择是不把标号为 i - 1 的物品放入背包，如果能从前 i - 1 个物品中选择若干物品放满容量为 j 的背包(即 f(i - 1, j) 为 true)，那么 f(i, j) 为 true。即\r\n![image.png](https://pic.leetcode-cn.com/1631191148-ipPXvN-image.png)\r\n当 j 等于 0 时，即背包容量为空，只要不选择物品就可以，所以 f(i, 0) 为 true。当 i 等于 0 时，即物品数量为 0，那么除了空背包都无法装满，所以当 j 大于 0 时，f(0, j) 为 fasle;\r\n\r\n使用二维数组的完整代码如下，若数组长度为 n，所有数字之和为 t，那么时间复杂度为 O(nt)，空间复杂度为 O(nt)。\r\n```\r\nclass Solution {\r\npublic:\r\n    bool canPartition(vector<int>& nums) {\r\n        int sum = 0;\r\n        for (auto& n : nums) {\r\n            sum += n;\r\n        }\r\n        if (sum & 1 != 0) {\r\n            return false;\r\n        }\r\n\r\n        int target = sum >> 1;\r\n        vector<vector<bool>> dp(nums.size() + 1, vector<bool>(target + 1, false));\r\n        dp[0][0] = true;\r\n        for (int i = 1; i <= nums.size(); ++i) {\r\n            for (int j = 0; j <= target; ++j) {\r\n                dp[i][j] = dp[i - 1][j];\r\n                if (!dp[i][j] && j >= nums[i - 1]) {\r\n                    dp[i][j] = dp[i - 1][j - nums[i - 1]];\r\n                }\r\n            }\r\n        }\r\n        return dp[nums.size()][target];\r\n    }\r\n};\r\n```\r\n在使用二维矩阵的时候可以发现，当前行其实是在前一行的基础上进行更新的，所以使用一维的数组可以无需复制前一行的数据直接更新，这样会更高效。但是要注意 j 是从大往小遍历，因为这样不会破坏之前的值。优化后时间复杂度为 O(nt)，空间复杂度为 O(t)。\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    bool canPartition(vector<int>& nums) {\r\n        int sum = 0;\r\n        for (auto& n : nums) {\r\n            sum += n;\r\n        }\r\n        if (sum & 1 != 0) {\r\n            return false;\r\n        }\r\n\r\n        int target = sum >> 1;\r\n        vector<bool> dp(target + 1, false);\r\n        dp[0] = true;\r\n        for (int i = 0; i < nums.size(); ++i) {\r\n            for (int j = target; j >= nums[i]; --j) {\r\n                dp[j] = dp[j] || dp[j - nums[i]];\r\n            }\r\n        }\r\n        return dp[target];\r\n    }\r\n};\r\n```\r\n",
      "createdAt": "2021-09-09T12:49:55.154314+00:00",
      "hitCount": 1843,
      "identifier": "Ss048d",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-zhi-offer-ii-101-fen-ge-deng-he-zi-271j1",
        "title": "剑指 Offer II 101. 分割等和子串---题解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "NUPfPr"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "jian-zhi-offer-2-mian-shi-ti-101-shu-zho-mt8e",
      "status": "PREPUBLISH",
      "summary": "动态规划\n该问题的本质就是，能否从数组中选出若个数字，使它们的和等于 target = sum / 2，那么所有数字之和 sum 必须为偶数，若 sum 不为偶数则等和子集肯定不存在。有 n 个数字，每一步都判断该数字是否加入等和子集，最终需要判断组合的解的个数是否大于 0，所以该问题可以使用动态规划解决。更确切一点该",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1631191148-ipPXvN-image.png",
      "title": "《剑指offer 2 面试题101》 书中算法C++实现",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 988285,
        "viewCount": 1242
      },
      "uuid": "Ss048d",
      "videosInfo": []
    }
  }
}
