{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：利用队列实现广度优先搜索\n我们要构造一个 `sub-lists` 列表，其中每个 `sub-list` 是树中一行的值。行应该按从上到下的顺序排列。\n\n因为我们从根节点开始遍历树，然后向下搜索最接近根节点的节点，这是广度优先搜索。我们使用队列来进行广度优先搜索，队列具有先进先出的特性。\n\n在这里使用栈是错误的选择，栈应用于深度优先搜索。\n\n让我们在树上使用基于队列的遍历算法，看看它的作用。这是你应该记住的一个基本算法。\n\n```java [BFS-Java]\nList<Integer> values = new ArrayList<>();\nQueue<Node> queue = new LinkedList<>();\nqueue.add(root);\nwhile (!queue.isEmpty()) {\n    Node nextNode = queue.remove();\n    values.add(nextNode.val);\n    for (Node child : nextNode.children) {\n        queue.add(child);\n    }\n}\n```\n用一个列表存放节点值，队列存放节点。首先将根节点放到队列中，当队列不为空时，则在队列取出一个节点，并将其子节点添加到队列中。\n\n让我们看看这个算法遍历树时我们得到了什么结果。\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wMS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wMi5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wMy5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wNC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wNS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wNi5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wNy5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wOC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0wOS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xMC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xMS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xMi5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xMy5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xNC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xNS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xNi5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xNy5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xOC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0xOS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yMC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yMS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yMi5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yMy5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yNC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yNS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yNi5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yNy5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yOC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0yOS5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0zMC5wbmc?x-oss-process=image/format,png)\n![在这里插入图片描述](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL0ZpZ3VyZXMvNDI5L3NsaWRlcy0zMS5wbmc?x-oss-process=image/format,png)\n我们可以看到它从左到右，并且从上到写顺序遍历节点。下一步，我们将研究如何如何在这个算法的基础上保存每一层的列表。\n\n**算法：**\n上面的基本算法在一定程度上帮助了我们解决这道题目，但是我们还需要保存每一层的列表，并且在根节点为空时正常工作。\n\n再构造下一层的列表时，我们需要创建新的子列表，然后将该层的所有节点的值插入到列表中。一个很好的方法时在 `while` 循环体开始时记录队列的当前大小 `size`。然后用另一个循环来处理 `size` 数量的节点。这样可以保证 `while` 循环在每一次迭代处理一层。\n\n使用队列十分重要，如果使用 `Vector`，`List`，`Array` 的话，我们删除元素需要 $O(n)$ 的时间复杂度。而队列删除元素只需要 $O(1)$  的时间。\n\n\n```python [solution1-Python]\ndef levelOrder(self, root: 'Node') -> List[List[int]]:\n    if root is None:\n        return []\n    result = []\n    queue = collections.deque([root])\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.popleft()\n            level.append(node.val)\n            queue.extend(node.children)\n        result.append(level)\n    return result\n```\n\n```java [solution1-Java]\n// This code is a modified version of the code posted by\n// #zzzliu on the discussion forums.\nclass Solution {\n\n    public List<List<Integer>> levelOrder(Node root) {      \n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) return result;\n        Queue<Node> queue = new LinkedList<>();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            List<Integer> level = new ArrayList<>();\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                Node node = queue.poll();\n                level.add(node.val);\n                queue.addAll(node.children);\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$。$n$ 指的是节点的数量。\n* 空间复杂度：$O(n)$。\n\n\n####  方法二：简化的广度优先搜索\n**算法：**\n\n```python [solution2-Python]\ndef levelOrder(self, root: 'Node') -> List[List[int]]:\n    if root is None:\n        return []        \n\n    result = []\n    previous_layer = [root]\n\n    while previous_layer:\n        current_layer = []\n        result.append([])\n        for node in previous_layer:\n            result[-1].append(node.val)\n            current_layer.extend(node.children)\n        previous_layer = current_layer\n    return result\n```\n\n```java [solution2-Java]\n// This code is a modified version of the code posted by\n// #zzzliu on the discussion forums.\nclass Solution {\n\n    public List<List<Integer>> levelOrder(Node root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) return result;\n\n        List<Node> previousLayer = Arrays.asList(root);\n\n        while (!previousLayer.isEmpty()) {\n            List<Node> currentLayer = new ArrayList<>();\n            List<Integer> previousVals = new ArrayList<>();\n            for (Node node : previousLayer) {\n                previousVals.add(node.val);\n                currentLayer.addAll(node.children);\n            }\n            result.add(previousVals);\n            previousLayer = currentLayer;\n        }\n\n        return result;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$。$n$ 指的是节点的数量。\n* 空间复杂度：$O(n)$，我们的列表包含所有节点。\n\n\n####  方法三：递归\n**算法：**\n我们可以使用递归来解决这个问题，通常我们不能使用递归进行广度优先搜索。这是因为广度优先搜索基于队列，而递归运行时使用堆栈，适合深度优先搜索。但是在本题中，我们可以以不同的顺序添加到最终列表中，只要我们知道节点在哪一层并确保在那一层的列表顺序正确就可以了。\n\n```python [solution3-Python]\ndef levelOrder(self, root: 'Node') -> List[List[int]]:\n\n    def traverse_node(node, level):\n        if len(result) == level:\n            result.append([])\n        result[level].append(node.val)\n        for child in node.children:\n            traverse_node(child, level + 1)\n\n    result = []\n\n    if root is not None:\n        traverse_node(root, 0)\n    return result\n```\n\n```java [solution3-Java]\nclass Solution {\n\n    private List<List<Integer>> result = new ArrayList<>();\n\n    public List<List<Integer>> levelOrder(Node root) {\n        if (root != null) traverseNode(root, 0);\n        return result;\n    }\n\n    private void traverseNode(Node node, int level) {\n        if (result.size() <= level) {\n            result.add(new ArrayList<>());\n        }\n        result.get(level).add(node.val);\n        for (Node child : node.children) {\n            traverseNode(child, level + 1);\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$。$n$ 指的是节点的数量\n* 空间复杂度：正常情况 $O(\\log n)$，最坏情况 $O(n)$。运行时在堆栈上的空间。",
      "createdAt": "2019-12-23T08:48:47.677452+00:00",
      "hitCount": 24887,
      "identifier": "GkYmv5",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "bfsceng-ci-bian-li-er-cha-shu-by-leet-43-qnna",
        "title": "BFS层次遍历二叉树"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "n-ary-tree-level-order-traversal"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 39,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "ncha-shu-de-ceng-xu-bian-li-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：利用队列实现广度优先搜索 我们要构造一个 sub-lists 列表，其中每个 sub-list 是树中一行的值。行应该按从上到下的顺序排列。 因为我们从根节点开始遍历树，然后向下搜索最接近根节点的节点，这是广度优先搜索。我们使用队列来进行广度优先搜索，队列具有先进先出的特性。 在这里使用栈是错误的选择，栈应用于",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Recursion",
          "nameTranslated": "递归",
          "slug": "recursion",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "N叉树的层序遍历",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 37,
        "id": 60436,
        "viewCount": 18704
      },
      "uuid": "GkYmv5",
      "videosInfo": []
    }
  }
}
