{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 方法一：遍历数组\n由于只需要找出数组中任意一个重复的数字，因此遍历数组，遇到重复的数字即返回。为了判断一个数字是否重复遇到，使用集合存储已经遇到的数字，如果遇到的一个数字已经在集合中，则当前的数字是重复数字。\n\n\n* 初始化集合为空集合，重复的数字 `repeat = -1`\n* 遍历数组中的每个元素：\n  * 将该元素加入集合中，判断是否添加成功\n    * 如果添加失败，说明该元素已经在集合中，因此该元素是重复元素，将该元素的值赋给 `repeat`，并结束遍历\n* 返回 `repeat`\n\n```Java [ ]\nclass Solution {\n    public int findRepeatNumber(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        int repeat = -1;\n        for (int num : nums) {\n            if (!set.add(num)) {\n                repeat = num;\n                break;\n            }\n        }\n        return repeat;\n    }\n}\n```\n\n**复杂性分析**\n\n* 时间复杂度：$O(n)$。\n  * 遍历数组一遍。使用哈希集合（`HashSet`），添加元素的时间复杂度为 $O(1)$，故总的时间复杂度是 $O(n)$。\n* 空间复杂度：$O(n)$。不重复的每个元素都可能存入集合，因此占用 $O(n)$ 额外空间。",
      "createdAt": "2020-02-20T04:06:50.773760+00:00",
      "hitCount": 248594,
      "identifier": "QBdVTs",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "mian-shi-ti-03-shu-zu-zhong-zhong-fu-de-shu-zi-yua",
        "title": "剑指 Offer 03. 数组中重复的数字（哈希表 / 原地交换，清晰图解）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "shu-zu-zhong-zhong-fu-de-shu-zi-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 100,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-03-shu-zu-zhong-zhong-fu-de-shu-zi-b-4",
      "status": "PUBLISHED",
      "summary": "方法一：遍历数组\n由于只需要找出数组中任意一个重复的数字，因此遍历数组，遇到重复的数字即返回。为了判断一个数字是否重复遇到，使用集合存储已经遇到的数字，如果遇到的一个数字已经在集合中，则当前的数字是重复数字。\n\n初始化集合为空集合，重复的数字 repeat = -1\n遍历数组中的每个元素：\n\n将该元素加入集合中，判断是",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "剑指 Offer 03. 数组中重复的数字",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 256,
        "id": 103048,
        "viewCount": 190609
      },
      "uuid": "QBdVTs",
      "videosInfo": []
    }
  }
}
