{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "灵茶山艾府",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/endlesscheng/avatar_1589367048.png",
          "userSlug": "endlesscheng"
        },
        "username": "endlesscheng"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "预处理每个棋子的所有合法移动，然后递归判断，对当前递归的棋子的合法移动，判断是否与前面的棋子的合法移动相冲突，若无冲突则往下递归。\r\n\r\n```go\r\ntype move struct{ dx, dy, t int } // (dx,dy) 表示移动方向，t 表示移动的步数（时间）\r\n\r\nfunc validMovesRook(x, y int) (m []move) {\r\n\tm = append(m, move{}) // 为了方便无重复地计算皇后\r\n\tfor i := 1; i <= 8; i++ {\r\n\t\tif i != x {\r\n\t\t\tm = append(m, move{(i - x) / abs(i-x), 0, abs(i - x)})\r\n\t\t}\r\n\t}\r\n\tfor j := 1; j <= 8; j++ {\r\n\t\tif j != y {\r\n\t\t\tm = append(m, move{0, (j - y) / abs(j-y), abs(j - y)})\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc validMovesBishop(x, y int) (m []move) {\r\n\tm = append(m, move{}) // 为了方便无重复地计算皇后\r\n\tfor i := 1; i <= 8; i++ {\r\n\t\tfor j := 1; j <= 8; j++ {\r\n\t\t\tif (i != x || j != y) && abs(i-x) == abs(j-y) {\r\n\t\t\t\tm = append(m, move{(i - x) / abs(i-x), (j - y) / abs(j-y), abs(i - x)})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc validMovesQueen(x, y int) []move { // 皇后可以有上面两种移动方式\r\n\treturn append(append([]move{{}}, validMovesRook(x, y)[1:]...), validMovesBishop(x, y)[1:]...)\r\n}\r\n\r\n// 判断是否合法，即不存在两个棋子占据同一个格子的情况\r\nfunc isValid(x1, y1, x2, y2 int, m1, m2 move) bool {\r\n\tfor i := 1; i <= m1.t || i <= m2.t; i++ {\r\n\t\tif i <= m1.t {\r\n\t\t\tx1 += m1.dx // 每一秒走一步\r\n\t\t\ty1 += m1.dy\r\n\t\t}\r\n\t\tif i <= m2.t {\r\n\t\t\tx2 += m2.dx\r\n\t\t\ty2 += m2.dy\r\n\t\t}\r\n\t\tif x1 == x2 && y1 == y2 { // 两个棋子占据了同一个格子\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\treturn true\r\n}\r\n\r\nfunc countCombinations(pieces []string, positions [][]int) (ans int) {\r\n\tn := len(pieces)\r\n\tvalidMoves := make([][]move, n)\r\n\tfor i, p := range positions {\r\n\t\tx, y := p[0], p[1]\r\n\t\tif pieces[i] == \"rook\" {\r\n\t\t\tvalidMoves[i] = validMovesRook(x, y) // 预处理所有合法移动\r\n\t\t} else if pieces[i] == \"bishop\" {\r\n\t\t\tvalidMoves[i] = validMovesBishop(x, y)\r\n\t\t} else {\r\n\t\t\tvalidMoves[i] = validMovesQueen(x, y)\r\n\t\t}\r\n\t}\r\n\r\n\tmoves := make([]move, n)\r\n\tvar f func(int)\r\n\tf = func(i int) {\r\n\t\tif i == n {\r\n\t\t\tans++\r\n\t\t\treturn\r\n\t\t}\r\n\t\tx1, y1 := positions[i][0], positions[i][1]\r\n\touter:\r\n\t\tfor _, m := range validMoves[i] { // 枚举当前棋子的所有合法移动\r\n\t\t\tfor j, pos := range positions[:i] { // 枚举前面的棋子的移动\r\n\t\t\t\tif !isValid(x1, y1, pos[0], pos[1], m, moves[j]) { // 判断该移动是否与前面的棋子的移动相冲突\r\n\t\t\t\t\tcontinue outer\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmoves[i] = m // 无冲突\r\n\t\t\tf(i + 1) // 递归进入下一个棋子\r\n\t\t}\r\n\t}\r\n\tf(0)\r\n\treturn\r\n}\r\n\r\nfunc abs(x int) int {\r\n\tif x < 0 {\r\n\t\treturn -x\r\n\t}\r\n\treturn x\r\n}\r\n```",
      "createdAt": "2021-10-31T01:49:07.872527+00:00",
      "hitCount": 545,
      "identifier": "B085Yr",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "li-shun-si-lu-an-ti-yi-mo-ni-ji-ke-by-ne-kx5e",
        "title": "理顺思路，按题意模拟即可"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "number-of-valid-move-combinations-on-chessboard"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "go-mo-ni-by-endlesscheng-kjpt",
      "status": "PREPUBLISH",
      "summary": "预处理每个棋子的所有合法移动，然后递归判断，对当前递归的棋子的合法移动，判断是否与前面的棋子的合法移动相冲突，若无冲突则往下递归。",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Simulation",
          "nameTranslated": "模拟",
          "slug": "simulation",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "Go 模拟",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 2,
        "id": 1075478,
        "viewCount": 372
      },
      "uuid": "B085Yr",
      "videosInfo": []
    }
  }
}
