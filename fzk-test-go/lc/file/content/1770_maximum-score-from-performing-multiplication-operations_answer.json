{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Moutain-Ocean",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/13860971326/avatar_1635685102.png",
          "userSlug": "mountain-ocean"
        },
        "username": "Mountain-Ocean"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "**1.记忆化递归** 查询```logn```, 超时(unordered_map也会超时)\r\n为啥会想到**递归**呢？\r\n定义```F(0, n)```为该问题在区间```[0, n]```上的解，则有:\r\n```F(0, n) = max(nums[0] * mul[0] + F(1, n), nums[n] * mul[n] + F(0, n - 1))```\r\n可以看出，求```F(0, n)```等价于求```F(1, n)```和```F(0, n - 1)```，因为其他几项都是已知的，所以这个问题可以转化为比它规模更小的，且等价的子问题，所以可以用递归求解。\r\n不过这题因为数据规模的原因，导致递归解法不行，不过这个思路也是后续动态规划解法的由来，**因为记忆化递归可以做的，动态规划一定也可以做**。\r\n不然很多人会问:\r\n- **为什么这题可以用动态规划**？\r\n- **动态规划是从天而降的吗**？\r\n- **我怎么能直接想到这题可以用动态规划**？\r\n- ......\r\n其实一切的由来都不是空穴来风，因为我们可以很快判断出这题可以用递归，进而马上推断出它也能用动态规划来求解。\r\n```\r\nclass Solution {\r\npublic:\r\n    std::map<std::pair<int, int>, int> memory;\r\n    int maximumScore(vector<int>& nums, vector<int>& multipliers) {\r\n        int n = nums.size(), m = multipliers.size();\r\n        return recursion(nums, multipliers, 0, nums.size() - 1, 0);\r\n    }\r\n    int recursion(const vector<int>& nums, const vector<int>& multipliers, int l, int r, int depth) {\r\n        auto pair = make_pair(l, r);\r\n        if (memory.find(pair) != memory.end()) {\r\n            return memory[pair];\r\n        }\r\n        if (depth == multipliers.size() - 1) {\r\n            int choseLeft = nums[l] * multipliers.back();\r\n            int choseRight = nums[r] * multipliers.back();\r\n            memory[pair] = std::max(choseLeft, choseRight);\r\n            return std::max(choseLeft, choseRight);\r\n        }\r\n        int choseLeft = nums[l] * multipliers[depth] + recursion(nums, multipliers, l + 1, r, depth + 1);\r\n        int choseRight = nums[r] * multipliers[depth] + recursion(nums, multipliers, l, r - 1, depth + 1);\r\n        memory[pair] = std::max(choseLeft, choseRight);\r\n        return std::max(choseLeft, choseRight);\r\n    }\r\n};\r\n```\r\n\r\n**2.动态规划**\r\n**核心思想**: **动态规划的本质就是记忆化的递归**，动态规划的思想是从上到下地构造问题的解，从下到上地解决问题，这和递归的思路是完全一样的，因此, 所有记忆化递归可以解决的问题，都可以用动态规划来解决(反过来也是)，只要把递归式转化为状态转移方程就可以了, 递推式和状态转移方程是等价的。\r\n**状态**: ```dp[i][j]```表示前面取```i```个, 末尾取```j```个 ```，(i + j = k)```\r\n**状态转移方程**:\r\n- ```dp[i][j] = dp[i - 1][j] + nums[i - 1] * mul[k - 1]``` (```i == k```, 都是取前面)\r\n- ```dp[i][j] = dp[i][j - 1] + nums[n - j] * mul[k - 1]``` (```j == k```, 都是取后面)\r\n- ```dp[i][j] = std::max(dp[i - 1][j] + nums[i - 1] * mul[k - 1], dp[i][j - 1] + nums[n - j] * mul[k - 1])``` ```(i != k && j != k)```\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    int maximumScore(vector<int>& nums, vector<int>& multipliers) {\r\n        int n = nums.size(), m = multipliers.size();\r\n        vector<vector<int>> dp(m + 1, vector<int>(m + 1, 0));\r\n        int ans = INT_MIN;\r\n        for (int k = 1; k <= m; ++k) {\r\n            for (int i = 0; i <= k; ++i) {\r\n                int j = k - i;\r\n                if (i == k) {\r\n                    // 都是取前面\r\n                    dp[i][j] = dp[i - 1][j] + nums[i - 1] * multipliers[k - 1];\r\n                }\r\n                else if (j == k) {\r\n                    // 都是取后面\r\n                    dp[i][j] = dp[i][j - 1] + nums[n - j] * multipliers[k - 1];\r\n                }\r\n                else {\r\n                    // 取前面，取后面，选最大\r\n                    int front = dp[i - 1][j] + nums[i - 1] * multipliers[k - 1];\r\n                    int after = dp[i][j - 1] + nums[n - j] * multipliers[k - 1];\r\n                    dp[i][j] = std::max(front, after);\r\n                }\r\n                if (k == m) ans = std::max(ans, dp[i][j]);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n```\r\n如果能给我一个赞，那将是对我最大的鼓励^_^\r\n\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2021-11-26T08:46:11.327193+00:00",
      "hitCount": 13,
      "identifier": "pF0uu3",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "cer-wei-dong-tai-gui-hua-by-sweeping_mon-af3c",
        "title": "【C++二维动态规划】"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-score-from-performing-multiplication-operations"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "ji-yi-hua-di-gui-chao-shi-zhuan-dong-tai-60ru",
      "status": "PREPUBLISH",
      "summary": "1.记忆化递归 查询logn, 超时(unordered_map也会超时)\n为啥会想到递归呢？\n定义F(0, n)为该问题在区间[0, n]上的解，则有:\nF(0, n) = max(nums[0] * mul[0] + F(1, n), nums[n] * mul[n] + F(0, n - 1))\n可以看出，求F(",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Memoization",
          "nameTranslated": "记忆化搜索",
          "slug": "memoization",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "记忆化递归超时 转动态规划 递归式转化为状态转移方程",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1123685,
        "viewCount": 3
      },
      "uuid": "pF0uu3",
      "videosInfo": []
    }
  }
}
