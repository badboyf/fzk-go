{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：计数\n\n如果位于 `(x, y)` 的服务器能够与至少一台其它服务器进行通信，就必须满足：要么第 `x` 行有一台其它服务器，要么第 `y` 列有一台其它服务器。\n\n因此我们先遍历所有的服务器，并用数组 `count_m` 和 `count_n` 分别记录每一行和每一列的服务器数量。在计数完成之后，我们再次遍历所有的服务器，如果位于 `(x, y)` 的服务器满足 `count_m[x] > 1`（即第 `x` 行至少有一台其它服务器）或 `count_n[y] > 1`（即第 `y` 列至少有一台其它服务器），那么它就能够与至少一台其它服务器进行通信，将其计入答案。\n\n```C++ [sol1]\nclass Solution {\npublic:\n    int countServers(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<int> count_m(m), count_n(n);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == 1) {\n                    ++count_m[i];\n                    ++count_n[j];\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j] == 1 && (count_m[i] > 1 || count_n[j] > 1)) {\n                    ++ans;\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1]\nclass Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        count_m, count_n = [0] * m, [0] * n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    count_m[i] += 1\n                    count_n[j] += 1\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1 and (count_m[i] > 1 or count_n[j] > 1):\n                    ans += 1\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(MN)$，其中 $M$ 和 $N$ 分别是网格的高和宽。\n\n- 空间复杂度：$O(M + N)$。",
      "createdAt": "2020-02-19T03:35:58.297271+00:00",
      "hitCount": 5677,
      "identifier": "KqEJXq",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1267-cji-hu-shuang-bai-de-mo-ni-jie-fa-b-iw50",
        "title": "1267. c++几乎双百的模拟解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "count-servers-that-communicate"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 18,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "tong-ji-can-yu-tong-xin-de-fu-wu-qi-by-leetcode-so",
      "status": "PUBLISHED",
      "summary": " 方法一：计数\n如果位于 (x, y) 的服务器能够与至少一台其它服务器进行通信，就必须满足：要么第 x 行有一台其它服务器，要么第 y 列有一台其它服务器。\n因此我们先遍历所有的服务器，并用数组 count_m 和 count_n 分别记录每一行和每一列的服务器数量。在计数完成之后，我们再次遍历所有的服务器，如果位于",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "统计参与通信的服务器",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 17,
        "id": 101819,
        "viewCount": 4624
      },
      "uuid": "KqEJXq",
      "videosInfo": []
    }
  }
}
