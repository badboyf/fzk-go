{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "张佳晨",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/user1653c/avatar_1532062313.png",
          "userSlug": "jiachen_zhang"
        },
        "username": "Jiachen_Zhang"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路：\n\n这道题目的关键是 `按字典序排列小于 A 的最大可能排列`， 那么有\n\n- 对当前序列进行**逆序**查找，找到第一个降序的位置 `i`，使得 $A[i]>A[i+1]$\n\n  - 由于 $A[i]>A[i+1]$，必能构造比当前字典序小的序列\n  - 由于逆序查找，交换 `A[i]` 为最优解\n\n- 寻找在 `A[i]` 最左边且小于 `A[i]` 的最大的数字 `A[j]`\n\n  - 由于 $A[j] < A[]i]$, 交换 `A[i]` 与 `A[j]` 后的序列字典序一定小于当前字典序\n  - 由于 `A[j]` 是满足关系的最大的最左的，因此一定是满足小于关系的交换后字典序最大的\n\n  > 这里的两条，最大和最左边缺一不可，可以结合样例\n  >\n  > [3, 1, 1, 3] => [1, 3, 1, 3]\n  >\n  > [3, 1, 2, 3] => [2, 1, 3, 3]\n  >\n  >\n  >\n  > [4, 1, 2, 3] => [3, 1, 2, 4]\n  >\n  > 理解\n\n### 解题方案：【字典序】 ( 1ms)\n\n> 执行用时 : `1 ms`，在 `Previous Permutation With One Swap` 的 `Java` 提交中击败了 `90.41%` 的用户。\n>\n> 内存消耗 : `50.9 MB`，在 `Previous Permutation With One Swap` 的 `Java` 提交中击败了 `100.00%` 的用户。\n\n```java [-Java]\nclass Solution {\n    public int[] prevPermOpt1(int[] A) {\n        int len = A.length;\n        int curMax = -1;\n        int index = -1;\n        boolean hasResult = false;\n        for (int i = len - 2; i >= 0; i--) {\n            if (A[i+1] < A[i]) {                    // 此处逆序，需要移动A[i]\n                for (int j = i + 1; j < len; j++) { // 寻找与 A[i] 交换的位置\n                   if (A[i] > A[j]) {               // 必须满足 A[i] > A[j]，否则不能满足交换后的字典序小于原始字典序\n                        hasResult = true;\n                        if (A[j] > curMax) {        \n                            curMax = A[j];\n                            index = j;\n                        }\n                   } \n                }\n                if (hasResult) {\n                    int tmp = A[i];\n                    A[i] = A[index];\n                    A[index] = tmp;\n                    return A;\n                }\n            }\n        }\n        return A;\n    }\n}\n```\n\n#### 复杂度分析:\n\n时间：$O(N)$\n\n空间：$O(1)$\n\n\n\n\n\n\n\n",
      "createdAt": "2019-05-28T15:53:32.873369+00:00",
      "hitCount": 5889,
      "identifier": "ichBVI",
      "isEditorsPick": true,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dan-diao-qu-jian-tan-xin-han-zheng-ming-ik4vq",
        "title": "单调区间 + 贪心（含证明）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "previous-permutation-with-one-swap"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 14,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "han-xiang-xi-fen-xi-si-lu-jian-dan-ti-mu-you-qu-by",
      "status": "PUBLISHED",
      "summary": "解题思路：\n这道题目的关键是 按字典序排列小于 A 的最大可能排列， 那么有\n\n\n对当前序列进行逆序查找，找到第一个降序的位置 i，使得 A[i]>A[i+1]\n\n由于 A[i]>A[i+1]，必能构造比当前字典序小的序列\n由于逆序查找，交换 A[i] 为最优解\n\n\n\n寻找在 A[i] 最左边且小于 A[i] 的最大的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "【含详细分析】 思路简单题目有趣",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 15,
        "id": 6399,
        "viewCount": 4310
      },
      "uuid": "ichBVI",
      "videosInfo": []
    }
  }
}
