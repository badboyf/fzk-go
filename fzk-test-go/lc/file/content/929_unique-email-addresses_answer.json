{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：规范化表示\n\n**思路和算法**\n\n对于每个电子邮件地址，我们求出它的规范化表示（即根据 `'.'` 和 `'+'` 的规则进行处理后得到的，本地名称中仅包含小写字母的电子邮件地址）。我们对每一个地址依次进行如下的操作：\n\n* 将电子邮件地址根据 `'@'` 分成本地名称 `local` 和域名 `reset` 两部分，其中域名部分包含 `'@'`，且不需要进行额外的处理；\n\n* 如果本地名称中有 `'+'`，那么移除 `'+'` 以及它后面出现的所有字符；\n\n* 移除本地名称中的所有 `'.'`；\n\n* 处理完成的本地名称和域名进行连接，得到电子邮件地址的规范化表示 `local + rest` 。\n\n在得到了所有电子邮件地址的规范化表示后，我们将它们放入集合（ `Set` ）中，就可以获知不同地址的数目。\n\n```java [solution-Java]\nclass Solution {\n  public int numUniqueEmails(String[] emails) {\n    Set<String> seen = new HashSet();\n    for (String email : emails) {\n      int i = email.indexOf('@');\n      String local = email.substring(0, i);\n      String rest = email.substring(i);\n      if (local.contains(\"+\")) {\n        local = local.substring(0, local.indexOf('+'));\n      }\n      // Note: one should escape the specific character '.',\n      // since it is treated as a regex expression.\n      local = local.replaceAll(\"\\\\.\", \"\");\n      seen.add(local + rest);\n    }\n\n    return seen.size();\n  }\n}\n\n```\n\n```python [solution-Python]\nclass Solution(object):\n    def numUniqueEmails(self, emails):\n        seen = set()\n        for email in emails:\n            local, domain = email.split('@')\n            if '+' in local:\n                local = local[:local.index('+')]\n            seen.add(local.replace('.','') + '@' + domain)\n        return len(seen)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(MC)$，其中 $M$ 是所有电子邮件中长度最长的长度，$C$ 是电子邮件地址的数目。\n\n* 空间复杂度：$O(MC)$。",
      "createdAt": "2019-08-06T05:37:34.937743+00:00",
      "hitCount": 6793,
      "identifier": "5XjPNG",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ha-xi-zi-fu-chuan-chu-li-java-by-fyzj-9sw5",
        "title": "哈希，字符串处理（java）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "unique-email-addresses"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "du-te-de-dian-zi-you-jian-di-zhi-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法：规范化表示\n思路和算法\n对于每个电子邮件地址，我们求出它的规范化表示（即根据 '.' 和 '+' 的规则进行处理后得到的，本地名称中仅包含小写字母的电子邮件地址）。我们对每一个地址依次进行如下的操作：\n\n\n将电子邮件地址根据 '@' 分成本地名称 local 和域名 reset 两部分，其中域名部分包含 '@'",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "独特的电子邮件地址",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 18,
        "id": 18738,
        "viewCount": 5620
      },
      "uuid": "5XjPNG",
      "videosInfo": []
    }
  }
}
