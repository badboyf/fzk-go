{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：广度优先搜索\n\n**思路与算法**\n\n我们可以使用广度优先搜索（也可以使用深度优先搜索）找出所有的岛屿，具体可以参考[「200. 岛屿数量」的官方题解](https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-shu-liang-by-leetcode/)。\n\n在 $\\textit{grid}_2$ 中搜索某一个岛屿的过程中，我们需要判断岛屿包含的每一个格子是否都在 $\\textit{grid}_1$ 中出现了。如果全部出现，那么将答案增加 $1$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    static constexpr array<array<int, 2>, 4> dirs = {{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}};\npublic:\n    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {\n        int m = grid1.size(), n = grid1[0].size();\n\n        auto bfs = [&](int sx, int sy) {\n            queue<pair<int,int>> q;\n            q.emplace(sx, sy);\n            grid2[sx][sy] = 0;\n            // 判断岛屿包含的每一个格子是否都在 grid1 中出现了\n            bool check = grid1[sx][sy];\n            while (!q.empty()) {\n                auto [x, y] = q.front();\n                q.pop();\n                for (int d = 0; d < 4; ++d) {\n                    int nx = x + dirs[d][0];\n                    int ny = y + dirs[d][1];\n                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && grid2[nx][ny] == 1) {\n                        q.emplace(nx, ny);\n                        grid2[nx][ny] = 0;\n                        if (grid1[nx][ny] != 1) {\n                            check = false;\n                        }\n                    }\n                }\n            }\n            return check;\n        };\n\n        int ans = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid2[i][j] == 1) {\n                    ans += bfs(i, j);\n                }\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:\n        m, n = len(grid1), len(grid1[0])\n\n        def bfs(sx: int, sy: int) -> int:\n            q = deque([(sx, sy)])\n            grid2[sx][sy] = 0\n            # 判断岛屿包含的每一个格子是否都在 grid1 中出现了\n            check = (grid1[sx][sy] == 1)\n            while q:\n                x, y = q.popleft()\n                for nx, ny in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                    if 0 <= nx < m and 0 <= ny < n and grid2[nx][ny] == 1:\n                        q.append((nx, ny))\n                        grid2[nx][ny] = 0\n                        if grid1[nx][ny] != 1:\n                            check = False\n            \n            return int(check)\n\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if grid2[i][j] == 1:\n                    ans += bfs(i, j)\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$。\n\n- 空间复杂度：$O(mn)$，即为广度优先搜索中队列需要使用的空间。",
      "createdAt": "2021-06-20T04:30:41.911361+00:00",
      "hitCount": 3879,
      "identifier": "k3qWah",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1905-tong-ji-zi-dao-yu-java-zhong-ji-bai-ze7j",
        "title": "1905. 统计子岛屿 - Java 中击败了 57.24% - 感染"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "count-sub-islands"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "tong-ji-zi-dao-yu-by-leetcode-solution-x32x",
      "status": "PUBLISHED",
      "summary": "方法一：广度优先搜索 思路与算法 我们可以使用广度优先搜索（也可以使用深度优先搜索）找出所有的岛屿，具体可以参考「200. 岛屿数量」的官方题解。 在 $\\textit{grid}_2$ 中搜索某一个岛屿的过程中，我们需要判断岛屿包含的每一个格子是否都在 $\\textit{grid}_1$ 中出现了。如果全部出现，那么",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "统计子岛屿",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 24,
        "id": 836393,
        "viewCount": 2764
      },
      "uuid": "k3qWah",
      "videosInfo": []
    }
  }
}
