{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：维护有序的单词数组\n\n**思路与算法**\n\n我们用字符串数组 $\\textit{arr}$ 来保存每个位置的单词，并遍历乱序字符串 $s$。每当遍历到数字时，我们会将数字前的单词填入 $\\textit{arr}$ 的对应位置。\n\n与此同时，我们统计单词的数量。最终，我们按要求从 $\\textit{arr}$ 中构造顺序的句子并返回。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    string sortSentence(string s) {\n        vector<string> arr(9);   // 单词数组\n        string tmp = \"\";   // 当前单词\n        int n = 0;   // 单词数量\n        // 遍历字符串\n        for (auto c: s){\n            if (c >= '0' && c <= '9'){\n                // 如果为数字，计算对应的单词数组下标，将单词放入对应位置，并清空当前单词\n                // 数组下标为 0 开头，位置索引为 1 开头\n                arr[c-'0'-1] = tmp;\n                tmp.clear();\n                ++n;\n            }\n            else if (c != ' '){\n                // 如果为字母，更新当前单词\n                tmp.push_back(c);\n            }\n        }\n        string res = arr[0];   // 原本顺序的句子 \n        for (int i = 1; i < n; ++i){\n            res += \" \" + arr[i];\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def sortSentence(self, s: str) -> str:\n        s = s.split()\n        n = len(s)   # 单词数量\n        arr = [\"\" for _ in range(n)]   # 单词数组\n        for wd in s:\n            # 计算位置索引对应的单词数组下标，并将单词放入对应位置\n            # 数组下标为 0 开头，位置索引为 1 开头\n            arr[int(wd[-1])-1] = wd[:-1]\n        return \" \".join(arr)\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m)$，其中 $m$ 为 $s$ 的长度。遍历字符串、维护单词数组、输出结果的时间复杂度均为 $O(m)$。\n\n- 空间复杂度：$O(m)$，其中 $m$ 为 $s$ 的长度。即为建立并维护单词数组所需的空间。",
      "createdAt": "2021-05-16T04:29:36.962354+00:00",
      "hitCount": 2677,
      "identifier": "WalCNJ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-zhi-xing-yong-shi-0-ms-zai-suo-you-c-t-ax37",
        "title": "C++ 执行用时： 0 ms , 在所有 C++ 提交中击败了 100.00% 的用户"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "sorting-the-sentence"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "jiang-ju-zi-pai-xu-by-leetcode-solution-wnts",
      "status": "PUBLISHED",
      "summary": "方法一：维护有序的单词数组 思路与算法 我们用字符串数组 $\\textit{arr}$ 来保存每个位置的单词，并遍历乱序字符串 $s$。每当遍历到数字时，我们会将数字前的单词填入 $\\textit{arr}$ 的对应位置。 与此同时，我们统计单词的数量。最终，我们按要求从 $\\textit{arr}$ 中构造顺序的句子",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "将句子排序",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 779147,
        "viewCount": 2167
      },
      "uuid": "WalCNJ",
      "videosInfo": []
    }
  }
}
