{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心\n\n要使需要的船数尽可能地少，应当使载两人的船尽可能地多。\n\n设 $\\textit{people}$ 的长度为 $n$。考虑体重最轻的人：\n\n- 若他不能与体重最重的人同乘一艘船，那么体重最重的人无法与任何人同乘一艘船，此时应单独分配一艘船给体重最重的人。从 $\\textit{people}$ 中去掉体重最重的人后，我们缩小了问题的规模，变成求解剩余 $n-1$ 个人所需的最小船数，将其加一即为原问题的答案。\n- 若他能与体重最重的人同乘一艘船，那么他能与其余任何人同乘一艘船，为了尽可能地利用船的承载重量，选择与体重最重的人同乘一艘船是最优的。从 $\\textit{people}$ 中去掉体重最轻和体重最重的人后，我们缩小了问题的规模，变成求解剩余 $n-2$ 个人所需的最小船数，将其加一即为原问题的答案。\n\n在代码实现时，我们可以先对 $\\textit{people}$ 排序，然后用两个指针分别指向体重最轻和体重最重的人，按照上述规则来移动指针，并统计答案。\n\n```Python [sol1-Python3]\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        ans = 0\n        people.sort()\n        light, heavy = 0, len(people) - 1\n        while light <= heavy:\n            if people[light] + people[heavy] > limit:\n                heavy -= 1\n            else:\n                light += 1\n                heavy -= 1\n            ans += 1\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numRescueBoats(vector<int> &people, int limit) {\n        int ans = 0;\n        sort(people.begin(), people.end());\n        int light = 0, heavy = people.size() - 1;\n        while (light <= heavy) {\n            if (people[light] + people[heavy] > limit) {\n                --heavy;\n            } else {\n                ++light;\n                --heavy;\n            }\n            ++ans;\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numRescueBoats(int[] people, int limit) {\n        int ans = 0;\n        Arrays.sort(people);\n        int light = 0, heavy = people.length - 1;\n        while (light <= heavy) {\n            if (people[light] + people[heavy] <= limit) {\n                ++light;\n            }\n            --heavy;\n            ++ans;\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NumRescueBoats(int[] people, int limit) {\n        int ans = 0;\n        Array.Sort(people);\n        int light = 0, heavy = people.Length - 1;\n        while (light <= heavy) {\n            if (people[light] + people[heavy] <= limit) {\n                ++light;\n            }\n            --heavy;\n            ++ans;\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc numRescueBoats(people []int, limit int) (ans int) {\n    sort.Ints(people)\n    light, heavy := 0, len(people)-1\n    for light <= heavy {\n        if people[light]+people[heavy] > limit {\n            heavy--\n        } else {\n            light++\n            heavy--\n        }\n        ans++\n    }\n    return\n}\n```\n\n```C [sol1-C]\nint cmp(int *a, int *b) {\n    return *a - *b;\n}\n\nint numRescueBoats(int *people, int peopleSize, int limit) {\n    int ans = 0;\n    qsort(people, peopleSize, sizeof(int), cmp);\n    int light = 0, heavy = peopleSize - 1;\n    while (light <= heavy) {\n        if (people[light] + people[heavy] > limit) {\n            --heavy;\n        } else {\n            ++light;\n            --heavy;\n        }\n        ++ans;\n    }\n    return ans;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numRescueBoats = function(people, limit) {\n    let ans = 0;\n    people.sort((a, b) => a - b);\n    let light = 0, heavy = people.length - 1;\n    while (light <= heavy) {\n        if (people[light] + people[heavy] <= limit) {\n            ++light;\n        }\n        --heavy;\n        ++ans;\n    }\n    return ans;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 是数组 $\\textit{people}$ 的长度。算法的时间开销主要在排序上。\n\n- 空间复杂度：$O(\\log n)$，排序所需额外的空间复杂度为 $O(\\log n)$。",
      "createdAt": "2021-08-25T14:18:28.194198+00:00",
      "hitCount": 23308,
      "identifier": "g3vqAJ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-noxiang-xin-ke-xue-xi-hosg8",
        "title": "【宫水三叶の相信科学系列】归纳法证明贪心解为最优解之一"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "boats-to-save-people"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 31,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "jiu-sheng-ting-by-leetcode-solution-0nsp",
      "status": "PUBLISHED",
      "summary": "方法一：贪心 要使需要的船数尽可能地少，应当使载两人的船尽可能地多。 设 $\\textit{people}$ 的长度为 $n$。考虑体重最轻的人： 若他不能与体重最重的人同乘一艘船，那么体重最重的人无法与任何人同乘一艘船，此时应单独分配一艘船给体重最重的人。从 $\\textit{people}$ 中去掉体重最重的人后，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "救生艇",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 143,
        "id": 958838,
        "viewCount": 17880
      },
      "uuid": "g3vqAJ",
      "videosInfo": []
    }
  }
}
