{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "HexCat",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/hexcat/avatar_1566009570.png",
          "userSlug": "hexcat"
        },
        "username": "hexcat"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "# 1. 解法1：排序\r\n\r\n首先，我们可以很容易想到一种简单的解法：将数组进行**排序**，然后从中间位置进行**等分**（如果数组长度为奇数，则将中间的元素分到前面），然后将两个数组进行**穿插**。\r\n\r\n例如：\r\n对于数组[1, 5, 2, 4, 3]，我们将其排序，得到[1, 2, 3, 4, 5]，然后将其分割为[1, 2, 3]和[4, 5]，对两个数组进行穿插，得到[1, 4, 2, 5, 3]。\r\n\r\n**但是这一解法有一个问题**，例如，对于数组[1, 2, 2, 3]，按照这种做法求得的结果仍为[1, 2, 2, 3]。如果题目不要求各元素严格大于或小于相邻元素，即，只要求nums[0] <= nums[1] >= nums[2] <= nums[3]...，那么这一解法是符合要求的，但题目要求元素相互严格大于或小于，那么需要稍微做一点改进。\r\n\r\n*为了方便阅读，我们在下文中定义较小的子数组为数组A，较大的子数组为数组B*。显然，出现上述现象是因为nums中存在重复元素。实际上，由于穿插之后，相邻元素必来自不同子数组，所以A或B内部出现重复元素是不会出现上述现象的。所以，出现上述情况其实是因为数组A和数组B**出现了相同元素**，我们用r来表示这一元素。而且我们可以很容易发现，如果A和B都存在r，那么r一定是**A的最大值**，**B的最小值**，这意味着r一定出现在A的尾部，B的头部。其实，如果这一数字的个数较少，不会出现这一现象，只有当这一数字个数达到原数组元素总数的一半，才会在穿插后的出现在相邻位置。以下举几个例子进行形象地说明：\r\n\r\n例如，对于数组[1,1,2,2,3,3],分割为[1,1,2]和[2,3,3]，虽然A和B都出现了2，但穿插后为[1,**2**,1,3,**2**,3]，满足要求。\r\n而如果2的个数再多一些，即[1,1,2,2,**2**,3]，分割为[1,1,2]和[2,2,3]，最终结果为[1,**2**,1,**2**,**2**,3]，来自A的2和来自B的2出现在了相邻位置。\r\n\r\n出现这一问题是因为重复数在A和B中的位置决定的，因为r在A尾部，B头部，所以如果r个数太多（**大于等于**(length(nums) + 1)/2），就可能在穿插后相邻。要解决这一问题，我们需要使A的r和B的r在**穿插后尽可能分开**。一种可行的办法是将A和B反序：\r\n\r\n例如，对于数组[1,1,2,2,2,3]，分割为[1,1,2]和[2,2,3]，分别反序后得到[2, 1, 1]和[3, 2, 2]，此时2在A头部，B尾部，穿插后就不会发生相邻了。\r\n\r\n当然，这只能解决r的个数**等于**(length(nums) + 1)/2的情况，如果r的个数**大于**(length(nums) + 1)/2，还是会出现相邻。但实际上，这种情况是不存在有效解的，也就是说，这种数组对于本题来说是非法的。\r\n\r\n此时我们得到了第一个解法，由于需要使用排序，所以时间复杂度为O(NlogN)，由于需要存储A和B，所以空间复杂度为O(N)。\r\n\r\n# 2. 解法2：快速选择 + 3-way-partition\r\n\r\n上一解法之所以时间复杂度为O(NlogN)，是因为使用了排序。但回顾解法1，我们发现，我们实际上**并不关心A和B内部的元素顺序**，只需要满足A和B长度相同（或相差1），且A中的元素小于等于B中的元素，且r出现在A的头部和B的尾部即可。实际上，由于A和B长度相同（或相差1），所以r实际上是原数组的中位数，下文改用mid来表示。因此，我们第一步其实不需要进行排序，而**只需要找到中位数即可**。而寻找中位数可以用**快速选择算法**实现，时间复杂度为O(n)。\r\n\r\n该算法与快速排序算法类似，在一次递归调用中，首先进行partition过程，即利用一个元素将原数组划分为两个子数组，然后将这一元素放在两个数组之间。两者区别在于快速排序接下来需要对左右两个子数组进行递归，而快速选择只需要对一侧子数组进行递归，所以快速选择的时间复杂度为O(n)。详细原理可以参考有关资料，此处不做赘述。\r\n\r\n在C++中，可以用STL的nth_element()函数进行快速选择，这一函数的效果是将数组中第n小的元素放在数组的第n个位置，同时保证其左侧元素不大于自身，右侧元素不小于自身。\r\n\r\n找到中位数后，我们需要利用**3-way-partition**算法将**中位数放在数组中部，同时将小于中位数的数放在左侧，大于中位数的数放在右侧**。该算法与快速排序的partition过程也很类似，只需要在快速排序的partition过程的基础上，添加一个指针k用于定位大数：\r\n\r\n```\r\nint i = 0, j = 0, k = nums.size() - 1;\r\n        while(j < k){\r\n            if(nums[j] > mid){\r\n                swap(nums[j], nums[k]);\r\n                --k;\r\n            }\r\n            else if(nums[j] < mid){\r\n                swap(nums[j], nums[i]);\r\n                ++i;\r\n                ++j;\r\n            }\r\n            else{\r\n                ++j;\r\n            }\r\n        }\r\n```\r\n\r\n在这一过程中，指针j和k从左右两侧同时出发相向而行，每次要么j移动一步，要么k移动一步，直到相遇为止。这一过程的时间复杂度显然为O(N)。\r\n\r\n至此，原数组被分为3个部分，左侧为小于中位数的数，中间为中位数，右侧为大于中位数的数。之后的做法就与解法1相同了：我们只需要将数组从中间等分为2个部分，然后反序，穿插，即可得到最终结果。以下为完整实现：\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    void wiggleSort(vector<int>& nums) {\r\n        auto midptr = nums.begin() + nums.size() / 2;\r\n        nth_element(nums.begin(), midptr, nums.end());\r\n        int mid = *midptr;\r\n        \r\n        // 3-way-partition\r\n        int i = 0, j = 0, k = nums.size() - 1;\r\n        while(j < k){\r\n            if(nums[j] > mid){\r\n                swap(nums[j], nums[k]);\r\n                --k;\r\n            }\r\n            else if(nums[j] < mid){\r\n                swap(nums[j], nums[i]);\r\n                ++i;\r\n                ++j;\r\n            }\r\n            else{\r\n                ++j;\r\n            }\r\n        }\r\n        \r\n        if(nums.size() % 2) ++midptr;\r\n        vector<int> tmp1(nums.begin(), midptr);\r\n        vector<int> tmp2(midptr, nums.end());\r\n        for(int i = 0; i < tmp1.size(); ++i){\r\n            nums[2 * i] = tmp1[tmp1.size() - 1 - i];\r\n        }\r\n        for(int i = 0; i < tmp2.size(); ++i){\r\n            nums[2 * i + 1] = tmp2[tmp2.size() - 1 - i];\r\n        }\r\n    }\r\n};\r\n```\r\n\r\n快速选择过程也可以手动实现，以下为手动实现的完整代码：\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    void wiggleSort(vector<int>& nums) {\r\n        int len = nums.size();\r\n        quickSelect(nums, 0, len, len / 2);\r\n        auto midptr = nums.begin() + len / 2;\r\n        int mid = *midptr;\r\n        \r\n        // 3-way-partition\r\n        int i = 0, j = 0, k = nums.size() - 1;\r\n        while(j < k){\r\n            if(nums[j] > mid){\r\n                swap(nums[j], nums[k]);\r\n                --k;\r\n            }\r\n            else if(nums[j] < mid){\r\n                swap(nums[j], nums[i]);\r\n                ++i;\r\n                ++j;\r\n            }\r\n            else{\r\n                ++j;\r\n            }\r\n        }\r\n        \r\n        if(nums.size() % 2) ++midptr;\r\n        vector<int> tmp1(nums.begin(), midptr);\r\n        vector<int> tmp2(midptr, nums.end());\r\n        for(int i = 0; i < tmp1.size(); ++i){\r\n            nums[2 * i] = tmp1[tmp1.size() - 1 - i];\r\n        }\r\n        for(int i = 0; i < tmp2.size(); ++i){\r\n            nums[2 * i + 1] = tmp2[tmp2.size() - 1 - i];\r\n        }\r\n    }\r\n    \r\nprivate:\r\n    void quickSelect(vector<int> &nums, int begin, int end, int n){\r\n        int t = nums[end - 1];\r\n        int i = begin, j = begin;\r\n        while(j < end){\r\n            if(nums[j] <= t){\r\n                swap(nums[i++], nums[j++]);\r\n            }\r\n            else{\r\n                ++j;\r\n            }\r\n        }\r\n        if(i - 1 > n){\r\n            quickSelect(nums, begin, i - 1, n);\r\n        }\r\n        else if(i <= n){\r\n            quickSelect(nums, i, end, n);\r\n        }\r\n    }\r\n};\r\n```\r\n\r\n由于省略了排序过程，且快速选择和3-way-partition的时间复杂度都为O(N)，所以这一解法时间复杂度为O(N)。和解法1相同，解法2也需要保存A数组和B数组，所以空间复杂度不变，仍未O(N)。\r\n\r\n# 3. 解法3：快速选择 + 3-way-partition + 虚地址\r\n\r\n接下来，我们思考如何简化空间复杂度。上文提到，解法1和2之所以空间复杂度为O(N)，是因为最后一步穿插之前，需要保存A和B。在这里我们使用所谓的虚地址的方法来省略穿插的步骤，或者说将穿插融入之前的步骤，即在3-way-partiton（或排序）的过程中顺便完成穿插，由此来省略保存A和B的步骤。“地址”是一种抽象的概念，在本题中地址就是数组的索引。\r\n\r\nBTW，由于虚地址较为抽象，需要读者有一定的数学基础和抽象思维能力，如果实在理解不了没有关系，解法2已经是足够优秀的解法。\r\n\r\n如果读者学习过操作系统，可以利用操作系统中的物理地址空间和逻辑地址空间的概念来理解。简单来说，这一方法就是将数组从原本的空间映射到一个虚拟的空间，虚拟空间中的索引和真实空间的索引存在某种映射关系。在本题中，我们需要建立一种映射关系来描述“分割”和“穿插”的过程，建立这一映射关系后，我们可以**利用虚拟地址**访问元素，**在虚拟空间中**对数组进行3-way-partition或排序，使数组**在虚拟空间中**满足某一空间关系。完成后，数组在真实空间中的空间结构就是我们最终需要的空间结构。\r\n\r\n在某些场景下，可能映射关系很简洁，有些场景下，映射关系可能很复杂。而如果映射关系太复杂，编程时将会及其繁琐容易出错。在本题中，想建立一个简洁的映射，有必要对前面的3-way-partition进行一定的修改，我们不再将小数排在左边，大数排在右边，而是将**大数排在左边，小数排在右边**，在这种情况下我们可以用一个非常简洁的公式来描述映射关系：`#define A(i) nums[(1+2*(i)) % (n|1)]`，i是虚拟地址，(1+2*(i)) % (n|1)是实际地址。其中n为数组长度，‘|’为按位或，如果n为偶数，(n|1)为n+1，如果n为奇数，(n|1)仍为n。\r\n\r\n```\r\nAccessing A(0) actually accesses nums[1].\r\nAccessing A(1) actually accesses nums[3].\r\nAccessing A(2) actually accesses nums[5].\r\nAccessing A(3) actually accesses nums[7].\r\nAccessing A(4) actually accesses nums[9].\r\nAccessing A(5) actually accesses nums[0].\r\nAccessing A(6) actually accesses nums[2].\r\nAccessing A(7) actually accesses nums[4].\r\nAccessing A(8) actually accesses nums[6].\r\nAccessing A(9) actually accesses nums[8].\r\n```\r\n\r\n\r\n以下为完整代码：\r\n\r\n```\r\nclass Solution {\r\npublic:\r\n    void wiggleSort(vector<int>& nums) {\r\n        int n = nums.size();\r\n\r\n        // Find a median.\r\n        auto midptr = nums.begin() + n / 2;\r\n        nth_element(nums.begin(), midptr, nums.end());\r\n        int mid = *midptr;\r\n\r\n        // Index-rewiring.\r\n        #define A(i) nums[(1+2*(i)) % (n|1)]\r\n\r\n        // 3-way-partition-to-wiggly in O(n) time with O(1) space.\r\n        int i = 0, j = 0, k = n - 1;\r\n        while (j <= k) {\r\n            if (A(j) > mid)\r\n                swap(A(i++), A(j++));\r\n            else if (A(j) < mid)\r\n                swap(A(j), A(k--));\r\n            else\r\n                j++;\r\n        }\r\n    }\r\n};\r\n```\r\n\r\n时间复杂度与解法2相同，为O(N)，空间复杂度为O(1)。\r\n\r\n当然，也可以在解法1中利用虚地址方法，即利用虚地址对nums进行排序，那么时间复杂度为O(NlogN)，空间复杂度为O(1)。",
      "createdAt": "2019-11-19T06:11:26.695355+00:00",
      "hitCount": 38354,
      "identifier": "UEM3T4",
      "isEditorsPick": false,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "tong-pai-xu-onjie-fa-shuang-bai-by-fszha-9zfo",
        "title": "桶排序，O(N)解法，双百"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "wiggle-sort-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 190,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 12,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "yi-bu-yi-bu-jiang-shi-jian-fu-za-du-cong-onlognjia",
      "status": "PUBLISHED",
      "summary": "1. 解法1：排序\n首先，我们可以很容易想到一种简单的解法：将数组进行排序，然后从中间位置进行等分（如果数组长度为奇数，则将中间的元素分到前面），然后将两个数组进行穿插。\n例如：\n对于数组[1, 5, 2, 4, 3]，我们将其排序，得到[1, 2, 3, 4, 5]，然后将其分割为[1, 2, 3]和[4, 5]，对",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "一步一步将时间复杂度从O(NlogN)降到O(N)，将空间复杂度从O(N)降低到O(1)",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 99,
        "id": 45144,
        "viewCount": 24225
      },
      "uuid": "UEM3T4",
      "videosInfo": []
    }
  }
}
