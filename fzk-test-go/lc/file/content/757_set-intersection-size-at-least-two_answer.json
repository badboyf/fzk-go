{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：贪心算法\n让我们先尝试解决一个更简单的问题：当设置的交集大小至少为 1 时，我们该怎么做。\n\n将区间排序，取最后一个区间 `[s，e]`，在该区间上的哪个点会在 `S`？由于每个区间都有起点 `<=s`，所以我们先取 `s` 作为 `S` 的元素。然后去掉所有包含 `s` 的区间。\n\n当设置的交集大小至少为 2 时，我们尝试将该方案扩展。\n\n**算法：**\n\n对于每个间隔，我们将执行上述算法，`todo` 存储的是还需的交集元素个数，当我们确定一个点在 `S` 时，我们将根据情况更新 `todo`。\n\n一个重要的例子：`[[1, 2], [2, 3], [2, 4], [4, 5]]`。在处理 `[4，5]` 时，将 `4，5` 放到 `S` 中；在处理 `[2，4]` 时，将 `2` 放到 `S` 中；在处理 `[2，3]` 时，我们需要将 `3` 放到 `S` 中，而不是放 `2`，因为 `2` 已经放进去过了。\n\n我们可以将区间 `[s，e]` 按 `s` 升序，当 `s` 相同时，按 `e` 降序来解决上述情况。这样可以在遇到相同 `s` 的区间，都包含最小的 `e`。因此这样有最高的多重性。在处理的 `[s，e]` 时（`s` 与之前不同），可以保证区间的开始（`s` 或 `s，s+1`）将始终是未使用的。 \n\n```python [solution1-Python]\nclass Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        intervals.sort(key = lambda (s, e): (s, -e))\n        todo = [2] * len(intervals)\n        ans = 0\n        while intervals:\n            (s, e), t = intervals.pop(), todo.pop()\n            for p in xrange(s, s+t):\n                for i, (s0, e0) in enumerate(intervals):\n                    if todo[i] and p <= e0:\n                        todo[i] -= 1\n                ans += 1\n        return ans\n```\n\n```java [solution1-Java]\nclass Solution {\n    public int intersectionSizeTwo(int[][] intervals) {\n        Arrays.sort(intervals, (a, b) ->\n                    a[0] != b[0] ? a[0]-b[0] : b[1]-a[1]);\n        int[] todo = new int[intervals.length];\n        Arrays.fill(todo, 2);\n        int ans = 0, t = intervals.length;\n        while (--t >= 0) {\n            int s = intervals[t][0];\n            int e = intervals[t][1];\n            int m = todo[t];\n            for (int p = s; p < s+m; ++p) {\n                for (int i = 0; i <= t; ++i)\n                    if (todo[i] > 0 && p <= intervals[i][1])\n                        todo[i]--;\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$。其中 $N$ 为 `intervals` 的长度。\n* 空间复杂度：$O(N)$。",
      "createdAt": "2020-01-14T03:32:15.192985+00:00",
      "hitCount": 3503,
      "identifier": "S6Oy1I",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "tan-xin-hua-tu-zhao-gui-lu-c-by-zhouziho-y1dm",
        "title": "【贪心】【画图找规律】【C++】"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "set-intersection-size-at-least-two"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "she-zhi-jiao-ji-da-xiao-zhi-shao-wei-2-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：贪心算法 让我们先尝试解决一个更简单的问题：当设置的交集大小至少为 1 时，我们该怎么做。 将区间排序，取最后一个区间 [s，e]，在该区间上的哪个点会在 S？由于每个区间都有起点 <=s，所以我们先取 s 作为 S 的元素。然后去掉所有包含 s 的区间。 当设置的交集大小至少为 2 时，我们尝试将该方案扩展。",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "设置交集大小至少为2",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 8,
        "id": 73957,
        "viewCount": 2218
      },
      "uuid": "S6Oy1I",
      "videosInfo": []
    }
  }
}
