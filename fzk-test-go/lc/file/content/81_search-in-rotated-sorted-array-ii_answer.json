{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 前言\n\n本篇题解基于「[33. 搜索旋转排序数组的官方题解](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/)」，请读者在阅读完该题解后再继续阅读本篇题解。\n\n#### 方法一：二分查找\n\n**思路**\n\n对于数组中有重复元素的情况，二分查找时可能会有 $a[l]=a[\\textit{mid}]=a[r]$，此时无法判断区间 $[l,\\textit{mid}]$ 和区间 $[\\textit{mid}+1,r]$ 哪个是有序的。\n\n例如 $\\textit{nums}=[3,1,2,3,3,3,3]$，$\\textit{target}=2$，首次二分时无法判断区间 $[0,3]$ 和区间 $[4,6]$ 哪个是有序的。\n\n对于这种情况，我们只能将当前二分区间的左边界加一，右边界减一，然后在新区间上继续二分查找。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool search(vector<int> &nums, int target) {\n        int n = nums.size();\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return nums[0] == target;\n        }\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) {\n                return true;\n            }\n            if (nums[l] == nums[mid] && nums[mid] == nums[r]) {\n                ++l;\n                --r;\n            } else if (nums[l] <= nums[mid]) {\n                if (nums[l] <= target && target < nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return false;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean search(int[] nums, int target) {\n        int n = nums.length;\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return nums[0] == target;\n        }\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) {\n                return true;\n            }\n            if (nums[l] == nums[mid] && nums[mid] == nums[r]) {\n                ++l;\n                --r;\n            } else if (nums[l] <= nums[mid]) {\n                if (nums[l] <= target && target < nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc search(nums []int, target int) bool {\n    n := len(nums)\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return nums[0] == target\n    }\n    l, r := 0, n-1\n    for l <= r {\n        mid := (l + r) / 2\n        if nums[mid] == target {\n            return true\n        }\n        if nums[l] == nums[mid] && nums[mid] == nums[r] {\n            l++\n            r--\n        } else if nums[l] <= nums[mid] {\n            if nums[l] <= target && target < nums[mid] {\n                r = mid - 1\n            } else {\n                l = mid + 1\n            }\n        } else {\n            if nums[mid] < target && target <= nums[n-1] {\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n    }\n    return false\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def search(self, nums: List[int], target: int) -> bool:\n        if not nums:\n            return False\n        \n        n = len(nums)\n        if n == 1:\n            return nums[0] == target\n        \n        l, r = 0, n - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            if nums[l] == nums[mid] and nums[mid] == nums[r]:\n                l += 1\n                r -= 1\n            elif nums[l] <= nums[mid]:\n                if nums[l] <= target and target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target and target <= nums[n - 1]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        \n        return False\n```\n\n```C [sol1-C]\nbool search(int* nums, int numsSize, int target) {\n    if (numsSize == 0) {\n        return false;\n    }\n    if (numsSize == 1) {\n        return nums[0] == target;\n    }\n    int l = 0, r = numsSize - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (nums[mid] == target) {\n            return true;\n        }\n        if (nums[l] == nums[mid] && nums[mid] == nums[r]) {\n            ++l;\n            --r;\n        } else if (nums[l] <= nums[mid]) {\n            if (nums[l] <= target && target < nums[mid]) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[numsSize - 1]) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n    }\n    return false;\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar search = function(nums, target) {\n    const n = nums.length;\n    if (n === 0) {\n        return false;\n    }\n    if (n === 1) {\n        return nums[0] === target;\n    }\n    let l = 0, r = n - 1;\n    while (l <= r) {\n        const mid = Math.floor((l + r) / 2);\n        if (nums[mid] === target) {\n            return true;\n        }\n        if (nums[l] === nums[mid] && nums[mid] === nums[r]) {\n            ++l;\n            --r;\n        } else if (nums[l] <= nums[mid]) {\n            if (nums[l] <= target && target < nums[mid]) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        } else {\n            if (nums[mid] < target && target <= nums[n - 1]) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n    }\n    return false;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。最坏情况下数组元素均相等且不为 $\\textit{target}$，我们需要访问所有位置才能得出结果。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-04-06T12:51:01.726097+00:00",
      "hitCount": 61104,
      "identifier": "RsQeiK",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zai-javazhong-ji-bai-liao-100de-yong-hu-by-reedfan",
        "title": "搜索旋转排序数组 II"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "search-in-rotated-sorted-array-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 43,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "sou-suo-xuan-zhuan-pai-xu-shu-zu-ii-by-l-0nmp",
      "status": "PUBLISHED",
      "summary": "前言 本篇题解基于「33. 搜索旋转排序数组的官方题解」，请读者在阅读完该题解后再继续阅读本篇题解。 方法一：二分查找 思路 对于数组中有重复元素的情况，二分查找时可能会有 $a[l]=a[\\textit{mid}]=a[r]$，此时无法判断区间 $[l,\\textit{mid}]$ 和区间 $[\\textit{mid",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "搜索旋转排序数组 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 169,
        "id": 704686,
        "viewCount": 41455
      },
      "uuid": "RsQeiK",
      "videosInfo": []
    }
  }
}
