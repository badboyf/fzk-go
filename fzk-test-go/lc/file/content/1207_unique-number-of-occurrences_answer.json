{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：哈希表\n\n首先使用哈希表记录每个数字的出现次数；随后再利用新的哈希表，统计不同的出现次数的数目。如果不同的出现次数的数目等于不同数字的数目，则返回 $\\text{true}$，否则返回 $\\text{false}$。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool uniqueOccurrences(vector<int>& arr) {\n        unordered_map<int, int> occur;\n        for (const auto& x: arr) {\n            occur[x]++;\n        }\n        unordered_set<int> times;\n        for (const auto& x: occur) {\n            times.insert(x.second);\n        }\n        return times.size() == occur.size();\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public boolean uniqueOccurrences(int[] arr) {\n        Map<Integer, Integer> occur = new HashMap<Integer, Integer>();\n        for (int x : arr) {\n            occur.put(x, occur.getOrDefault(x, 0) + 1);\n        }\n        Set<Integer> times = new HashSet<Integer>();\n        for (Map.Entry<Integer, Integer> x : occur.entrySet()) {\n            times.add(x.getValue());\n        }\n        return times.size() == occur.size();\n    }\n}\n```\n\n```C [sol1-C]\nstruct unordered_set {\n    int key;\n    UT_hash_handle hh;\n};\n\nstruct unordered_map {\n    int key;\n    int val;\n    UT_hash_handle hh;\n};\n\nbool uniqueOccurrences(int* arr, int arrSize) {\n    struct unordered_map* occur = NULL;\n    for (int i = 0; i < arrSize; i++) {\n        struct unordered_map* tmp = NULL;\n        HASH_FIND_INT(occur, &arr[i], tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct unordered_map));\n            tmp->key = arr[i], tmp->val = 1;\n            HASH_ADD_INT(occur, key, tmp);\n        } else {\n            (tmp->val)++;\n        }\n    }\n    struct unordered_set* times = NULL;\n    struct unordered_map *cur, *cur_tmp;\n    HASH_ITER(hh, occur, cur, cur_tmp) {\n        struct unordered_set* tmp = NULL;\n        HASH_FIND_INT(times, &(cur->val), tmp);\n        if (tmp == NULL) {\n            tmp = malloc(sizeof(struct unordered_set));\n            tmp->key = cur->val;\n            HASH_ADD_INT(times, key, tmp);\n        }\n    }\n    return HASH_COUNT(occur) == HASH_COUNT(times);\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar uniqueOccurrences = function(arr) {\n    const occur = new Map();\n    for (const x of arr) {\n        if (occur.has(x)) {\n            occur.set(x, occur.get(x) + 1);\n        } else {\n            occur.set(x, 1);\n        }\n    }\n    const times = new Set();\n    for (const [key, value] of occur) {\n        times.add(value);\n    }\n    return times.size === occur.size;\n};\n```\n\n```Golang [sol1-Golang]\nfunc uniqueOccurrences(arr []int) bool {\n    cnts := map[int]int{}\n    for _, v := range arr {\n        cnts[v]++\n    }\n    times := map[int]struct{}{}\n    for _, c := range cnts {\n        times[c] = struct{}{}\n    }\n    return len(times) == len(cnts)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为数组的长度。遍历原始数组需要 $O(N)$ 时间，而遍历中间过程产生的哈希表又需要 $O(N)$ 的时间。\n\n- 空间复杂度：$O(N)$。",
      "createdAt": "2020-10-27T14:55:21.984848+00:00",
      "hitCount": 27901,
      "identifier": "NqQyao",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-dao-jian-dan-ti-by-euyvvl-mny1",
        "title": "一道简单题"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "unique-number-of-occurrences"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "du-yi-wu-er-de-chu-xian-ci-shu-by-leetcode-solutio",
      "status": "PUBLISHED",
      "summary": "方法一：哈希表 首先使用哈希表记录每个数字的出现次数；随后再利用新的哈希表，统计不同的出现次数的数目。如果不同的出现次数的数目等于不同数字的数目，则返回 $\\text{true}$，否则返回 $\\text{false}$。 C++ [sol1-C++] class Solution { public:     bool",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "独一无二的出现次数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 139,
        "id": 463180,
        "viewCount": 22917
      },
      "uuid": "NqQyao",
      "videosInfo": []
    }
  }
}
