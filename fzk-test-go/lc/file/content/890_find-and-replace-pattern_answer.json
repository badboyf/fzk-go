{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：双映射表\n\n我们可以用两个映射表（map）存储字母到字母的映射关系，第一个映射表保证一个字母不会映射到两个字母，第二个映射表保证不会有两个字母映射到同一个字母。例如 `word` 为 `a`，`pattern` 为 `x`，那么第一个映射表存储 `a -> x`，第二个映射表存储 `x -> a`。\n\n```Java [sol1]\nclass Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n        List<String> ans = new ArrayList();\n        for (String word: words)\n            if (match(word, pattern))\n                ans.add(word);\n        return ans;\n    }\n\n    public boolean match(String word, String pattern) {\n        Map<Character, Character> m1 = new HashMap();\n        Map<Character, Character> m2 = new HashMap();\n\n        for (int i = 0; i < word.length(); ++i) {\n            char w = word.charAt(i);\n            char p = pattern.charAt(i);\n            if (!m1.containsKey(w)) m1.put(w, p);\n            if (!m2.containsKey(p)) m2.put(p, w);\n            if (m1.get(w) != p || m2.get(p) != w)\n                return false;\n        }\n\n        return true;\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        def match(word):\n            m1, m2 = {}, {}\n            for w, p in zip(word, pattern):\n                if w not in m1: m1[w] = p\n                if p not in m2: m2[p] = w\n                if (m1[w], m2[p]) != (p, w):\n                    return False\n            return True\n\n        return filter(match, words)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N * K)$，其中 $N$ 是数组 `words` 的长度，$K$ 是每个单词的长度。\n\n* 空间复杂度：$O(N * K)$。\n\n#### 方法二：单映射表\n\n我们可以删去方法一中的第二个映射表，改成在添加完所有映射关系后，遍历第一个映射表并使用一个数组记录每个值出现的次数。如果某个值出现了超过一次，就说明有两个字母映射到同一个字母，否则映射就是合法的。\n\n```Java [sol2]\nclass Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n        List<String> ans = new ArrayList();\n        for (String word: words)\n            if (match(word, pattern))\n                ans.add(word);\n        return ans;\n    }\n\n    public boolean match(String word, String pattern) {\n        Map<Character, Character> M = new HashMap();\n        for (int i = 0; i < word.length(); ++i) {\n            char w = word.charAt(i);\n            char p = pattern.charAt(i);\n            if (!M.containsKey(w)) M.put(w, p);\n            if (M.get(w) != p) return false;\n        }\n\n        boolean[] seen = new boolean[26];\n        for (char p: M.values()) {\n            if (seen[p - 'a']) return false;\n            seen[p - 'a'] = true;\n        }\n        return true;\n    }\n}\n```\n\n```Python [sol2]\nclass Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        def match(word):\n            P = {}\n            for x, y in zip(pattern, word):\n                if P.setdefault(x, y) != y:\n                    return False\n            return len(set(P.values())) == len(P.values())\n\n        return filter(match, words)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N * K)$，其中 $N$ 是数组 `words` 的长度，$K$ 是每个单词的长度。\n\n* 空间复杂度：$O(N * K)$。",
      "createdAt": "2019-08-06T06:13:59.903908+00:00",
      "hitCount": 5761,
      "identifier": "eVh4qK",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shuang-ying-she-c-by-zhouzihong-md1r",
        "title": "【双映射】【C++】"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-and-replace-pattern"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 12,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "cha-zhao-he-ti-huan-mo-shi-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：双映射表\n我们可以用两个映射表（map）存储字母到字母的映射关系，第一个映射表保证一个字母不会映射到两个字母，第二个映射表保证不会有两个字母映射到同一个字母。例如 word 为 a，pattern 为 x，那么第一个映射表存储 a -> x，第二个映射表存储 x -> a。\n复杂度分析\n\n\n时间复杂度：O(",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "查找和替换模式",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 2,
        "id": 18773,
        "viewCount": 4363
      },
      "uuid": "eVh4qK",
      "videosInfo": []
    }
  }
}
