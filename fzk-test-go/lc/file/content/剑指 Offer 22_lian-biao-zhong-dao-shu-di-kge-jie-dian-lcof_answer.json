{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：顺序查找\n\n**思路与算法**\n\n最简单直接的方法即为顺序查找，假设当前链表的长度为 $n$，则我们知道链表的倒数第 $k$ 个节点即为正数第 $n - k$ 个节点，此时我们只需要顺序遍历到链表的第 $n - k$ 个节点即为倒数第 $k$ 个节点。\n\n- 我们首先求出链表的长度 $n$，然后顺序遍历到链表的第 $n - k$ 个节点返回即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* getKthFromEnd(ListNode* head, int k) {\n        int n = 0;\n        ListNode* node = nullptr;\n\n        for (node = head; node; node = node->next) {\n            n++;\n        }\n        for (node = head; n > k; n--) {\n            node = node->next;\n        }\n      \n        return node;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        int n = 0;\n        ListNode node = null;\n\n        for (node = head; node != null; node = node.next) {\n            n++;\n        }\n        for (node = head; n > k; n--) {\n            node = node.next;\n        }\n\n        return node;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public ListNode GetKthFromEnd(ListNode head, int k) {\n        int n = 0;\n        ListNode node = null;\n\n        for (node = head; node != null; node = node.next) {\n            n++;\n        }\n        for (node = head; n > k; n--) {\n            node = node.next;\n        }\n\n        return node;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getKthFromEnd(self, head: ListNode, k: int) -> ListNode:\n        node, n = head, 0  \n        while node:\n            node = node.next\n            n += 1\n\n        node = head\n        for _ in range(n-k):\n            node = node.next\n        \n        return node  \n```\n\n```JavaScript [sol1-JavaScript]\nvar getKthFromEnd = function(head, k) {\n    let node = head, n = 0;\n    while (node) {\n        node = node.next;\n        n++;\n    }\n    node = head;\n    for (let i = 0; i < n - k; i++) {\n        node = node.next;\n    }\n    return node; \n};\n```\n\n```go [sol1-Golang]\nfunc getKthFromEnd(head *ListNode, k int) (kth *ListNode) {\n    n := 0\n    for node := head; node != nil; node = node.Next {\n        n++\n    }\n    for kth = head; n > k; n-- {\n        kth = kth.Next\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为链表的长度。需要两次遍历。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：双指针\n\n**思路与算法**\n\n快慢指针的思想。我们将第一个指针 $\\textit{fast}$ 指向链表的第 $k + 1$ 个节点，第二个指针 $\\textit{slow}$ 指向链表的第一个节点，此时指针 $\\textit{fast}$ 与 $\\textit{slow}$ 二者之间刚好间隔 $k$ 个节点。此时两个指针同步向后走，当第一个指针 $\\textit{fast}$ 走到链表的尾部空节点时，则此时 $\\textit{slow}$ 指针刚好指向链表的倒数第$k$个节点。\n\n- 我们首先将 $\\textit{fast}$ 指向链表的头节点，然后向后走 $k$ 步，则此时 $\\textit{fast}$ 指针刚好指向链表的第 $k + 1$ 个节点。\n\n- 我们首先将 $\\textit{slow}$ 指向链表的头节点，同时 $\\textit{slow}$ 与 $\\textit{fast}$ 同步向后走，当 $\\textit{fast}$ 指针指向链表的尾部空节点时，则此时返回 $\\textit{slow}$ 所指向的节点即可。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode* getKthFromEnd(ListNode* head, int k) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n\n        while (fast && k > 0) {\n            fast = fast->next;\n            k--;\n        }\n        while (fast) {\n            fast = fast->next;\n            slow = slow->next;\n        }\n\n        return slow;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode getKthFromEnd(ListNode head, int k) {\n        ListNode fast = head;\n        ListNode slow = head;\n\n        while (fast != null && k > 0) {\n            fast = fast.next;\n            k--;\n        }\n        while (fast != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        return slow;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public ListNode GetKthFromEnd(ListNode head, int k) {\n        ListNode fast = head;\n        ListNode slow = head;\n\n        while (fast != null && k > 0) {\n            fast = fast.next;\n            k--;\n        }\n        while (fast != null) {\n            fast = fast.next;\n            slow = slow.next;\n        }\n\n        return slow;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def getKthFromEnd(self, head: ListNode, k: int) -> ListNode:\n        fast, slow = head, head\n\n        while fast and k > 0:\n            fast, k = fast.next, k - 1\n        while fast:\n            fast,slow = fast.next,slow.next\n        \n        return slow\n```\n\n```JavaScript [sol2-JavaScript]\nvar getKthFromEnd = function(head, k) {\n    let fast = head, slow = head;\n    \n    while (fast && k > 0) {\n        [fast, k] = [fast.next, k - 1];\n    }\n    while (fast) {\n        [fast, slow] = [fast.next, slow.next];\n    }\n    return slow;\n};\n```\n\n```go [sol2-Golang]\nfunc getKthFromEnd(head *ListNode, k int) *ListNode {\n    fast, slow := head, head\n    for fast != nil && k > 0 {\n        fast = fast.Next\n        k--\n    }\n    for fast != nil {\n        fast = fast.Next\n        slow = slow.Next\n    }\n    return slow\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为链表的长度。我们使用快慢指针，只需要一次遍历即可，复杂度为 $O(n)$。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-09-01T15:07:09.179371+00:00",
      "hitCount": 25097,
      "identifier": "STmCR6",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11",
        "title": "面试题22. 链表中倒数第 k 个节点（双指针，清晰图解）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 31,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "lian-biao-zhong-dao-shu-di-kge-jie-dian-1pz9l",
      "status": "PUBLISHED",
      "summary": "方法一：顺序查找 思路与算法 最简单直接的方法即为顺序查找，假设当前链表的长度为 $n$，则我们知道链表的倒数第 $k$ 个节点即为正数第 $n - k$ 个节点，此时我们只需要顺序遍历到链表的第 $n - k$ 个节点即为倒数第 $k$ 个节点。 我们首先求出链表的长度 $n$，然后顺序遍历到链表的第 $n - k$",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "链表中倒数第k个节点",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 77,
        "id": 972458,
        "viewCount": 19998
      },
      "uuid": "STmCR6",
      "videosInfo": []
    }
  }
}
