{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Demigodliu 🥇 ",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/demigodliu/avatar_1614610883.png",
          "userSlug": "demigodliu"
        },
        "username": "demigodliu"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "![图解每日一练.jpg](https://pic.leetcode-cn.com/1615817903-fzmpwZ-%E5%9B%BE%E8%A7%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83.jpg)\n\n---\n\n### 🧠 解题思路\n\n队列的特性是 $FIFO$（先入先出），而栈的特性是 $FILO$（先入后出）。\n\n知道两者特性之后，我们需要用两个栈来模拟队列的特性，一个栈为入队栈，一个栈为出对栈。\n\n当出队栈存在内容时，出队栈的栈顶，即为第一个出队的元素。\n\n若出队栈无元素，我们的需求又是出队的话，我们就需要将入队栈的内容反序导入出队栈，然后弹出栈顶即可。\n\n注意：根据栈的的特性，我们仅能使用 $push$ 和 $pop$ 操作。\n\n---\n\n### 🎨 图解演示\n\n<![1.jpg](https://pic.leetcode-cn.com/1615823623-BxWYvA-1.jpg),![2.jpg](https://pic.leetcode-cn.com/1615823628-jFlqfn-2.jpg),![3.jpg](https://pic.leetcode-cn.com/1615823631-eLjCaT-3.jpg),![4.jpg](https://pic.leetcode-cn.com/1615823635-IPKPAn-4.jpg),![5.jpg](https://pic.leetcode-cn.com/1615823640-EkEYlD-5.jpg),![6.jpg](https://pic.leetcode-cn.com/1615823644-ZoIfqd-6.jpg),![7.jpg](https://pic.leetcode-cn.com/1615823647-BnAqgd-7.jpg),![8.jpg](https://pic.leetcode-cn.com/1615823651-nDorvn-8.jpg),![9.jpg](https://pic.leetcode-cn.com/1615823655-YofYdP-9.jpg),![10.jpg](https://pic.leetcode-cn.com/1615823658-vYaHiF-10.jpg)>\n\n---\n\n### 代码\n\n```Javascript []\nvar MyQueue = function() {\n    this.stackIn = [];\n    this.stackOut = [];\n};\n\nMyQueue.prototype.push = function(x) {\n    this.stackIn.push(x);\n};\n\nMyQueue.prototype.pop = function() {\n    while(this.stackIn.length > 1){\n        this.stackOut.push(this.stackIn.pop());\n    }\n    let ans =  this.stackIn.pop();\n    while(this.stackOut.length){\n        this.stackIn.push(this.stackOut.pop());\n    }\n    return ans;\n};\n\nMyQueue.prototype.peek = function() {\n    while(this.stackIn.length){\n        this.stackOut.push(this.stackIn.pop());\n    }\n    let ans =  this.stackOut[this.stackOut.length - 1];\n    while(this.stackOut.length){\n        this.stackIn.push(this.stackOut.pop());\n    }\n    return ans;\n};\n\nMyQueue.prototype.empty = function() {\n    return !this.stackIn.length && !this.stackOut.length;\n};\n```\n```C++ []\nclass MyQueue {\nprivate:\n    stack<int> inStack, outStack;\n\n    void in2out() {\n        while (!inStack.empty()) {\n            outStack.push(inStack.top());\n            inStack.pop();\n        }\n    }\n\npublic:\n    MyQueue() {}\n\n    void push(int x) {\n        inStack.push(x);\n    }\n\n    int pop() {\n        if (outStack.empty()) {\n            in2out();\n        }\n        int x = outStack.top();\n        outStack.pop();\n        return x;\n    }\n\n    int peek() {\n        if (outStack.empty()) {\n            in2out();\n        }\n        return outStack.top();\n    }\n\n    bool empty() {\n        return inStack.empty() && outStack.empty();\n    }\n};\n```\n```Java []\nclass MyQueue {\n    Deque<Integer> inStack;\n    Deque<Integer> outStack;\n\n    public MyQueue() {\n        inStack = new LinkedList<Integer>();\n        outStack = new LinkedList<Integer>();\n    }\n    \n    public void push(int x) {\n        inStack.push(x);\n    }\n    \n    public int pop() {\n        if (outStack.isEmpty()) {\n            in2out();\n        }\n        return outStack.pop();\n    }\n    \n    public int peek() {\n        if (outStack.isEmpty()) {\n            in2out();\n        }\n        return outStack.peek();\n    }\n    \n    public boolean empty() {\n        return inStack.isEmpty() && outStack.isEmpty();\n    }\n\n    private void in2out() {\n        while (!inStack.isEmpty()) {\n            outStack.push(inStack.pop());\n        }\n    }\n}\n```\n```Golang []\ntype MyQueue struct {\n    inStack, outStack []int\n}\n\nfunc Constructor() MyQueue {\n    return MyQueue{}\n}\n\nfunc (q *MyQueue) Push(x int) {\n    q.inStack = append(q.inStack, x)\n}\n\nfunc (q *MyQueue) in2out() {\n    for len(q.inStack) > 0 {\n        q.outStack = append(q.outStack, q.inStack[len(q.inStack)-1])\n        q.inStack = q.inStack[:len(q.inStack)-1]\n    }\n}\n\nfunc (q *MyQueue) Pop() int {\n    if len(q.outStack) == 0 {\n        q.in2out()\n    }\n    x := q.outStack[len(q.outStack)-1]\n    q.outStack = q.outStack[:len(q.outStack)-1]\n    return x\n}\n\nfunc (q *MyQueue) Peek() int {\n    if len(q.outStack) == 0 {\n        q.in2out()\n    }\n    return q.outStack[len(q.outStack)-1]\n}\n\nfunc (q *MyQueue) Empty() bool {\n    return len(q.inStack) == 0 && len(q.outStack) == 0\n}\n```\n```C []\ntypedef struct {\n    int* stk;\n    int stkSize;\n    int stkCapacity;\n} Stack;\n\nStack* stackCreate(int cpacity) {\n    Stack* ret = malloc(sizeof(Stack));\n    ret->stk = malloc(sizeof(int) * cpacity);\n    ret->stkSize = 0;\n    ret->stkCapacity = cpacity;\n    return ret;\n}\n\nvoid stackPush(Stack* obj, int x) {\n    obj->stk[obj->stkSize++] = x;\n}\n\nvoid stackPop(Stack* obj) {\n    obj->stkSize--;\n}\n\nint stackTop(Stack* obj) {\n    return obj->stk[obj->stkSize - 1];\n}\n\nbool stackEmpty(Stack* obj) {\n    return obj->stkSize == 0;\n}\n\nvoid stackFree(Stack* obj) {\n    free(obj->stk);\n}\n\ntypedef struct {\n    Stack* inStack;\n    Stack* outStack;\n} MyQueue;\n\nMyQueue* myQueueCreate() {\n    MyQueue* ret = malloc(sizeof(MyQueue));\n    ret->inStack = stackCreate(100);\n    ret->outStack = stackCreate(100);\n    return ret;\n}\n\nvoid in2out(MyQueue* obj) {\n    while (!stackEmpty(obj->inStack)) {\n        stackPush(obj->outStack, stackTop(obj->inStack));\n        stackPop(obj->inStack);\n    }\n}\n\nvoid myQueuePush(MyQueue* obj, int x) {\n    stackPush(obj->inStack, x);\n}\n\nint myQueuePop(MyQueue* obj) {\n    if (stackEmpty(obj->outStack)) {\n        in2out(obj);\n    }\n    int x = stackTop(obj->outStack);\n    stackPop(obj->outStack);\n    return x;\n}\n\nint myQueuePeek(MyQueue* obj) {\n    if (stackEmpty(obj->outStack)) {\n        in2out(obj);\n    }\n    return stackTop(obj->outStack);\n}\n\nbool myQueueEmpty(MyQueue* obj) {\n    return stackEmpty(obj->inStack) && stackEmpty(obj->outStack);\n}\n\nvoid myQueueFree(MyQueue* obj) {\n    stackFree(obj->inStack);\n    stackFree(obj->outStack);\n}\n```\n\n---\n\n### 转身挥手\n\n嘿，少年，做图不易，留下个赞或评论再走吧！谢啦~ 💐\n\n差点忘了，祝你牛年大吉 🐮 ，AC 和 Offer 📑 多多益善~\n\n⛲⛲⛲ 期待下次再见~ ",
      "createdAt": "2021-04-01T15:07:30.877396+00:00",
      "hitCount": 3469,
      "identifier": "qwcld7",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-dan-yi-dong-javascript-by-lzxjack-0nzm",
        "title": "【简单易懂】JavaScript"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "implement-queue-using-stacks-lcci"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 58,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": true,
      "slug": "zhan-hua-zhan-wei-dui-by-demigodliu-lnxd",
      "status": "PUBLISHED",
      "summary": "🧠 解题思路\n队列的特性是 FIFO（先入先出），而栈的特性是 FILO（先入后出）。\n知道两者特性之后，我们需要用两个栈来模拟队列的特性，一个栈为入队栈，一个栈为出对栈。\n当出队栈存在内容时，出队栈的栈顶，即为第一个出队的元素。\n若出队栈无元素，我们的需求又是出队的话，我们就需要将入队栈的内容反序导入出队栈，然后弹",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Queue",
          "nameTranslated": "队列",
          "slug": "queue",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1615817903-fzmpwZ-%E5%9B%BE%E8%A7%A3%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83.jpg",
      "title": "【栈】化栈为队",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 13,
        "id": 694879,
        "viewCount": 2669
      },
      "uuid": "qwcld7",
      "videosInfo": []
    }
  }
}
