{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：递归\n\n**思路与算法**\n\n可以通过递归的方式实现两两交换链表中的节点。\n\n递归的终止条件是链表中没有节点，或者链表中只有一个节点，此时无法进行交换。\n\n如果链表中至少有两个节点，则在两两交换链表中的节点之后，原始链表的头节点变成新的链表的第二个节点，原始链表的第二个节点变成新的链表的头节点。链表中的其余节点的两两交换可以递归地实现。在对链表中的其余节点递归地两两交换之后，更新节点之间的指针关系，即可完成整个链表的两两交换。\n\n用 `head` 表示原始链表的头节点，新的链表的第二个节点，用 `newHead` 表示新的链表的头节点，原始链表的第二个节点，则原始链表中的其余节点的头节点是 `newHead.next`。令 `head.next = swapPairs(newHead.next)`，表示将其余节点进行两两交换，交换后的新的头节点为 `head` 的下一个节点。然后令 `newHead.next = head`，即完成了所有节点的交换。最后返回新的链表的头节点 `newHead`。\n\n**代码**\n\n```Java [sol1-Java]\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode newHead = head.next;\n        head.next = swapPairs(newHead.next);\n        newHead.next = head;\n        return newHead;\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (head == nullptr || head->next == nullptr) {\n            return head;\n        }\n        ListNode* newHead = head->next;\n        head->next = swapPairs(newHead->next);\n        newHead->next = head;\n        return newHead;\n    }\n};\n```\n\n```JavaScript [sol1-JavaScript]\nvar swapPairs = function(head) {\n    if (head === null|| head.next === null) {\n        return head;\n    }\n    const newHead = head.next;\n    head.next = swapPairs(newHead.next);\n    newHead.next = head;\n    return newHead;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        if not head or not head.next:\n            return head\n        newHead = head.next\n        head.next = self.swapPairs(newHead.next)\n        newHead.next = head\n        return newHead\n```\n\n```Golang [sol1-Golang]\nfunc swapPairs(head *ListNode) *ListNode {\n    if head == nil || head.Next == nil {\n        return head\n    }\n    newHead := head.Next\n    head.Next = swapPairs(newHead.Next)\n    newHead.Next = head\n    return newHead\n}\n```\n\n```C [sol1-C]\nstruct ListNode* swapPairs(struct ListNode* head) {\n    if (head == NULL || head->next == NULL) {\n        return head;\n    }\n    struct ListNode* newHead = head->next;\n    head->next = swapPairs(newHead->next);\n    newHead->next = head;\n    return newHead;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的节点数量。需要对每个节点进行更新指针的操作。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是链表的节点数量。空间复杂度主要取决于递归调用的栈空间。\n\n#### 方法二：迭代\n\n**思路与算法**\n\n也可以通过迭代的方式实现两两交换链表中的节点。\n\n创建哑结点 `dummyHead`，令 `dummyHead.next = head`。令 `temp` 表示当前到达的节点，初始时 `temp = dummyHead`。每次需要交换 `temp` 后面的两个节点。\n\n如果 `temp` 的后面没有节点或者只有一个节点，则没有更多的节点需要交换，因此结束交换。否则，获得 `temp` 后面的两个节点 `node1` 和 `node2`，通过更新节点的指针关系实现两两交换节点。\n\n具体而言，交换之前的节点关系是 `temp -> node1 -> node2`，交换之后的节点关系要变成 `temp -> node2 -> node1`，因此需要进行如下操作。\n\n```\ntemp.next = node2\nnode1.next = node2.next\nnode2.next = node1\n```\n\n完成上述操作之后，节点关系即变成 `temp -> node2 -> node1`。再令 `temp = node1`，对链表中的其余节点进行两两交换，直到全部节点都被两两交换。\n\n两两交换链表中的节点之后，新的链表的头节点是 `dummyHead.next`，返回新的链表的头节点即可。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/24/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/24/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/24/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/24/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/24/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/24/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/24/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/24/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/24/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/24/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/24/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/24/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/24/13.png)>\n\n**代码**\n\n```Java [sol2-Java]\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        ListNode dummyHead = new ListNode(0);\n        dummyHead.next = head;\n        ListNode temp = dummyHead;\n        while (temp.next != null && temp.next.next != null) {\n            ListNode node1 = temp.next;\n            ListNode node2 = temp.next.next;\n            temp.next = node2;\n            node1.next = node2.next;\n            node2.next = node1;\n            temp = node1;\n        }\n        return dummyHead.next;\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        ListNode* dummyHead = new ListNode(0);\n        dummyHead->next = head;\n        ListNode* temp = dummyHead;\n        while (temp->next != nullptr && temp->next->next != nullptr) {\n            ListNode* node1 = temp->next;\n            ListNode* node2 = temp->next->next;\n            temp->next = node2;\n            node1->next = node2->next;\n            node2->next = node1;\n            temp = node1;\n        }\n        return dummyHead->next;\n    }\n};\n```\n\n```JavaScript [sol2-JavaScript]\nvar swapPairs = function(head) {\n    const dummyHead = new ListNode(0);\n    dummyHead.next = head;\n    let temp = dummyHead;\n    while (temp.next !== null && temp.next.next !== null) {\n        const node1 = temp.next;\n        const node2 = temp.next.next;\n        temp.next = node2;\n        node1.next = node2.next;\n        node2.next = node1;\n        temp = node1;\n    }\n    return dummyHead.next;\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        dummyHead = ListNode(0)\n        dummyHead.next = head\n        temp = dummyHead\n        while temp.next and temp.next.next:\n            node1 = temp.next\n            node2 = temp.next.next\n            temp.next = node2\n            node1.next = node2.next\n            node2.next = node1\n            temp = node1\n        return dummyHead.next\n```\n\n```Golang [sol2-Golang]\nfunc swapPairs(head *ListNode) *ListNode {\n    dummyHead := &ListNode{0, head}\n    temp := dummyHead\n    for temp.Next != nil && temp.Next.Next != nil {\n        node1 := temp.Next\n        node2 := temp.Next.Next\n        temp.Next = node2\n        node1.Next = node2.Next\n        node2.Next = node1\n        temp = node1\n    }\n    return dummyHead.Next\n}\n```\n\n```C [sol2-C]\nstruct ListNode* swapPairs(struct ListNode* head) {\n    struct ListNode dummyHead;\n    dummyHead.next = head;\n    struct ListNode* temp = &dummyHead;\n    while (temp->next != NULL && temp->next->next != NULL) {\n        struct ListNode* node1 = temp->next;\n        struct ListNode* node2 = temp->next->next;\n        temp->next = node2;\n        node1->next = node2->next;\n        node2->next = node1;\n        temp = node1;\n    }\n    return dummyHead.next;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是链表的节点数量。需要对每个节点进行更新指针的操作。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2020-10-12T15:29:12.285984+00:00",
      "hitCount": 122706,
      "identifier": "Ql0yp8",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hua-jie-suan-fa-24-liang-liang-jiao-huan-lian-biao",
        "title": "画解算法：24. 两两交换链表中的节点"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "swap-nodes-in-pairs"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 157,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "liang-liang-jiao-huan-lian-biao-zhong-de-jie-di-91",
      "status": "PUBLISHED",
      "summary": "方法一：递归 思路与算法 可以通过递归的方式实现两两交换链表中的节点。 递归的终止条件是链表中没有节点，或者链表中只有一个节点，此时无法进行交换。 如果链表中至少有两个节点，则在两两交换链表中的节点之后，原始链表的头节点变成新的链表的第二个节点，原始链表的第二个节点变成新的链表的头节点。链表中的其余节点的两两交换可以递",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Linked List",
          "nameTranslated": "链表",
          "slug": "linked-list",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "两两交换链表中的节点",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 176,
        "id": 444474,
        "viewCount": 80339
      },
      "uuid": "Ql0yp8",
      "videosInfo": []
    }
  }
}
