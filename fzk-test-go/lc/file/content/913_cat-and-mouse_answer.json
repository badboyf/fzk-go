{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法 1：极大极小 / 从已知状态分析 \n\n**想法**\n\n游戏的状态可以表示成 `(m, c, t)`，其中 `m` 是老鼠的位置，`c` 是猫的位置，`t` 当老鼠移动为 `1` 猫移动为 `2`。我们把这些状态看成节点，状态集合构成了一个有向图：玩家每一轮都有若干种选择方案，对应一个节点到另一个节点的有向边。\n\n有些节点的结果已经固定了：当老鼠位于洞时 `(m = 0)` 老鼠获胜；如果猫和老鼠重合 `(c = m)` 猫获胜。认定节点会根据玩家胜利情况被定义成 $\\small\\text{MOUSE}$，$\\small\\text{CAT}$，$\\small\\text{DRAW}$。\n\n根据标准的极大极小算法，老鼠玩家倾向于首先移动到 $\\small\\text{MOUSE}$ 节点，其次是 $\\small\\text{DRAW}$ 节点，最后是 $\\small\\text{CAT}$ 节点。猫玩家的倾向顺序恰好相反。\n\n**算法**\n\n我们对每个节点 `node` 依据以下规则标记成 $\\small\\text{DRAW}$。（假设 `node.turn = Mouse`：另一种情况类似）\n\n* 立即染色：如果存在一个孩子标记成 $\\small\\text{MOUSE}$，那么这个节点会被染成 $\\small\\text{MOUSE}$。\n* 最终染色：如果所有孩子标记成 $\\small\\text{CAT}$，那么这个节点也会被染成 $\\small\\text{CAT}$。\n\n我们重复如下操作直至没有 `node` 节点满足条件。为了让这种染色更为高效，我们会使用一个队列执行自底向上的渗透：\n\n* 入队所有已经初始化染色的顶点（因为老鼠在洞中或者猫和老鼠在一个位置）。\n* 对于队列中的每一个顶点 `node`，所有 `node` 的父亲 `parent`：\n  * 对满足条件的 `parent` 做立即染色；\n  * 如果不行，减少标记成 $\\small\\text{DRAW}$ 的孩子边数，当边数减少到 0 时执行最终染色；\n  * 所有染色的 `parent` 加入队列中。\n\n**正确性证明**\n\n我们的证明与极大极小算法的证明类似。\n\n假如不能再对节点染色，并且任何标记成 $\\small\\text{CAT}$ 或者 $\\small\\text{MOUSE}$ 的节点需要最多 $K$ 步取胜。那么，如果对于一个标记为 $\\small\\text{DRAW}$ 的顶点实际上是老鼠获胜，那么一定需要 $> K$ 步。一条最优路径最终一定会到达一个标记为 $\\small\\text{MOUSE}$ 的点（因为老鼠会到达洞内）。因此，一定有一条 $\\small\\text{DRAW} \\rightarrow \\small\\text{MOUSE}$ 的可行路径。\n\n如果这一步发生在老鼠的回合，那么可以使用立即染色规则。如果发生在猫的回合，并且所有孩子节点都是 $\\small\\text{MOUSE}$，那么可以使用最终染色规则；如果一些节点是 $\\small\\text{CAT}$，那么也会利用最终染色规则。因此，只剩下一些节点为 $\\small\\text{DRAW}$，根据我们最优路径的假设，移动到这些节点结束需要 $> K$ 步，然而移动到标记邻居的步骤只需要 $\\leq K$ 步，不存在这样的路径，所以是平局。\n\n```Java []\nclass Solution {\n    public int catMouseGame(int[][] graph) {\n        int N = graph.length;\n        final int DRAW = 0, MOUSE = 1, CAT = 2;\n\n        int[][][] color = new int[50][50][3];\n        int[][][] degree = new int[50][50][3];\n\n        // degree[node] : the number of neutral children of this node\n        for (int m = 0; m < N; ++m)\n            for (int c = 0; c < N; ++c) {\n                degree[m][c][1] = graph[m].length;\n                degree[m][c][2] = graph[c].length;\n                for (int x: graph[c]) if (x == 0) {\n                    degree[m][c][2]--;\n                    break;\n                }\n            }\n\n        // enqueued : all nodes that are colored\n        Queue<int[]> queue = new LinkedList();\n        for (int i = 0; i < N; ++i)\n            for (int t = 1; t <= 2; ++t) {\n                color[0][i][t] = MOUSE;\n                queue.add(new int[]{0, i, t, MOUSE});\n                if (i > 0) {\n                    color[i][i][t] = CAT;\n                    queue.add(new int[]{i, i, t, CAT});\n                }\n            }\n\n        // percolate\n        while (!queue.isEmpty()) {\n            // for nodes that are colored :\n            int[] node = queue.remove();\n            int i = node[0], j = node[1], t = node[2], c = node[3];\n            // for every parent of this node i, j, t :\n            for (int[] parent: parents(graph, i, j, t)) {\n                int i2 = parent[0], j2 = parent[1], t2 = parent[2];\n                // if this parent is not colored :\n                if (color[i2][j2][t2] == DRAW) {\n                    // if the parent can make a winning move (ie. mouse to MOUSE), do so\n                    if (t2 == c) {\n                        color[i2][j2][t2] = c;\n                        queue.add(new int[]{i2, j2, t2, c});\n                    } else {\n                        // else, this parent has degree[parent]--, and enqueue\n                        // if all children of this parent are colored as losing moves\n                        degree[i2][j2][t2]--;\n                        if (degree[i2][j2][t2] == 0) {\n                            color[i2][j2][t2] = 3 - t2;\n                            queue.add(new int[]{i2, j2, t2, 3 - t2});\n                        }\n                    }\n                }\n            }\n        }\n\n        return color[1][2][1];\n    }\n\n    // What nodes could play their turn to\n    // arrive at node (m, c, t) ?\n    public List<int[]> parents(int[][] graph, int m, int c, int t) {\n        List<int[]> ans = new ArrayList();\n        if (t == 2) {\n            for (int m2: graph[m])\n                ans.add(new int[]{m2, c, 3-t});\n        } else {\n            for (int c2: graph[c]) if (c2 > 0)\n                ans.add(new int[]{m, c2, 3-t});\n        }\n        return ans;\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def catMouseGame(self, graph):\n        N = len(graph)\n\n        # What nodes could play their turn to\n        # arrive at node (m, c, t) ?\n        def parents(m, c, t):\n            if t == 2:\n                for m2 in graph[m]:\n                    yield m2, c, 3-t\n            else:\n                for c2 in graph[c]:\n                    if c2:\n                        yield m, c2, 3-t\n\n        DRAW, MOUSE, CAT = 0, 1, 2\n        color = collections.defaultdict(int)\n\n        # degree[node] : the number of neutral children of this node\n        degree = {}\n        for m in xrange(N):\n            for c in xrange(N):\n                degree[m,c,1] = len(graph[m])\n                degree[m,c,2] = len(graph[c]) - (0 in graph[c])\n\n        # enqueued : all nodes that are colored\n        queue = collections.deque([])\n        for i in xrange(N):\n            for t in xrange(1, 3):\n                color[0, i, t] = MOUSE\n                queue.append((0, i, t, MOUSE))\n                if i > 0:\n                    color[i, i, t] = CAT\n                    queue.append((i, i, t, CAT))\n\n        # percolate\n        while queue:\n            # for nodes that are colored :\n            i, j, t, c = queue.popleft()\n            # for every parent of this node i, j, t :\n            for i2, j2, t2 in parents(i, j, t):\n                # if this parent is not colored :\n                if color[i2, j2, t2] is DRAW:\n                    # if the parent can make a winning move (ie. mouse to MOUSE), do so\n                    if t2 == c: # winning move\n                        color[i2, j2, t2] = c\n                        queue.append((i2, j2, t2, c))\n                    # else, this parent has degree[parent]--, and enqueue if all children\n                    # of this parent are colored as losing moves\n                    else:\n                        degree[i2, j2, t2] -= 1\n                        if degree[i2, j2, t2] == 0:\n                            color[i2, j2, t2] = 3 - t2\n                            queue.append((i2, j2, t2, 3 - t2))\n\n        return color[1, 2, 1]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^3)$，其中 $N$ 是图中节点的数量，总共有 $O(N^2)$ 种状态，每一个状态节点最多有 $N$ 个出边，也就是 $N$ 种不同的移动方法。\n* 空间复杂度：$O(N^2)$。",
      "createdAt": "2019-08-18T05:57:19.565900+00:00",
      "hitCount": 6312,
      "identifier": "9YBoGz",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-si-lu-pou-xi-3-dpjie-jue-bo-yi-ce-lue-zui-jia-zh",
        "title": "C++ :: 思路剖析(3) dp解决 博弈策略(最佳状态) + 状态转移"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "cat-and-mouse"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mao-he-lao-shu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法 1：极大极小 / 从已知状态分析\n想法\n游戏的状态可以表示成 (m, c, t)，其中 m 是老鼠的位置，c 是猫的位置，t 当老鼠移动为 1 猫移动为 2。我们把这些状态看成节点，状态集合构成了一个有向图：玩家每一轮都有若干种选择方案，对应一个节点到另一个节点的有向边。\n有些节点的结果已经固定了：当老鼠位于",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Minimax",
          "nameTranslated": "极小化极大",
          "slug": "minimax",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "猫和老鼠",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 10,
        "id": 21309,
        "viewCount": 4365
      },
      "uuid": "9YBoGz",
      "videosInfo": []
    }
  }
}
