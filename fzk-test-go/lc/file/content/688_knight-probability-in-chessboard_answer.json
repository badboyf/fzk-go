{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：动态规划\n**算法：**\n- 令 `f[r][c][steps]` 代表马在位置 `(r, c)` 移动了 `steps` 次以后还留在棋盘上的概率，根据马的移动方式，我们有以下递归： \n$$f[r][c][steps] = \\sum_{dr, dc} f[r+dr][c+dc][steps-1] / 8.0$$\n- 根据题目我们可以知道 $(dr, dc)$ 的可能数据对是 $(2, 1),$ $(2, -1),$ $(-2, 1),$ $(-2, -1),$ $(1, 2),$ $(1, -2),$ $(-1, 2),$ $(-1, -2)$。\n- 我们将使用二维的 `dp` 和 `dp2` 来存储我们的数据，而不是使用三维数组 `f`。`dp2` 代表 `f[][][steps]`，`dp` 代表 `f[][][steps-1]`。 \n\n```java [solution1-Java]\nclass Solution {\n    public double knightProbability(int N, int K, int sr, int sc) {\n        double[][] dp = new double[N][N];\n        int[] dr = new int[]{2, 2, 1, 1, -1, -1, -2, -2};\n        int[] dc = new int[]{1, -1, 2, -2, 2, -2, 1, -1};\n\n        dp[sr][sc] = 1;\n        for (; K > 0; K--) {\n            double[][] dp2 = new double[N][N];\n            for (int r = 0; r < N; r++) {\n                for (int c = 0; c < N; c++) {\n                    for (int k = 0; k < 8; k++) {\n                        int cr = r + dr[k];\n                        int cc = c + dc[k];\n                        if (0 <= cr && cr < N && 0 <= cc && cc < N) {\n                            dp2[cr][cc] += dp[r][c] / 8.0;\n                        }\n                    }\n                }\n            }\n            dp = dp2;\n        }\n        double ans = 0.0;\n        for (double[] row: dp) {\n            for (double x: row) ans += x;\n        }\n        return ans;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def knightProbability(self, N, K, r, c):\n        dp = [[0] * N for _ in xrange(N)]\n        dp[r][c] = 1\n        for _ in xrange(K):\n            dp2 = [[0] * N for _ in xrange(N)]\n            for r, row in enumerate(dp):\n                for c, val in enumerate(row):\n                    for dr, dc in ((2,1),(2,-1),(-2,1),(-2,-1),\n                                   (1,2),(1,-2),(-1,2),(-1,-2)):\n                        if 0 <= r + dr < N and 0 <= c + dc < N:\n                            dp2[r+dr][c+dc] += val / 8.0\n            dp = dp2\n\n        return sum(map(sum, dp))\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2 K)$。其中 $N, K$ 为题目中的定义。我们对 $N^2$ 元素的每一层 `dp` 进行 $O(1)$ 工作，并且考虑了 $K$ 层。 \n* 空间复杂度：$O(N^2)$，`dp` 和 `dp2` 的大小。 \n\n\n####  方法二：矩阵求幂\n方法 1 中表示的状态重复表达了过渡到其他的线性组合的状态。 任何情况下，我们都可以将整个转换表示为这些线性组合的矩阵。然后，这个矩阵的第 $n$ 次方代表了 $n$ 移动的转换，因此我们可以将问题简化为矩阵求幂问题。 \n\n**算法：**\n- 首先，我们可以利用棋盘上的对称性。马可能有 $n^2$ 的状态（假设它在板上）。由于横轴、纵轴和对角线的对称性，我们可以假设骑士在棋盘的左上象限，并且列数等于或大于行数。对于任何一个位置，通过满足条件通过轴反射得到位置将是该位置的标准索引。 \n- 这将使状态数从 $N^2$ 减少到大约 $\\frac{N^2}{8}$，这使得在这个 $O(\\frac{N^2}{8}) \\times O(\\frac{N^2}{8})$ 矩阵上下求幂大约快 $8^3$ 倍。 \n- 现在，如果我们知道每一个状态在一次移动后都会变成某种状态的线性组合，那么让我们写一个过渡矩阵 $\\mathcal{T}$，其中 $\\mathcal{T}$ 的第 $i$ 行代表了第 $i$ 个状态的线性组合。然后，$\\mathcal{T}^n$ 表示 $n$ 次移动的转换，我们需要第 $i$ 行的总和，其中 $i$ 是起始位置的索引。 \n\n```java [solution2-Java]\nclass Solution {\n    public double knightProbability(int N, int K, int sr, int sc) {\n        int[] dr = new int[]{-1, -1, 1, 1, -2, -2, 2, 2};\n        int[] dc = new int[]{2, -2, 2, -2, 1, -1, 1, -1};\n\n        int[] index = new int[N * N];\n        int t = 0;\n        for (int r = 0; r < N; r++) {\n            for (int c = 0; c < N; c++) {\n                if (r * N + c == canonical(r, c, N)) {\n                    index[r * N + c] = t;\n                    t++;\n                } else {\n                    index[r * N + c] = index[canonical(r, c, N)];\n                }\n            }\n        }\n\n        double[][] T = new double[t][t];\n        int curRow = 0;\n        for (int r = 0; r < N; r++) {\n            for (int c = 0; c < N; c++) {\n                if (r * N + c == canonical(r, c, N)) {\n                    for (int k = 0; k < 8; k++) {\n                        int cr = r + dr[k], cc = c + dc[k];\n                        if (0 <= cr && cr < N && 0 <= cc && cc < N) {\n                            T[curRow][index[canonical(cr, cc, N)]] += 0.125;\n                        }\n                    }\n                    curRow++;\n                }\n            }\n        }\n\n        double[] row = matrixExpo(T, K)[index[sr*N + sc]];\n        double ans = 0.0;\n        for (double x: row) ans += x;\n        return ans;\n    }\n\n    public int canonical(int r, int c, int N) {\n        if (2*r > N) r = N-1-r;\n        if (2*c > N) c = N-1-c;\n        if (r > c) {\n            int t = r;\n            r = c;\n            c = t;\n        }\n        return r * N + c;\n    }\n    public double[][] matrixMult(double[][] A, double[][] B) {\n        double[][] ans = new double[A.length][A.length];\n        for (int i = 0; i < A.length; i++) {\n            for (int j = 0; j < B[0].length; j++) {\n                for (int k = 0; k < B.length; k++) {\n                    ans[i][j] += A[i][k] * B[k][j];\n                }\n            }\n        }\n        return ans;\n    }\n    public double[][] matrixExpo(double[][] A, int pow) {\n        double[][] ans = new double[A.length][A.length];\n        for (int i = 0; i < A.length; i++) ans[i][i] = 1;\n        if (pow == 0) return ans;\n        if (pow == 1) return A;\n        if (pow % 2 == 1) return matrixMult(matrixExpo(A, pow-1), A);\n        double[][] B = matrixExpo(A, pow / 2);\n        return matrixMult(B, B);\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def knightProbability(self, N, K, sr, sc):\n        def canonical(r, c):\n            if 2 * r > N: r = N - 1 - r\n            if 2 * c > N: c = N - 1 - c\n            if r > c: r, c = c, r\n            return r*N + c\n\n        def matrix_mult(A, B):\n            ZB = zip(*B)\n            return [[sum(a * b for a, b in zip(row, col))\n                     for col in ZB] for row in A]\n\n        def matrix_expo(A, K):\n            if K == 0:\n                return [[+(i==j) for j in xrange(len(A))]\n                        for i in xrange(len(A))]\n            if K == 1:\n                return A\n            elif K % 2:\n                return matrix_mult(matrix_expo(A, K-1), A)\n            B = matrix_expo(A, K/2)\n            return matrix_mult(B, B)\n\n        index = [0] * (N*N)\n        t = 0\n        for r in xrange(N):\n            for c in xrange(N):\n                if r*N + c == canonical(r, c):\n                    index[r*N + c] = t\n                    t += 1\n                else:\n                    index[r*N + c] = index[canonical(r, c)]\n\n        T = []\n        for r in xrange(N):\n            for c in xrange(N):\n                if r*N + c == canonical(r, c):\n                    row = [0] * t\n                    for dr, dc in ((2,1),(2,-1),(-2,1),(-2,-1),\n                                    (1,2),(1,-2),(-1,2),(-1,-2)):\n                        if 0 <= r+dr < N and 0 <= c+dc < N:\n                            row[index[(r+dr)*N + c+dc]] += 0.125\n                    T.append(row)\n\n        Tk = matrix_expo(T, K)\n        i = index[sr * N + sc]\n        return sum(Tk[i])\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^6 \\log(K))$。其中 $N, K$ 为题目中的定义。大约有 $\\frac{N^2}{8}$ 规范状态，这使得我们的矩阵乘法 $O(N^6)$。为了找到这个矩阵的第 $K$ 次幂，我们做了 $O(\\log(K))$ matrix乘法。 \n* 空间复杂度：$O(N^4)$，矩阵有大约 $\\frac{N^4}{64}$ 个元素。",
      "createdAt": "2019-08-23T09:46:39.047764+00:00",
      "hitCount": 11211,
      "identifier": "bxSBPs",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ru-he-yong-ni-xiang-si-wei-zuo-dong-tai-hljrt",
        "title": "动态规划 考察逆向思维"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "knight-probability-in-chessboard"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 17,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "ma-zai-qi-pan-shang-de-gai-lu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：动态规划 算法： - 令 f[r][c][steps] 代表马在位置 (r, c) 移动了 steps 次以后还留在棋盘上的概率，根据马的移动方式，我们有以下递归：  f[r][c][steps] = \\sum_{dr, dc} f[r+dr][c+dc][steps-1] / 8.0 - 根据题目我们可以知道",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "“马”在棋盘上的概率",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 10,
        "id": 22512,
        "viewCount": 7736
      },
      "uuid": "bxSBPs",
      "videosInfo": []
    }
  }
}
