{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解 \n![...5. 验证回文串 - Lizzi.mp4](98a47d9e-6ecd-4e24-a5b8-88f62f6cac57)\n\n### 📖 文字题解\n#### 前言\n\n本题考查的是语言中常用字符（串）相关 API 的使用。本题解会给出解题思路以及参考代码，如果代码中有读者不熟悉的 API，可以自行查阅资料学习。\n\n#### 方法一：筛选 + 判断\n\n最简单的方法是对字符串 $s$ 进行一次遍历，并将其中的字母和数字字符进行保留，放在另一个字符串 $\\textit{sgood}$ 中。这样我们只需要判断 $\\textit{sgood}$ 是否是一个普通的回文串即可。\n\n判断的方法有两种。第一种是使用语言中的字符串翻转 API 得到 $\\textit{sgood}$ 的逆序字符串 $\\textit{sgood\\_rev}$，只要这两个字符串相同，那么 $\\textit{sgood}$ 就是回文串。\n\n```C++ [sol11-C++]\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        string sgood;\n        for (char ch: s) {\n            if (isalnum(ch)) {\n                sgood += tolower(ch);\n            }\n        }\n        string sgood_rev(sgood.rbegin(), sgood.rend());\n        return sgood == sgood_rev;\n    }\n};\n```\n\n```Python [sol11-Python3]\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        sgood = \"\".join(ch.lower() for ch in s if ch.isalnum())\n        return sgood == sgood[::-1]\n```\n\n```Java [sol11-Java]\nclass Solution {\n    public boolean isPalindrome(String s) {\n        StringBuffer sgood = new StringBuffer();\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetterOrDigit(ch)) {\n                sgood.append(Character.toLowerCase(ch));\n            }\n        }\n        StringBuffer sgood_rev = new StringBuffer(sgood).reverse();\n        return sgood.toString().equals(sgood_rev.toString());\n    }\n}\n```\n\n第二种是使用双指针。初始时，左右指针分别指向 $\\textit{sgood}$ 的两侧，随后我们不断地将这两个指针相向移动，每次移动一步，并判断这两个指针指向的字符是否相同。当这两个指针相遇时，就说明 $\\textit{sgood}$ 时回文串。\n\n```C++ [sol12-C++]\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        string sgood;\n        for (char ch: s) {\n            if (isalnum(ch)) {\n                sgood += tolower(ch);\n            }\n        }\n        int n = sgood.size();\n        int left = 0, right = n - 1;\n        while (left < right) {\n           if (sgood[left] != sgood[right]) {\n                return false;\n            }\n            ++left;\n            --right;\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol12-Python3]\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        sgood = \"\".join(ch.lower() for ch in s if ch.isalnum())\n        n = len(sgood)\n        left, right = 0, n - 1\n        \n        while left < right:\n            if sgood[left] != sgood[right]:\n                return False\n            left, right = left + 1, right - 1\n        return True\n```\n\n```golang [sol12-Golang]\nfunc isPalindrome(s string) bool {\n    var sgood string\n    for i := 0; i < len(s); i++ {\n        if isalnum(s[i]) {\n            sgood += string(s[i])\n        }\n    }\n\n    n := len(sgood)\n    sgood = strings.ToLower(sgood)\n    for i := 0; i < n/2; i++ {\n        if sgood[i] != sgood[n-1-i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc isalnum(ch byte) bool {\n    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')\n}\n```\n\n```Java [sol12-Java]\nclass Solution {\n    public boolean isPalindrome(String s) {\n        StringBuffer sgood = new StringBuffer();\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetterOrDigit(ch)) {\n                sgood.append(Character.toLowerCase(ch));\n            }\n        }\n        int n = sgood.length();\n        int left = 0, right = n - 1;\n        while (left < right) {\n            if (Character.toLowerCase(sgood.charAt(left)) != Character.toLowerCase(sgood.charAt(right))) {\n                return false;\n            }\n            ++left;\n            --right;\n        }\n        return true;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|s|)$，其中 $|s|$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(|s|)$。由于我们需要将所有的字母和数字字符存放在另一个字符串中，在最坏情况下，新的字符串 $\\textit{sgood}$ 与原字符串 $s$ 完全相同，因此需要使用 $O(|s|)$ 的空间。\n\n#### 方法二：在原字符串上直接判断\n\n我们可以对方法一中第二种判断回文串的方法进行优化，就可以得到只使用 $O(1)$ 空间的算法。\n\n我们直接在原字符串 $s$ 上使用双指针。在移动任意一个指针时，需要不断地向另一指针的方向移动，直到遇到一个字母或数字字符，或者两指针重合为止。也就是说，我们每次将指针移到下一个字母字符或数字字符，再判断这两个指针指向的字符是否相同。\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        int n = s.size();\n        int left = 0, right = n - 1;\n        while (left < right) {\n            while (left < right && !isalnum(s[left])) {\n                ++left;\n            }\n            while (left < right && !isalnum(s[right])) {\n                --right;\n            }\n            if (left < right) {\n                if (tolower(s[left]) != tolower(s[right])) {\n                    return false;\n                }\n                ++left;\n                --right;\n            }\n        }\n        return true;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        n = len(s)\n        left, right = 0, n - 1\n        \n        while left < right:\n            while left < right and not s[left].isalnum():\n                left += 1\n            while left < right and not s[right].isalnum():\n                right -= 1\n            if left < right:\n                if s[left].lower() != s[right].lower():\n                    return False\n                left, right = left + 1, right - 1\n\n        return True\n```\n\n```golang [sol2-Golang]\nfunc isPalindrome(s string) bool {\n    s = strings.ToLower(s)\n    left, right := 0, len(s) - 1\n    for left < right {\n        for left < right && !isalnum(s[left]) {\n            left++\n        }\n        for left < right && !isalnum(s[right]) {\n            right--\n        }\n        if left < right {\n            if s[left] != s[right] {\n                return false\n            }\n            left++\n            right--\n        }\n    }\n    return true\n}\n\nfunc isalnum(ch byte) bool {\n    return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')\n}\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public boolean isPalindrome(String s) {\n        int n = s.length();\n        int left = 0, right = n - 1;\n        while (left < right) {\n            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {\n                ++left;\n            }\n            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {\n                --right;\n            }\n            if (left < right) {\n                if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {\n                    return false;\n                }\n                ++left;\n                --right;\n            }\n        }\n        return true;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(|s|)$，其中 $|s|$ 是字符串 $s$ 的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2020-06-17T06:12:27.842913+00:00",
      "hitCount": 111410,
      "identifier": "rHVrYL",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ju-ruo-de-ti-jie-by-bruh-d-ui4z",
        "title": "蒟蒻的题解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "valid-palindrome"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 88,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 12,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "yan-zheng-hui-wen-chuan-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 前言 本题考查的是语言中常用字符（串）相关 API 的使用。本题解会给出解题思路以及参考代码，如果代码中有读者不熟悉的 API，可以自行查阅资料学习。 方法一：筛选 + 判断 最简单的方法是对字符串 $s$ 进行一次遍历，并将其中的字母和数字字符进行保留，放在另一个字符串 $\\textit{",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "验证回文串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 194,
        "id": 292148,
        "viewCount": 81287
      },
      "uuid": "rHVrYL",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/8B09CC9060794C78968CA9ADB35D7FC9-6-2.png",
          "duration": 425.8133,
          "videoId": "6f5b924c044f42c6a3d1657b6a2f191a"
        }
      ]
    }
  }
}
