{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "出云曦仪",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/default_avatar.png",
          "userSlug": "chu-yun-xi-yi"
        },
        "username": "chu-yun-xi-yi"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路：\n主要先考虑如果去消除连续字符，$n$ 代表步数，$s$ 代表连续的个数，最后的目标都是小于 $3$。\n1. 删除 效率最低 `s-n*1<3`\n2. 插入 效率其次 `s-n*2<3`\n3. 替换 效率最高 `s-n*3<3`\n\n\n举例 `aaaaa` 五连字符，要正确的话如果只删除要 $3$ 步， 如果插入的话要 $2$ 步，如果替换只需要替换中间的 $a$ 一步就可以完成。\n\n接下来 分情况讨论\n1. 长度 `<6 `，步数=缺失类型和缺失长度取大者。\n2. 长度 `(6,20)`，这时候我们不需要低效的插入和删除来处理连续字符，直接替换步数就等于处理连续字和缺失类型取大者。\n3. 比较负载的是 `>20`，我们需要知道优先级，一样优先处理连续数组。\n优先处理缺失类型，用替换的方式来处理，这时候要替换的连续组的连续数 `%3==2 -> 连续数%3==1 -> 连续数%3==0`，然后处理多余字符，删除的优先级是连续组的连续数 `%3==0 -> 连续数%3==1 -> 连续数%3==2`。\n### 代码：\n\n\n```Java [-Java]\npublic class Solution3 {\n    /**\n     * 记录连续出现的字符 起始和终止坐标\n     */\n    class SameChar {\n        int st;\n        int en;\n        char c;\n\n        SameChar(int st, int en, char c) {\n            this.st = st;\n            this.en = en;\n            this.c = c;\n        }\n\n    }\n\n    public int strongPasswordChecker(String str) {\n        // 统计小写字符\n        int lowerCase = 0;\n        // 统计大写字符\n        int upwerCase = 0;\n        // 统计数字\n        int number = 0;\n        // 统计连续字符出现的位置\n        java.util.ArrayList<SameChar> sameChars = new java.util.ArrayList<SameChar>();\n        char[] chars = str.toCharArray();\n        if (chars.length == 0) {\n            return 6;\n        }\n        // 记露连续出现的字符\n        SameChar sameChar = new SameChar(0, 0, '\\0');\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                lowerCase++;\n            } else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                upwerCase++;\n            } else if (chars[i] >= '0' && chars[i] <= '9') {\n                number++;\n            }\n            if (sameChar.c != chars[i]) {\n                if (sameChar.en - sameChar.st >= 2) {\n                    sameChars.add(new SameChar(sameChar.st, sameChar.en, sameChar.c));\n                }\n                sameChar.c = chars[i];\n                sameChar.st = i;\n                sameChar.en = i;\n            } else {\n                sameChar.en = i;\n            }\n        }\n        if (sameChar.en - sameChar.st >= 2) {\n            sameChars.add(new SameChar(sameChar.st, sameChar.en, sameChar.c));\n        }\n        // 缺失的类型. 只可能是1 or 2\n        int needType = count0(lowerCase, upwerCase, number);\n        // 连续的字符出现的要消除的个数 连续值-2\n        int[] chages = new int[sameChars.size()];\n        for (int j = 0; j < sameChars.size(); j++) {\n            chages[j] = sameChars.get(j).en - sameChars.get(j).st - 1;\n        }\n        int res = 0;\n        // 如果长度小于6 , 很简单 要补的字符和缺失的类型择大\n        if (str.length() < 6) {\n            return Integer.max(6 - str.length(), needType);\n        }\n        // 删除的时候 要有优先概念\n        if (str.length() > 20) {\n            int index = -1;\n            while (needType > 0 && (index = find(chages, 0)) > -1) {\n                chages[index] = Integer.max(chages[index] - 3, 0);\n                res++;\n                needType--;\n            }\n            int d = str.length() - 20;\n            while (d > 0 && (index = find(chages, 1)) > -1) {\n                d--;\n                res++;\n                chages[index]--;\n            }\n            int n = 0;\n            for (int l = 0; l < chages.length; l++) {\n                n += chages[l] % 3 == 0 ? chages[l] / 3 : chages[l] / 3 + 1;\n            }\n            return res + d + needType + n;\n        }\n        int n = 0;\n        for (int l = 0; l < chages.length; l++) {\n            n += chages[l] % 3 == 0 ? chages[l] / 3 : chages[l] / 3 + 1;\n        }\n        return Integer.max(n, needType);\n    }\n\n    private int count0(int... array) {\n        int n = 0;\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] == 0) {\n                n++;\n            }\n        }\n        return n;\n    }\n\n    private int find(int[] array, int n) {\n        int n0 = -1;\n        int n1 = -1;\n        int n2 = -1;\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] > 0 && array[i] % 3 == 0) {\n                n0 = i;\n            }\n            if (array[i] > 0 && array[i] % 3 == 1) {\n                n1 = i;\n            }\n            if (array[i] > 0 && array[i] % 3 == 2) {\n                n2 = i;\n            }\n        }\n        if (n == 0) {\n            return n0 > -1 ? n0 : (n2 > -1 ? n2 : n1);\n        }\n        if (n == 1) {\n            return n1 > -1 ? n1 : (n2 > -1 ? n2 : n0);\n        }\n        return -1;\n    }\n}\n```",
      "createdAt": "2019-07-10T13:35:40.283036+00:00",
      "hitCount": 9051,
      "identifier": "bh1ghG",
      "isEditorsPick": true,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ti-gong-jian-dan-de-si-lu-by-ray112358-5q1j",
        "title": "提供简单的思路"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "strong-password-checker"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 12,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zhi-xing-1ms-ji-bai-100-javajie-ti-si-lu-by-chu-yu",
      "status": "PUBLISHED",
      "summary": "解题思路：\n主要先考虑如果去消除连续字符，n 代表步数，s 代表连续的个数，最后的目标都是小于 3。\n\n删除 效率最低 s-n*1<3\n插入 效率其次 s-n*2<3\n替换 效率最高 s-n*3<3\n\n举例 aaaaa 五连字符，要正确的话如果只删除要 3 步， 如果插入的话要 2 步，如果替换只需要替换中间的 a 一",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "强密码检验器",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 10,
        "id": 13605,
        "viewCount": 7074
      },
      "uuid": "bh1ghG",
      "videosInfo": []
    }
  }
}
