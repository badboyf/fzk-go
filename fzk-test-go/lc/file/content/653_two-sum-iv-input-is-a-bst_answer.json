{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：使用 HashSet【通过】\n\n最简单的方法就是遍历整棵树，找出所有可能的组合，判断是否存在和为 $k$ 的一对节点。现在在此基础上做一些改进。\n\n如果存在两个元素之和为 $k$，即 $x+y=k$，并且已知 $x$ 是树上一个节点的值，则只需判断树上是否存在一个值为 $y$ 的节点，使得 $y=k-x$。基于这种思想，在树的每个节点上遍历它的两棵子树（左子树和右子树），寻找另外一个匹配的数。在遍历过程中，将每个节点的值都放到一个 $set$ 中。\n\n对于每个值为 $p$ 的节点，在 $set$ 中检查是否存在 $k-p$。如果存在，那么可以在该树上找到两个节点的和为 $k$；否则，将 $p$ 放入到 $set$ 中。\n\n如果遍历完整棵树都没有找到一对节点和为 $k$，那么该树上不存在两个和为 $k$ 的节点。\n\n```java [solution1-Java]\npublic class Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        Set < Integer > set = new HashSet();\n        return find(root, k, set);\n    }\n    public boolean find(TreeNode root, int k, Set < Integer > set) {\n        if (root == null)\n            return false;\n        if (set.contains(k - root.val))\n            return true;\n        set.add(root.val);\n        return find(root.left, k, set) || find(root.right, k, set);\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $N$ 是节点的数量。最坏的情况下，整棵树被遍历一次。\n\n* 空间复杂度：$O(n)$。最坏的情况下，$set$ 存储 $n$ 个节点的值。\n\n\n#### 方法二：使用 BFS 和 HashSet【通过】\n\n**算法**\n\n本方法中，$set$ 的用途与 *方法一* 相同。但是本方法使用广度优先搜索遍历二叉树，这是一种非常常见的遍历方法。\n\n使用广度优先搜索查找一对节点和为 $k$ 的过程如下。首先维护一个与 *方法一* 用途相同的 $set$。将根节点加入 $queue$，然后执行以下步骤：\n\n1. 从队列首部删除一个元素 $p$。\n\n2. 检查 $set$ 中是否存在 $k-p$。如果存在，返回 True。\n\n3. 否则，将 $p$ 加入 $set$。然后将当前节点的左孩子和右孩子加入 $queue$。\n\n4. 重复步骤一至三，直到 $queue$ 为空。\n\n5. 如果 $queue$ 为空，返回 False。\n\n按照以上步骤，逐层遍历二叉树。\n\n```java [solution2-Java]\npublic class Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        Set < Integer > set = new HashSet();\n        Queue < TreeNode > queue = new LinkedList();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            if (queue.peek() != null) {\n                TreeNode node = queue.remove();\n                if (set.contains(k - node.val))\n                    return true;\n                set.add(node.val);\n                queue.add(node.right);\n                queue.add(node.left);\n            } else\n                queue.remove();\n        }\n        return false;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是树中节点的数量。最坏的情况下，需要遍历整棵树。\n\n* 空间复杂度：$O(n)$。最坏的情况下，$set$ 存储 $n$ 个节点的值。\n\n\n#### 方法三：使用 BST【通过】\n\n**算法**\n\n在本方法中利用 BST 的性质，BST 的中序遍历结果是按升序排列的。因此，中序遍历给定的 BST，并将遍历结果存储到 $list$ 中。\n\n遍历完成后，使用两个指针 $l$ 和 $r$ 作为 $list$ 的头部索引和尾部索引。然后执行以下操作：\n\n1. 检查 $l$ 和 $r$ 索引处两元素之和是否等于 $k$。如果是，立即返回 True。\n\n2. 如果当前两元素之和小于 $k$，则更新 $l$ 指向下一个元素。这是因为当我们需要增大两数之和时，应该增大较小数。\n\n3. 如果当前两元素之和大于 $k$，则更新 $r$ 指向上一个元素。这是因为当我们需要减小两数之和时，应该减小较大数。\n\n4. 重复步骤一至三，直到左指针 $l$ 大于右指针 $r$。\n\n5. 如果左指针 $l$ 到右指针 $r$ 的右边，则返回 False。\n\n注意，在任何情况下，都不应该增大较大的数，也不应该减小较小的数。这是因为如果当前两数之和大于 $k$，不应该首先增大 $list[r]$ 的值。类似的，也不应该首先减小 $list[l]$ 的值。\n\n``` java [solution3-Java]\npublic class Solution {\n    public boolean findTarget(TreeNode root, int k) {\n        List < Integer > list = new ArrayList();\n        inorder(root, list);\n        int l = 0, r = list.size() - 1;\n        while (l < r) {\n            int sum = list.get(l) + list.get(r);\n            if (sum == k)\n                return true;\n            if (sum < k)\n                l++;\n            else\n                r--;\n        }\n        return false;\n    }\n    public void inorder(TreeNode root, List < Integer > list) {\n        if (root == null)\n            return;\n        inorder(root.left, list);\n        list.add(root.val);\n        inorder(root.right, list);\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n)$，其中 $n$ 是树中节点的数量。本方法需要中序遍历整棵树。\n\n* 空间复杂度：$O(n)$，$list$ 中存储 $n$ 个元素。",
      "createdAt": "2019-12-31T03:44:45.506158+00:00",
      "hitCount": 26872,
      "identifier": "esQebL",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "653-morrisjia-shuang-zhi-zhen-shi-xian-k-r2rm",
        "title": "653. Morris加双指针，实现空间O(1)，时间O(n)。击败官方！"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "two-sum-iv-input-is-a-bst"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 23,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "liang-shu-zhi-he-iv-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 方法一：使用 HashSet【通过】\n最简单的方法就是遍历整棵树，找出所有可能的组合，判断是否存在和为 k 的一对节点。现在在此基础上做一些改进。\n如果存在两个元素之和为 k，即 x+y=k，并且已知 x 是树上一个节点的值，则只需判断树上是否存在一个值为 y 的节点，使得 y=k-x。基于这种思想，在树的每个节点上",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "两数之和 IV",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 55,
        "id": 65176,
        "viewCount": 20314
      },
      "uuid": "esQebL",
      "videosInfo": []
    }
  }
}
