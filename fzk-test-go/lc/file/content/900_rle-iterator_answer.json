{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：维护下一个元素的位置和删除次数\n\n**分析**\n\n在调用 `next()` 函数时，我们不会真正删除剩余的元素（或者说改变数组 `A` 的值），而是维护两个变量 `i` 和 `q`，其中 `i` 表示迭代器当前指向的是元素 `A[i + 1]`，`q` 表示它已经被删除的次数，`q` 的值不会大于 `A[i]`。\n\n例如，当数组 `A` 为 `[1,2,3,4]` 时，它表示的序列为 `[2,4,4,4]`。当 `i` 和 `q` 的值分别为 `0` 和 `0` 时，表示没有任何元素被删除；当 `i` 和 `q` 的值分别为 `0` 和 `1` 时，表示元素 `A[0 + 1] = 2` 被删除了 `1` 次；当 `i` 和 `q` 的值分别为 `2` 和 `1` 时，表示元素 `A[2 + 1] = 4` 被删除了 `1` 次，且之前的元素被全部删除。\n\n**算法**\n\n如果我们调用 `next(n)`，即删除 `n` 个元素，那么对于当前的元素 `A[i + 1]`，我们还可以删除的次数为 `D = A[i] - q`。\n\n如果 `n > D`，那么我们会删除所有的 `A[i + 1]`，并迭代到下一个元素，即 `n -= D; i += 2; q = 0`。\n\n如果 `n <= D`，那么我们删除的最后一个元素就为 `A[i + 1]`，即 `q += D; return A[i + 1]`。\n\n```Java [sol1]\nclass RLEIterator {\n    int[] A;\n    int i, q;\n\n    public RLEIterator(int[] A) {\n        this.A = A;\n        i = q = 0;\n    }\n\n    public int next(int n) {\n        while (i < A.length) {\n            if (q + n > A[i]) {\n                n -= A[i] - q;\n                q = 0;\n                i += 2;\n            } else {\n                q += n;\n                return A[i+1];\n            }\n        }\n\n        return -1;\n    }\n}\n\n```\n\n```Python [sol1]\nclass RLEIterator(object):\n\n    def __init__(self, A):\n        self.A = A\n        self.i = 0\n        self.q = 0\n\n    def next(self, n):\n        while self.i < len(self.A):\n            if self.q + n > self.A[self.i]:\n                n -= self.A[self.i] - self.q\n                self.q = 0\n                self.i += 2\n            else:\n                self.q += n\n                return self.A[self.i+1]\n        return -1\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N + Q)$，其中 $N$ 是数组 `A` 的长度，$Q$ 是调用函数 `next()` 的次数。\n\n* 空间复杂度：$O(N)$。",
      "createdAt": "2019-08-06T06:15:20.926981+00:00",
      "hitCount": 2222,
      "identifier": "P69K7o",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "900-cji-hu-shuang-bai-de-mo-ni-jie-fa-by-ya43",
        "title": "900. c++几乎双百的模拟解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "rle-iterator"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "rle-die-dai-qi-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：维护下一个元素的位置和删除次数\n分析\n在调用 next() 函数时，我们不会真正删除剩余的元素（或者说改变数组 A 的值），而是维护两个变量 i 和 q，其中 i 表示迭代器当前指向的是元素 A[i + 1]，q 表示它已经被删除的次数，q 的值不会大于 A[i]。\n例如，当数组 A 为 [1,2,3,4]",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Design",
          "nameTranslated": "设计",
          "slug": "design",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "RLE 迭代器",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 6,
        "id": 18777,
        "viewCount": 1745
      },
      "uuid": "P69K7o",
      "videosInfo": []
    }
  }
}
