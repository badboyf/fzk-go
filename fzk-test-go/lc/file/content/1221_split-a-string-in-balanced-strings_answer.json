{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心\n\n根据题意，对于一个平衡字符串 $s$，若 $s$ 能从中间某处分割成左右两个子串，若其中一个是平衡字符串，则另一个的 $\\texttt{L}$ 和 $\\texttt{R}$ 字符的数量必然是相同的，所以也一定是平衡字符串。\n\n为了最大化分割数量，我们可以不断循环，每次从 $s$ 中分割出一个最短的平衡前缀，由于剩余部分也是平衡字符串，我们可以将其当作 $s$ 继续分割，直至 $s$ 为空时，结束循环。\n\n代码实现中，可以在遍历 $s$ 时用一个变量 $d$ 维护 $\\texttt{L}$ 和 $\\texttt{R}$ 字符的数量之差，当 $d=0$ 时就说明找到了一个平衡字符串，将答案加一。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int balancedStringSplit(string s) {\n        int ans = 0, d = 0;\n        for (char ch : s) {\n            ch == 'L' ? ++d : --d;\n            if (d == 0) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int balancedStringSplit(String s) {\n        int ans = 0, d = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            char ch = s.charAt(i);\n            if (ch == 'L') {\n                ++d;\n            } else {\n                --d;\n            }\n            if (d == 0) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int BalancedStringSplit(string s) {\n        int ans = 0, d = 0;\n        foreach (char ch in s) {\n            if (ch == 'L') {\n                ++d;\n            } else {\n                --d;\n            }\n            if (d == 0) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def balancedStringSplit(self, s: str) -> int:\n        ans, d = 0, 0\n        for ch in s:\n            if ch == 'L':\n                d += 1\n            else:\n                d -= 1\n            if d == 0:\n                ans += 1\n        return ans\n```\n\n```go [sol1-Golang]\nfunc balancedStringSplit(s string) (ans int) {\n    d := 0\n    for _, ch := range s {\n        if ch == 'L' {\n            d++\n        } else {\n            d--\n        }\n        if d == 0 {\n            ans++\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar balancedStringSplit = function(s) {\n    let ans = 0, d = 0;\n    for (let i = 0; i < s.length; ++i) {\n        const ch = s[i];\n        if (ch === 'L') {\n            ++d;\n        } else {\n            --d;\n        }\n        if (d === 0) {\n            ++ans;\n        }\n    }\n    return ans;\n};\n```\n\n```C [sol1-C]\nint balancedStringSplit(char* s) {\n    int ans = 0, d = 0;\n    for (int i = 0; s[i]; i++) {\n        s[i] == 'L' ? ++d : --d;\n        if (d == 0) {\n            ++ans;\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是字符串 $s$ 的长度。我们仅需遍历 $s$ 一次。\n\n- 空间复杂度：$O(1)$。只需要常数的空间存放若干变量。",
      "createdAt": "2021-08-28T11:26:55.195333+00:00",
      "hitCount": 20909,
      "identifier": "Ce9gl2",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-noxiang-xin-ke-xue-xi-wumnk",
        "title": "【宫水三叶の相信科学系列】归纳法证明从「最小分割点」进行分割可以得到最优解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "split-a-string-in-balanced-strings"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 28,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "fen-ge-ping-heng-zi-fu-chuan-by-leetcode-7y8u",
      "status": "PUBLISHED",
      "summary": "方法一：贪心 根据题意，对于一个平衡字符串 $s$，若 $s$ 能从中间某处分割成左右两个子串，若其中一个是平衡字符串，则另一个的 $\\texttt{L}$ 和 $\\texttt{R}$ 字符的数量必然是相同的，所以也一定是平衡字符串。 为了最大化分割数量，我们可以不断循环，每次从 $s$ 中分割出一个最短的平衡前缀，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "分割平衡字符串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 78,
        "id": 963965,
        "viewCount": 17297
      },
      "uuid": "Ce9gl2",
      "videosInfo": []
    }
  }
}
