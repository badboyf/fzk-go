{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\r\n\r\n根据题意，有以下四种字符需要考虑：\r\n\r\n1. **首部空格：** 删除之即可；\r\n2. **符号位：** 三种情况，即 ''$+$'' , ''$-$'' , ''无符号\"  ；新建一个变量保存符号位，返回前判断正负即可。\r\n3. **非数字字符：** 遇到首个非数字的字符时，应立即返回。\r\n4. **数字字符：**\r\n   1. **字符转数字：** “此数字的 ASCII 码” 与 “ $0$ 的 ASCII 码” 相减即可；\r\n   2. **数字拼接：** 若从左向右遍历数字，设当前位字符为 $c$ ，当前位数字为 $x$ ，数字结果为 $res$ ，则数字拼接公式为：\r\n\r\n$$\r\nres = 10 \\times res + x \\\\\r\nx = ascii(c) - ascii('0')\r\n$$\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/0be9098b13047fe3e07f3c4e51c612244ace01a023ed010bce43940408334f2a-Picture1.png){:width=450}\r\n\r\n**数字越界处理：**\r\n\r\n> 题目要求返回的数值范围应在 $[-2^{31}, 2^{31} - 1]$ ，因此需要考虑数字越界问题。而由于题目指出 `环境只能存储 32 位大小的有符号整数` ，因此判断数字越界时，要始终保持 $res$ 在 int 类型的取值范围内。 \r\n\r\n在每轮数字拼接前，判断 $res$ **在此轮拼接后是否超过 $2147483647$** ，若超过则加上符号位直接返回。\r\n设数字拼接边界 $bndry = 2147483647 // 10 = 214748364$ ，则以下两种情况越界：\r\n\r\n$$\r\n\\begin{cases}\r\n res > bndry & 情况一：执行拼接 10 \\times res \\geq 2147483650 越界 \\\\\r\n res = bndry, x > 7 & 情况二：拼接后是 2147483648 或 2147483649 越界 \\\\\r\n\\end{cases}\r\n$$\r\n\r\n![Picture2.png](https://pic.leetcode-cn.com/d1b06a91801868af63f6e309da31bcfa01c7b6c385529fb974389a61e454cd12-Picture2.png){:width=450}\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(N)$ ：** 其中 $N$ 为字符串长度，线性遍历字符串占用 $O(N)$ 时间。\r\n- **空间复杂度 $O(N)$ ：** 删除首尾空格后需建立新字符串，最差情况下占用 $O(N)$ 额外空间。\r\n\r\n<![Picture2.png](https://pic.leetcode-cn.com/6bfd214079522c42319d77a28adb623fbfae5e3815190c51dca0aad5cc62ce26-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/2a1740dd6a0098ab66ab77e496e44ae1e1661a17b84c3a65865542b2879bc734-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/73d70f327a16f751c735aa7a926c8fc2a2e111e211411713f8dedbb8581fa413-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/00fcc1b300f6c437a50c67fade44cc9747d1633cf8fe78dcd75724e45b11ca49-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/892dfddf72537c81bc61fd348c1842c05a70f48ebb0f467b74462d487a91b259-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/fe60a8c3b3f2e0d9c9ebb79cc76877a000a587e2b0e523bd2c20d6d32e8983fa-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/385b721351255e14296f424599847c48f15a32d1dedf48b9afcf94052ce739b5-Picture8.png)>\r\n\r\n#### 代码：\r\n\r\n```Python []\r\nclass Solution:\r\n    def strToInt(self, str: str) -> int:\r\n        str = str.strip()                      # 删除首尾空格\r\n        if not str: return 0                   # 字符串为空则直接返回\r\n        res, i, sign = 0, 1, 1\r\n        int_max, int_min, bndry = 2 ** 31 - 1, -2 ** 31, 2 ** 31 // 10\r\n        if str[0] == '-': sign = -1            # 保存负号\r\n        elif str[0] != '+': i = 0              # 若无符号位，则需从 i = 0 开始数字拼接\r\n        for c in str[i:]:\r\n            if not '0' <= c <= '9' : break     # 遇到非数字的字符则跳出\r\n            if res > bndry or res == bndry and c > '7': return int_max if sign == 1 else int_min # 数字越界处理\r\n            res = 10 * res + ord(c) - ord('0') # 数字拼接\r\n        return sign * res\r\n```\r\n\r\n```Java []\r\nclass Solution {\r\n    public int strToInt(String str) {\r\n        char[] c = str.trim().toCharArray();\r\n        if(c.length == 0) return 0;\r\n        int res = 0, bndry = Integer.MAX_VALUE / 10;\r\n        int i = 1, sign = 1;\r\n        if(c[0] == '-') sign = -1;\r\n        else if(c[0] != '+') i = 0;\r\n        for(int j = i; j < c.length; j++) {\r\n            if(c[j] < '0' || c[j] > '9') break;\r\n            if(res > bndry || res == bndry && c[j] > '7') return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\r\n            res = res * 10 + (c[j] - '0');\r\n        }\r\n        return sign * res;\r\n    }\r\n}\r\n```\r\n\r\n若不使用 `trim() / strip()` 方法，而从头开始遍历字符串，则可以将空间复杂度降低至 $O(1)$ ，代码如下：\r\n\r\n```Python []\r\nclass Solution:\r\n    def strToInt(self, str: str) -> int:\r\n        res, i, sign, length = 0, 0, 1, len(str)\r\n        int_max, int_min, bndry = 2 ** 31 - 1, -2 ** 31, 2 ** 31 // 10\r\n        if not str: return 0         # 空字符串，提前返回\r\n        while str[i] == ' ':\r\n            i += 1\r\n            if i == length: return 0 # 字符串全为空格，提前返回\r\n        if str[i] == '-': sign = -1\r\n        if str[i] in '+-': i += 1\r\n        for c in str[i:]:\r\n            if not '0' <= c <= '9' : break\r\n            if res > bndry or res == bndry and c > '7':\r\n                return int_max if sign == 1 else int_min\r\n            res = 10 * res + ord(c) - ord('0')\r\n        return sign * res\r\n```\r\n\r\n```Java []\r\nclass Solution {\r\n    public int strToInt(String str) {\r\n        int res = 0, bndry = Integer.MAX_VALUE / 10;\r\n        int i = 0, sign = 1, length = str.length();\r\n        if(length == 0) return 0;\r\n        while(str.charAt(i) == ' ')\r\n            if(++i == length) return 0;\r\n        if(str.charAt(i) == '-') sign = -1;\r\n        if(str.charAt(i) == '-' || str.charAt(i) == '+') i++;\r\n        for(int j = i; j < length; j++) {\r\n            if(str.charAt(j) < '0' || str.charAt(j) > '9') break;\r\n            if(res > bndry || res == bndry && str.charAt(j) > '7')\r\n                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\r\n            res = res * 10 + (str.charAt(j) - '0');\r\n        }\r\n        return sign * res;\r\n    }\r\n}\r\n```",
      "createdAt": "2020-04-13T15:22:48.134977+00:00",
      "hitCount": 75002,
      "identifier": "iDrTvb",
      "isEditorsPick": true,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-zhi-offer-67-ba-zi-fu-chuan-zhuan-h-edkp",
        "title": "剑指 Offer 67. 把字符串转换成整数，主要是处理溢出"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 179,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 17,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-67-ba-zi-fu-chuan-zhuan-huan-cheng-z-4",
      "status": "PUBLISHED",
      "summary": "解题思路：\n根据题意，有以下四种字符需要考虑：\n\n首部空格： 删除之即可；\n符号位： 三种情况，即 ''+'' , ''-'' , ''无符号\"  ；新建一个变量保存符号位，返回前判断正负即可。\n非数字字符： 遇到首个非数字的字符时，应立即返回。\n数字字符：\n\n字符转数字： “此数字的 ASCII 码” 与 “ 0",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/0be9098b13047fe3e07f3c4e51c612244ace01a023ed010bce43940408334f2a-Picture1.png",
      "title": "面试题67. 把字符串转换成整数（数字越界处理，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 156,
        "id": 201301,
        "viewCount": 49535
      },
      "uuid": "iDrTvb",
      "videosInfo": []
    }
  }
}
