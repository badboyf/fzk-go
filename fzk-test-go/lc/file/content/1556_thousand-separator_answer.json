{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路与算法**\n\n我们需要把 $n$ 从低位向高位遍历，每三位加一个分隔符。\n\n我们可以借鉴数位分离的方法从低位向高位遍历，即对于十进制数 $n$，每次取出 $n$ 的最后一位，然后把 $n$ 整除 $10$，得到该数除去最后数字以外的部分。每次我们把取出的这个数字加入到一个字符串的末尾，用一个计数器记录当前已经分离出的数位的个数，如果它是 $3$ 的倍数并且当前的 $n$ 大于 $0$，就在字符串末尾加分隔符。最后我们把这个字符串反转就可以得到答案。\n\n例如数字 $123456789$，经过数位分离后得到的字符串为 $987.654.321$，反转后为 $123.456.789$。这里也可以看出为什么需要当前的 $n$ 大于 $0$ 才能在字符串末尾加分隔符，如果不判断这个条件，分离后的字符串就是 $987.654.321.$，反转后得到 $.123.456.789$，最前面的分隔符显然是多余的。\n\n**代码**\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    string thousandSeparator(int n) {\n        int count = 0;\n        string ans;\n        do {\n            int cur = n % 10;\n            n /= 10;\n            ans += to_string(cur);\n            ++count;\n            if (count % 3 == 0 && n) {\n                ans += '.';\n            }\n        } while (n);\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public String thousandSeparator(int n) {\n        int count = 0;\n        StringBuffer ans = new StringBuffer();\n        do {\n            int cur = n % 10;\n            n /= 10;\n            ans.append(cur);\n            ++count;\n            if (count % 3 == 0 && n != 0) {\n                ans.append('.');\n            }\n        } while (n != 0);\n        ans.reverse();\n        return ans.toString();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar thousandSeparator = function(n) {\n    let count = 0;\n    let ans = \"\";\n    do {\n        let cur = n % 10;\n        n = Math.floor(n / 10);\n        ans += cur.toString();\n        ++count;\n        if (count % 3 == 0 && n) {\n            ans += '.';\n        }\n    } while (n);\n    return ans.split('').reverse().join('');\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def thousandSeparator(self, n: int) -> str:\n        count = 0\n        ans = list()\n        while True:\n            cur = n % 10\n            n //= 10\n            ans.append(str(cur))\n            count += 1\n            if count % 3 == 0 and n > 0:\n                ans.append(\".\")\n            if n == 0:\n                break\n        return \"\".join(ans[::-1])\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(\\log n)$。\n+ 空间复杂度：$O(\\log n)$。",
      "createdAt": "2020-09-10T14:18:46.051314+00:00",
      "hitCount": 3969,
      "identifier": "nph4Me",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "stlzhi-jie-po-by-01_qustionsolver-iony",
        "title": "STL直接破"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "thousand-separator"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "qian-wei-fen-ge-shu-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 思路与算法 我们需要把 $n$ 从低位向高位遍历，每三位加一个分隔符。 我们可以借鉴数位分离的方法从低位向高位遍历，即对于十进制数 $n$，每次取出 $n$ 的最后一位，然后把 $n$ 整除 $10$，得到该数除去最后数字以外的部分。每次我们把取出的这个数字加入到一个字符串的末尾，用一个计数器记录当前已经",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "千位分隔数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 9,
        "id": 409077,
        "viewCount": 3197
      },
      "uuid": "nph4Me",
      "videosInfo": []
    }
  }
}
