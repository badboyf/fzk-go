{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：维护有序的不相交区间\n\n**分析**\n\n我们尝试维护一个数据结构，存储有序的不相交区间。这里存储的区间都是闭区间（与题目中的半开区间不同），并且不会相交。例如，我们不会存储 $[[1, 2], [2, 3]]$，而是存储 $[[1,3]]$。\n\n由于 Python 和 Java 支持的数据结构不相同，因此我们会对这两种语言分别给出一种算法。\n\n**算法（Python）**\n\n我们使用列表（list）`ranges` 来维护这个数据结构。\n\n* addRange(): 当我们要添加一个区间 $[\\mathrm{left}, \\mathrm{right}]$ 时，我们首先使用二分查找，找到 $i$ 和 $j$，满足 `ranges[i: j + 1]` 中的所有区间和 $[\\mathrm{left}, \\mathrm{right}]$ 都相交。这里也可以直接使用线性查找，因为接下来的操作的时间复杂度是线性的。随后，我们将 `ranges[i: j + 1]` 中的所有区间替换成一个新的区间 `[min(left, sranges[i][0]), max(right, ranges[j][1])]`。\n\n* removeRange()：当我们要删除一个区间 $[\\mathrm{left}, \\mathrm{right}]$ 时，我们同样先找到 $i$ 和 $j$，满足 `ranges[i: j + 1]` 中的所有区间和 $[\\mathrm{left}, \\mathrm{right}]$ 都相交。随后根据不同的情况，`ranges[i: j + 1]` 中的所有区间会被替换成 0，1，2 个新的区间。\n\n* queryRange()：当我们要查找一个区间 $[\\mathrm{left}, \\mathrm{right}]$ 时，我们只需要进行二分查找，判断是否有一个区间包含了 $[\\mathrm{left}, \\mathrm{right}]$ 即可。\n\n```Python []\nclass RangeModule(object):\n    def __init__(self):\n        self.ranges = []\n\n    def _bounds(self, left, right):\n        i, j = 0, len(self.ranges) - 1\n        for d in (100, 10, 1):\n            while i + d - 1 < len(self.ranges) and self.ranges[i+d-1][1] < left:\n                i += d\n            while j >= d - 1 and self.ranges[j-d+1][0] > right:\n                j -= d\n        return i, j\n\n    def addRange(self, left, right):\n        i, j = self._bounds(left, right)\n        if i <= j:\n            left = min(left, self.ranges[i][0])\n            right = max(right, self.ranges[j][1])\n        self.ranges[i:j+1] = [(left, right)]\n\n    def queryRange(self, left, right):\n        i = bisect.bisect_left(self.ranges, (left, float('inf')))\n        if i: i -= 1\n        return (bool(self.ranges) and\n                self.ranges[i][0] <= left and\n                right <= self.ranges[i][1])\n\n    def removeRange(self, left, right):\n        i, j = self._bounds(left, right)\n        merge = []\n        for k in xrange(i, j+1):\n            if self.ranges[k][0] < left:\n                merge.append((self.ranges[k][0], left))\n            if right < self.ranges[k][1]:\n                merge.append((right, self.ranges[k][1]))\n        self.ranges[i:j+1] = merge\n```\n\n**算法（Java）**\n\n我们使用基于平衡树的集合（TreeSet）`ranges` 来维护这个数据结构。`ranges` 内部的区间按照右端点从小到大排序。\n\n* addRange()，removeRange(): 和 Python 的实现方法相同，我们遍历 `ranges` 里的所有区间，找到其中所有与 $[\\mathrm{left}, \\mathrm{right}]$ 重合的区间。如果需要添加区间 $[\\mathrm{left}, \\mathrm{right}]$，就删除这些重合的区间，并将 $[\\mathrm{left}, \\mathrm{right}]$ 添加到 `ranges` 中。如果需要删除区间，就在删除这些重合的区间的同时记录下出现的新区间，并在删除操作结束后把这 0，1，2 个新区间添加到 `ranges` 中。\n\n* queryRange()：由于 `ranges` 是一颗平衡树，我们可以在对数时间复杂度内找出是否有一个区间包含 $[\\mathrm{left}, \\mathrm{right}]$。\n\n```Java []\nclass RangeModule {\n    TreeSet<Interval> ranges;\n    public RangeModule() {\n        ranges = new TreeSet();\n    }\n\n    public void addRange(int left, int right) {\n        Iterator<Interval> itr = ranges.tailSet(new Interval(0, left - 1)).iterator();\n        while (itr.hasNext()) {\n            Interval iv = itr.next();\n            if (right < iv.left) break;\n            left = Math.min(left, iv.left);\n            right = Math.max(right, iv.right);\n            itr.remove();\n        }\n        ranges.add(new Interval(left, right));\n    }\n\n    public boolean queryRange(int left, int right) {\n        Interval iv = ranges.higher(new Interval(0, left));\n        return (iv != null && iv.left <= left && right <= iv.right);\n    }\n\n    public void removeRange(int left, int right) {\n        Iterator<Interval> itr = ranges.tailSet(new Interval(0, left)).iterator();\n        ArrayList<Interval> todo = new ArrayList();\n        while (itr.hasNext()) {\n            Interval iv = itr.next();\n            if (right < iv.left) break;\n            if (iv.left < left) todo.add(new Interval(iv.left, left));\n            if (right < iv.right) todo.add(new Interval(right, iv.right));\n            itr.remove();\n        }\n        for (Interval iv: todo) ranges.add(iv);\n    }\n}\n\nclass Interval implements Comparable<Interval>{\n    int left;\n    int right;\n\n    public Interval(int left, int right){\n        this.left = left;\n        this.right = right;\n    }\n\n    public int compareTo(Interval that){\n        if (this.right == that.right) return this.left - that.left;\n        return this.right - that.right;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：设 $K$ 为 `ranges` 中的元素个数，那么 `addRange()` 和 `removeRange()` 的时间复杂度为 $O(K)$，`queryRange()` 的时间复杂度为 $O(\\log K)$。更具体地，如果有 $A$ 次 `addRange()` 操作，$R$ 次 `removeRange()` 操作和 $Q$ 次 `queryRange()` 操作，那么总的时间复杂度为 $O((A+R)^2+Q\\log(A+R))$。\n* 空间复杂度：$O(A+R)$。",
      "createdAt": "2019-06-30T15:28:26.287446+00:00",
      "hitCount": 4844,
      "identifier": "i0yHhQ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "cdong-tai-kai-dian-xian-duan-shu-wei-hu-d23kg",
        "title": "C++动态开点线段树，维护全0懒标记和全1懒标记"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "range-module"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 8,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "range-mo-kuai-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一：维护有序的不相交区间\n分析\n我们尝试维护一个数据结构，存储有序的不相交区间。这里存储的区间都是闭区间（与题目中的半开区间不同），并且不会相交。例如，我们不会存储 $[[1, 2], [2, 3]]$，而是存储 $[[1,3]]$。\n由于 Python 和 Java 支持的数据结构不相同，因此我们会对这两种语言分",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Design",
          "nameTranslated": "设计",
          "slug": "design",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search Tree",
          "nameTranslated": "二叉搜索树",
          "slug": "binary-search-tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "Range 模块",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 12,
        "id": 11606,
        "viewCount": 3584
      },
      "uuid": "i0yHhQ",
      "videosInfo": []
    }
  }
}
