{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n我们可以直接模拟整个过程。我们记录流入每个杯子的香槟的数量之和，例如对于一个杯子，流入的香槟数量为 `10`。由于这个数值大于 `1`，因此会有 `9` 数量的香槟流出这个杯子，并且会有 `4.5` 数量的香槟分别流入这个杯子下面的两个杯子中。以此类推。\n\n总的来说，如果流入一个杯子的香槟数量为 `X`，且 `X` 大于 `1`，那么就会有 `Q = (X - 1.0) / 2` 数量的香槟流入下面的两个杯子中。我们可以从第一层的杯子开始，计算出第二层每个杯子中流入的香槟数量，再计算出第三层的数量，直到计算到第 `query_row` 层。\n\n```Java [sol1]\nclass Solution {\n    public double champagneTower(int poured, int query_row, int query_glass) {\n        double[][] A = new double[102][102];\n        A[0][0] = (double) poured;\n        for (int r = 0; r <= query_row; ++r) {\n            for (int c = 0; c <= r; ++c) {\n                double q = (A[r][c] - 1.0) / 2.0;\n                if (q > 0) {\n                    A[r+1][c] += q;\n                    A[r+1][c+1] += q;\n                }\n            }\n        }\n\n        return Math.min(1, A[query_row][query_glass]);\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def champagneTower(self, poured, query_row, query_glass):\n        A = [[0] * k for k in xrange(1, 102)]\n        A[0][0] = poured\n        for r in xrange(query_row + 1):\n            for c in xrange(r+1):\n                q = (A[r][c] - 1.0) / 2.0\n                if q > 0:\n                    A[r+1][c] += q\n                    A[r+1][c+1] += q\n\n        return min(1, A[query_row][query_glass])\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(R^2)$，其中 $R$ 是杯子的层数。\n\n* 空间复杂度：$O(R^2)$。",
      "createdAt": "2019-10-29T06:18:05.242157+00:00",
      "hitCount": 6054,
      "identifier": "7CiomD",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "mo-ni-shui-liu-de-guo-cheng-by-bac0id-uko9",
        "title": "模拟水流的过程"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "champagne-tower"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "champagne-tower-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：模拟\n我们可以直接模拟整个过程。我们记录流入每个杯子的香槟的数量之和，例如对于一个杯子，流入的香槟数量为 10。由于这个数值大于 1，因此会有 9 数量的香槟流出这个杯子，并且会有 4.5 数量的香槟分别流入这个杯子下面的两个杯子中。以此类推。\n总的来说，如果流入一个杯子的香槟数量为 X，且 X 大于 1，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "Champagne Tower",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 7,
        "id": 38834,
        "viewCount": 4348
      },
      "uuid": "7CiomD",
      "videosInfo": []
    }
  }
}
