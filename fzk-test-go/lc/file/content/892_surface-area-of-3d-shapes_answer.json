{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：分步累加\n\n**思路**\n\n我们单独计算每一个 `v = grid[i][j]` 所贡献的表面积，再将所有的 `v` 值相加就能得到最终形体的表面积：\n\n- 对于顶面和底面的表面积，如果 `v > 0`，那么顶面和底面各贡献了 `1` 的表面积，总计 `2` 的表面积；\n\n- 对于四个侧面的表面积，只有在相邻位置的高度小于 `v` 时，对应的那个侧面才会贡献表面积，且贡献的数量为 `v - nv`，其中 `nv` 是相邻位置的高度。我们可以将其写成 `max(v - nv, 0)`。\n\n举一个例子，对于网格\n\n```\n1 5\n6 7\n```\n\n而言，位置 `grid[0][1]` 的高度为 `5`：\n\n- 因为 `5 > 0`，所以贡献了 `2` 的顶面和底面表面积；\n\n- 该位置的上方和右侧没有单元格，可以看成高度为 `0`，所以分别贡献了 `max(5 - 0, 0) = 5` 的表面积；\n\n- 该位置的左侧高度为 `1`，所以贡献了 `max(5 - 1, 0) = 4` 的表面积；\n\n- 该位置的下方高度为 `7`，所以贡献了 `max(5 - 7, 0) = 0` 的表面积。\n\n因此 `grid[0][1]` 贡献的表面积总和为 `2 + 5 + 5 + 4 + 0 = 16`。\n\n**算法**\n\n对于每个 `v = grid[r][c] > 0`，计算 `ans += 2`，对于 `grid[r][c]` 四个方向的每个相邻值 `nv` 还要加上 `max(v - nv, 0)`。\n\n```Java [sol1-Java]\nclass Solution {\n    public int surfaceArea(int[][] grid) {\n        int[] dr = new int[]{0, 1, 0, -1};\n        int[] dc = new int[]{1, 0, -1, 0};\n\n        int N = grid.length;\n        int ans = 0;\n\n        for (int r = 0; r < N; ++r) {\n            for (int c = 0; c < N; ++c) {\n                if (grid[r][c] > 0) {\n                    ans += 2;\n                    for (int k = 0; k < 4; ++k) {\n                        int nr = r + dr[k];\n                        int nc = c + dc[k];\n                        int nv = 0;\n                        if (0 <= nr && nr < N && 0 <= nc && nc < N) {\n                            nv = grid[nr][nc];\n                        }\n\n                        ans += Math.max(grid[r][c] - nv, 0);\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n```\n```Python [sol1-Python3]\nclass Solution:\n    def surfaceArea(self, grid: List[List[int]]) -> int:\n        N = len(grid)\n\n        ans = 0\n        for r in range(N):\n            for c in range(N):\n                if grid[r][c]:\n                    ans += 2\n                    for nr, nc in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):\n                        if 0 <= nr < N and 0 <= nc < N:\n                            nval = grid[nr][nc]\n                        else:\n                            nval = 0\n\n                        ans += max(grid[r][c] - nval, 0)\n\n        return ans\n```\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int surfaceArea(vector<vector<int>>& grid) {\n        int dr[]{0, 1, 0, -1};\n        int dc[]{1, 0, -1, 0};\n\n        int N = grid.size();\n        int ans = 0;\n\n        for (int r = 0; r < N; ++r) {\n            for (int c = 0; c < N; ++c) {\n                if (grid[r][c] > 0) {\n                    ans += 2;\n                    for (int k = 0; k < 4; ++k) {\n                        int nr = r + dr[k];\n                        int nc = c + dc[k];\n                        int nv = 0;\n                        if (0 <= nr && nr < N && 0 <= nc && nc < N) {\n                            nv = grid[nr][nc];\n                        }\n\n                        ans += max(grid[r][c] - nv, 0);\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n```\n```JavaScript [sol1-JavaScript]\nvar surfaceArea = function(grid) {\n    const dr = [0, 1, 0, -1];\n    const dc = [1, 0, -1, 0];\n\n    const N = grid.length;\n    let ans = 0;\n\n    for (let r = 0; r < N; ++r) {\n        for (let c = 0; c < N; ++c) {\n            if (grid[r][c] > 0) {\n                ans += 2;\n                for (let k = 0; k < 4; ++k) {\n                    const nr = r + dr[k];\n                    const nc = c + dc[k];\n                    let nv = 0;\n                    if (0 <= nr && nr < N && 0 <= nc && nc < N) {\n                        nv = grid[nr][nc];\n                    }\n\n                    ans += Math.max(grid[r][c] - nv, 0);\n                }\n            }\n        }\n    }\n    \n    return ans;\n};\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N^2)$，其中 $N$ 是 `grid` 中的行和列的数目。\n\n* 空间复杂度：$O(1)$。",
      "createdAt": "2020-03-24T13:03:12.468017+00:00",
      "hitCount": 23339,
      "identifier": "hfTUwN",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shi-li-you-tu-you-zhen-xiang-jiang-jie-yi-kan-jiu-",
        "title": "3ms, 有图有真相, 一看就明白, Java"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "surface-area-of-3d-shapes"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 22,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "san-wei-xing-ti-de-biao-mian-ji-by-leetcode-soluti",
      "status": "PUBLISHED",
      "summary": "方法一：分步累加 思路 我们单独计算每一个 v = grid[i][j] 所贡献的表面积，再将所有的 v 值相加就能得到最终形体的表面积： 对于顶面和底面的表面积，如果 v > 0，那么顶面和底面各贡献了 1 的表面积，总计 2 的表面积； 对于四个侧面的表面积，只有在相邻位置的高度小于 v 时，对应的那个侧面才会贡献",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Geometry",
          "nameTranslated": "几何",
          "slug": "geometry",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "三维形体的表面积",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 76,
        "id": 168669,
        "viewCount": 17363
      },
      "uuid": "hfTUwN",
      "videosInfo": []
    }
  }
}
