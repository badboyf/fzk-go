{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n我们可以直接根据题目中描述的规则来计算出 $\\textit{nums}$ 数组，并返回其最大元素。\n\n为了简化代码逻辑，我们可以化简题目中的递推式。当 $i\\ge 2$ 时：\n\n- 若 $i$ 为偶数，有 $\\textit{nums}[i] = \\textit{nums}[\\dfrac{i}{2}]$；\n- 若 $i$ 为奇数，有 $\\textit{nums}[i] = \\textit{nums}[\\Big\\lfloor\\dfrac{i}{2}\\Big\\rfloor] + \\textit{nums}[\\Big\\lfloor\\dfrac{i}{2}\\Big\\rfloor+1]$。\n\n这两种情况可以合并为：\n\n$$\n\\textit{nums}[i] = \\textit{nums}[\\Big\\lfloor\\dfrac{i}{2}\\Big\\rfloor] + (i\\bmod 2) \\cdot \\textit{nums}[\\Big\\lfloor\\dfrac{i}{2}\\Big\\rfloor+1]\n$$\n\n```Python [sol1-Python3]\nclass Solution:\n    def getMaximumGenerated(self, n: int) -> int:\n        if n == 0:\n            return 0\n        nums = [0] * (n + 1)\n        nums[1] = 1\n        for i in range(2, n + 1):\n            nums[i] = nums[i // 2] + i % 2 * nums[i // 2 + 1]\n        return max(nums)\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getMaximumGenerated(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        vector<int> nums(n + 1);\n        nums[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            nums[i] = nums[i / 2] + i % 2 * nums[i / 2 + 1];\n        }\n        return *max_element(nums.begin(), nums.end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int getMaximumGenerated(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        int[] nums = new int[n + 1];\n        nums[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            nums[i] = nums[i / 2] + i % 2 * nums[i / 2 + 1];\n        }\n        return Arrays.stream(nums).max().getAsInt();\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int GetMaximumGenerated(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        int[] nums = new int[n + 1];\n        nums[1] = 1;\n        for (int i = 2; i <= n; ++i) {\n            nums[i] = nums[i / 2] + i % 2 * nums[i / 2 + 1];\n        }\n        return nums.Max();\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc getMaximumGenerated(n int) (ans int) {\n    if n == 0 {\n        return\n    }\n    nums := make([]int, n+1)\n    nums[1] = 1\n    for i := 2; i <= n; i++ {\n        nums[i] = nums[i/2] + i%2*nums[i/2+1]\n    }\n    for _, v := range nums {\n        ans = max(ans, v)\n    }\n    return\n}\n\nfunc max(a, b int) int {\n    if a > b {\n        return a\n    }\n    return b\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar getMaximumGenerated = function(n) {\n    if (n === 0) {\n        return 0;\n    }\n    const nums = new Array(n + 1).fill(0);\n    nums[1] = 1;\n    for (let i = 2; i <= n; ++i) {\n        nums[i] = nums[Math.floor(i / 2)] + i % 2 * nums[Math.floor(i / 2) + 1];\n    }\n    return Math.max(...nums);\n};\n```\n\n```C [sol1-C]\nint getMaximumGenerated(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    int nums[n + 1];\n    nums[1] = 1;\n    int ret = 1;\n    for (int i = 2; i <= n; ++i) {\n        nums[i] = nums[i / 2] + i % 2 * nums[i / 2 + 1];\n        ret = fmax(ret, nums[i]);\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$。\n\n- 空间复杂度：$O(n)$。",
      "createdAt": "2021-08-22T15:45:40.151531+00:00",
      "hitCount": 17594,
      "identifier": "sMYMjA",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1646huo-qu-sheng-cheng-shu-zu-zhong-de-z-605o",
        "title": "1646.获取生成数组中的最大值（dp双百）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "get-maximum-in-generated-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "huo-qu-sheng-cheng-shu-zu-zhong-de-zui-d-0z2l",
      "status": "PREPUBLISH",
      "summary": "方法一：模拟 我们可以直接根据题目中描述的规则来计算出 $\\textit{nums}$ 数组，并返回其最大元素。 为了简化代码逻辑，我们可以化简题目中的递推式。当 $i\\ge 2$ 时： 若 $i$ 为偶数，有 $\\textit{nums}[i] = \\textit{nums}[\\dfrac{i}{2}]$； 若 $i",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Simulation",
          "nameTranslated": "模拟",
          "slug": "simulation",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "获取生成数组中的最大值",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 76,
        "id": 952714,
        "viewCount": 14323
      },
      "uuid": "sMYMjA",
      "videosInfo": []
    }
  }
}
