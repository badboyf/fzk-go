{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\r\n\r\n- 设将长度为 $n$ 的绳子切为 $a$ 段：\r\n\r\n$$\r\nn = n_1 + n_2 + ... + n_a\r\n$$\r\n\r\n- 本题等价于求解：\r\n\r\n$$\r\n\\max(n_1 \\times n_2 \\times ... \\times n_a)\r\n$$\r\n\r\n> 以下数学推导总体分为两步：① 当所有绳段长度相等时，乘积最大。② 最优的绳段长度为 $3$ 。\r\n\r\n##### 数学推导：\r\n\r\n- 以下公式为“算术几何均值不等式” ，等号当且仅当 $n_1 = n_2 = ... = n_a$ 时成立。\r\n\r\n$$\r\n\\frac{n_1 + n_2 + ... + n_a}{a} \\geq \\sqrt[a]{n_1 n_2 ... n_a}\r\n$$\r\n\r\n> **推论一：** 将绳子 **以相等的长度等分为多段** ，得到的乘积最大。\r\n\r\n- 设将绳子按照 $x$ 长度等分为 $a$ 段，即 $n = ax$ ，则乘积为 $x^a$ 。观察以下公式，由于 $n$ 为常数，因此当 $x^{\\frac{1}{x}}$ 取最大值时， 乘积达到最大值。\r\n\r\n$$\r\nx^a = x^{\\frac{n}{x}} = (x^{\\frac{1}{x}})^n\r\n$$\r\n\r\n- 根据分析，可将问题转化为求 $y = x^{\\frac{1}{x}}$ 的极大值，因此对 $x$ 求导数。\r\n\r\n$$\r\n\\begin{aligned}\r\n \\ln y & = \\frac{1}{x} \\ln x & \\text{取对数} \\\\\r\n \\frac{1}{y} \\dot {y} & = \\frac{1}{x^2} - \\frac{1}{x^2} \\ln x & \\text{对 $x$ 求导} \\\\\r\n & = \\frac{1 - \\ln x}{x^2} \\\\\r\n \\dot {y} & = \\frac{1 - \\ln x}{x^2} x^{\\frac{1}{x}} & \\text{整理得}\r\n\\end{aligned}\r\n$$\r\n\r\n- 令 $\\dot {y} = 0$ ，则 $1 - \\ln x = 0$ ，易得驻点为 $x_0 = e \\approx 2.7$ ；根据以下公式，可知 $x_0$ 为极大值点。\r\n\r\n$$\r\n\\dot {y}\r\n\\begin{cases}\r\n > 0 & , x \\in [- \\infty, e) \\\\\r\n < 0 & , x \\in (e, \\infty] \\\\\r\n\\end{cases}\r\n$$\r\n\r\n- 由于切分长度 $x$ 必须为整数，最接近 $e$ 的整数为 $2$ 或 $3$ 。如下式所示，代入 $x = 2$ 和 $x = 3$ ，得出 $x = 3$ 时，乘积达到最大。\r\n\r\n$$\r\ny(3) = 3^{1/3} \\approx 1.44 \\\\\r\ny(2) = 2^{1/2} \\approx 1.41\r\n$$\r\n\r\n- 口算对比方法：给两数字同时取 $6$ 次方，再对比。\r\n\r\n$$\r\n[y(3)]^6 = (3^{1/3})^6 = 9 \\\\\r\n[y(2)]^6 = (2^{1/2})^6 = 8\r\n$$\r\n\r\n> **推论二：** 尽可能将绳子以长度 $3$ 等分为多段时，乘积最大。\r\n\r\n##### 切分规则：\r\n\r\n1. **最优：** $3$ 。把绳子尽可能切为多个长度为 $3$ 的片段，留下的最后一段绳子的长度可能为 $0,1,2$ 三种情况。\r\n2. **次优：** $2$ 。若最后一段绳子长度为 $2$ ；则保留，不再拆为 $1+1$ 。\r\n3. **最差：** $1$ 。若最后一段绳子长度为 $1$ ；则应把一份 $3 + 1$ 替换为 $2 + 2$，因为 $2 \\times 2 > 3 \\times 1$。\r\n\r\n##### 算法流程：\r\n\r\n1. 当 $n \\leq 3$ 时，按照规则应不切分，但由于题目要求必须剪成 $m>1$ 段，因此必须剪出一段长度为 $1$ 的绳子，即返回 $n - 1$ 。\r\n2. 当 $n>3$ 时，求 $n$ 除以 $3$ 的 整数部分 $a$ 和 余数部分 $b$ （即 $n = 3a + b$ ），并分为以下三种情况：\r\n    - 当 $b = 0$ 时，直接返回 $3^a$；\r\n    - 当 $b = 1$ 时，要将一个 $1 + 3$ 转换为 $2+2$，因此返回 $3^{a-1} \\times 4$；\r\n    - 当 $b = 2$ 时，返回 $3^a \\times 2$。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/7ed7d54e40bdf83733923fb1667872ae2fa949d46c2cf49942e37b1925765ea3-Picture1.png){:width=600}\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(1)$ ：** 仅有求整、求余、次方运算。\r\n  - [求整和求余运算](https://stackoverflow.com/questions/35189851/time-complexity-of-modulo-operator-in-python)：资料提到不超过机器数的整数可以看作是 $O(1)$ ；\r\n  - [幂运算](https://stackoverflow.com/questions/32418731/java-math-powa-b-time-complexity)：查阅资料，提到浮点取幂为 $O(1)$ 。\r\n- **空间复杂度 $O(1)$ ：** 变量 `a` 和 `b` 使用常数大小额外空间。\r\n\r\n#### 代码：\r\n\r\n> Python 中常见有三种幂计算函数： **`*`** 和 **`pow()`** 的时间复杂度均为 $O(\\log a)$ ；而 **`math.pow()`** 始终调用 C 库的 `pow()` 函数，其执行浮点取幂，时间复杂度为 $O(1)$ 。\r\n\r\n```python []\r\nclass Solution:\r\n    def cuttingRope(self, n: int) -> int:\r\n        if n <= 3: return n - 1\r\n        a, b = n // 3, n % 3\r\n        if b == 0: return int(math.pow(3, a))\r\n        if b == 1: return int(math.pow(3, a - 1) * 4)\r\n        return int(math.pow(3, a) * 2)\r\n```\r\n\r\n```java []\r\nclass Solution {\r\n    public int cuttingRope(int n) {\r\n        if(n <= 3) return n - 1;\r\n        int a = n / 3, b = n % 3;\r\n        if(b == 0) return (int)Math.pow(3, a);\r\n        if(b == 1) return (int)Math.pow(3, a - 1) * 4;\r\n        return (int)Math.pow(3, a) * 2;\r\n    }\r\n}\r\n```\r\n\r\n> 数学推导需要一定的知识基础。下面分享一种基于贪心思想的思路，个人认为适合于时间有限情况下的快速解题。\r\n\r\n##### 贪心思路：\r\n\r\n> 设一绳子长度为 $n$ ( $n>1$ )，则其必可被切分为两段 $n=n_1+n_2$ 。\r\n> 根据经验推测，切分的两数字乘积往往原数字更大，即往往有 $n_1 \\times n_2 > n_1 + n_2 = n$ 。\r\n>\r\n> - **例如绳子长度为 $6$ ：**  $6 = 3 + 3 < 3 \\times 3 = 9$ ；\r\n> - **也有少数反例，例如 $2$ ：** $2 = 1 + 1 > 1 \\times 1 = 1$ 。\r\n\r\n- **推论一：** 合理的切分方案可以带来更大的乘积。\r\n\r\n> 设一绳子长度为 $n$ ( $n>1$ )，**切分为两段** $n=n_1+n_2$ ，**切分为三段** $n=n_1+n_2+n_3$ 。\r\n> 根据经验推测，**三段** 的乘积往往更大，即往往有 $n_1 n_2 n_3 > n_1 n_2$ 。\r\n>\r\n> - **例如绳子长度为 $9$ ：** 两段 $9=4+5$ 和 三段 $9=3+3+3$，则有 $4 \\times 5 < 3 \\times 3 \\times 3$ 。\r\n> - **也有少数反例，例如 $6$ ：** 两段 $6=3+3$ 和 三段 $6=2+2+2$，则有 $3 \\times 3 > 2 \\times 2 \\times 2$ 。\r\n\r\n- **推论二：** 若切分方案合理，绳子段切分的越多，乘积越大。\r\n\r\n> 总体上看，貌似长绳子切分为越多段乘积越大，但其实到某个长度分界点后，乘积到达最大值，就不应再切分了。\r\n> **问题转化：** 是否有**优先级最高的长度** $x$ 存在？若有，则应该尽可能把绳子以 $x$ 长度切为多段，以获取最大乘积。\r\n\r\n- **推论三：** 为使乘积最大，只有长度为 $2$ 和 $3$ 的绳子不应再切分，且 $3$ 比 $2$ 更优 *（详情见下表）* 。\r\n\r\n| 绳子切分方案  | 乘积                                       |      结论                                        |\r\n| ------------- | ------------------------------------------ | ----------------------------------------------- |\r\n| $2 = 1 + 1$   | $1 \\times 1 = 1$                           | $2$ 不应切分                                     |\r\n| $3=1+2$       | $1 \\times 2 = 2$                           | $3$ 不应切分                                     |\r\n| $4=2+2=1+3$   | $2 \\times 2 = 4 > 1 \\times 3 = 3$          | $4$ 和 $2$ 等价，且 $2+2$ 比 $1+3$ 更优           |\r\n| $5=2+3=1+4$   | $2 \\times 3 = 6 > 1 \\times 4 = 4$          | $5$ 应切分为 $2+3$                               |\r\n| $6=3+3=2+2+2$ | $3 \\times 3 = 9 > 2 \\times 2 \\times 2 = 8$ | $6$ 应切分为 $3+3$ ，进而**推出 $3$ 比 $2$ 更优** |\r\n| $>7$          | ...                                        | **长绳**（长度>7）可转化为多个**短绳**（长度1~6），因此肯定应切分 |",
      "createdAt": "2020-02-21T14:28:33.974048+00:00",
      "hitCount": 173548,
      "identifier": "0WlUN8",
      "isEditorsPick": true,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-zhi-offer-14-i-jian-sheng-zi-dong-t-06aw",
        "title": "【剑指 Offer 14- I. 剪绳子】动态规划，自下而上"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "jian-sheng-zi-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 693,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 63,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 18,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-14-i-jian-sheng-zi-tan-xin-si-xiang-by",
      "status": "PUBLISHED",
      "summary": " 解题思路：\n\n设将长度为 n 的绳子切为 a 段：\n\nn = n_1 + n_2 + ... + n_a\n\n\n本题等价于求解：\n\n\\max(n_1 \\times n_2 \\times ... \\times n_a)\n\n\n以下数学推导总体分为两步：① 当所有绳段长度相等时，乘积最大。② 最优的绳段长度为 3 。\n\n 数",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/7ed7d54e40bdf83733923fb1667872ae2fa949d46c2cf49942e37b1925765ea3-Picture1.png",
      "title": "面试题14- I. 剪绳子（数学推导 / 贪心思想，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 331,
        "id": 104809,
        "viewCount": 121304
      },
      "uuid": "0WlUN8",
      "videosInfo": []
    }
  }
}
