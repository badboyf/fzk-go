{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：双指针\n\n**思路和算法**\n\n为了实现原地压缩，我们可以使用双指针分别标志我们在字符串中读和写的位置。每次当读指针 $\\textit{read}$ 移动到某一段连续相同子串的最右侧，我们就在写指针 $\\textit{write}$ 处依次写入该子串对应的字符和子串长度即可。\n\n在实际代码中，当读指针 $\\textit{read}$ 位于字符串的末尾，或读指针 $\\textit{read}$ 指向的字符不同于下一个字符时，我们就认为读指针 $\\textit{read}$ 位于某一段连续相同子串的最右侧。该子串对应的字符即为读指针 $\\textit{read}$ 指向的字符串。我们使用变量 $\\textit{left}$ 记录该子串的最左侧的位置，这样子串长度即为 $\\textit{read} - \\textit{left} + 1$。\n\n特别地，为了达到 $O(1)$ 空间复杂度，我们需要自行实现将数字转化为字符串写入到原字符串的功能。这里我们采用短除法将子串长度倒序写入原字符串中，然后再将其反转即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int compress(vector<char>& chars) {\n        int n = chars.size();\n        int write = 0, left = 0;\n        for (int read = 0; read < n; read++) {\n            if (read == n - 1 || chars[read] != chars[read + 1]) {\n                chars[write++] = chars[read];\n                int num = read - left + 1;\n                if (num > 1) {\n                    int anchor = write;\n                    while (num > 0) {\n                        chars[write++] = num % 10 + '0';\n                        num /= 10;\n                    }\n                    reverse(&chars[anchor], &chars[write]);\n                }\n                left = read + 1;\n            }\n        }\n        return write;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int compress(char[] chars) {\n        int n = chars.length;\n        int write = 0, left = 0;\n        for (int read = 0; read < n; read++) {\n            if (read == n - 1 || chars[read] != chars[read + 1]) {\n                chars[write++] = chars[read];\n                int num = read - left + 1;\n                if (num > 1) {\n                    int anchor = write;\n                    while (num > 0) {\n                        chars[write++] = (char) (num % 10 + '0');\n                        num /= 10;\n                    }\n                    reverse(chars, anchor, write - 1);\n                }\n                left = read + 1;\n            }\n        }\n        return write;\n    }\n\n    public void reverse(char[] chars, int left, int right) {\n        while (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int Compress(char[] chars) {\n        int n = chars.Length;\n        int write = 0, left = 0;\n        for (int read = 0; read < n; read++) {\n            if (read == n - 1 || chars[read] != chars[read + 1]) {\n                chars[write++] = chars[read];\n                int num = read - left + 1;\n                if (num > 1) {\n                    int anchor = write;\n                    while (num > 0) {\n                        chars[write++] = (char) (num % 10 + '0');\n                        num /= 10;\n                    }\n                    Reverse(chars, anchor, write - 1);\n                }\n                left = read + 1;\n            }\n        }\n        return write;\n    }\n\n    public void Reverse(char[] chars, int left, int right) {\n        while (left < right) {\n            char temp = chars[left];\n            chars[left] = chars[right];\n            chars[right] = temp;\n            left++;\n            right--;\n        }\n    }\n}\n```\n\n```C [sol1-C]\nvoid swap(char *a, char *b) {\n    char t = *a;\n    *a = *b, *b = t;\n}\n\nvoid reverse(char *a, char *b) {\n    while (a < b) {\n        swap(a++, --b);\n    }\n}\n\nint compress(char *chars, int charsSize) {\n    int write = 0, left = 0;\n    for (int read = 0; read < charsSize; read++) {\n        if (read == charsSize - 1 || chars[read] != chars[read + 1]) {\n            chars[write++] = chars[read];\n            int num = read - left + 1;\n            if (num > 1) {\n                int anchor = write;\n                while (num > 0) {\n                    chars[write++] = num % 10 + '0';\n                    num /= 10;\n                }\n                reverse(&chars[anchor], &chars[write]);\n            }\n            left = read + 1;\n        }\n    }\n    return write;\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        def reverse(left: int, right: int) -> None:\n            while left < right:\n                chars[left], chars[right] = chars[right], chars[left]\n                left += 1\n                right -= 1\n\n        n = len(chars)\n        write = left = 0\n        for read in range(n):\n            if read == n - 1 or chars[read] != chars[read + 1]:\n                chars[write] = chars[read]\n                write += 1\n                num = read - left + 1\n                if num > 1:\n                    anchor = write\n                    while num > 0:\n                        chars[write] = str(num % 10)\n                        write += 1\n                        num //= 10\n                    reverse(anchor, write - 1)\n                left = read + 1\n        return write\n```\n\n```go [sol1-Golang]\nfunc compress(chars []byte) int {\n    write, left := 0, 0\n    for read, ch := range chars {\n        if read == len(chars)-1 || ch != chars[read+1] {\n            chars[write] = ch\n            write++\n            num := read - left + 1\n            if num > 1 {\n                anchor := write\n                for ; num > 0; num /= 10 {\n                    chars[write] = '0' + byte(num%10)\n                    write++\n                }\n                s := chars[anchor:write]\n                for i, n := 0, len(s); i < n/2; i++ {\n                    s[i], s[n-1-i] = s[n-1-i], s[i]\n                }\n            }\n            left = read + 1\n        }\n    }\n    return write\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar compress = function(chars) {\n    const n = chars.length;\n    let write = 0, left = 0;\n    for (let read = 0; read < n; read++) {\n        if (read === n - 1 || chars[read] !== chars[read + 1]) {\n            chars[write++] = chars[read];\n            let num = read - left + 1;\n            if (num > 1) {\n                const anchor = write;\n                while (num > 0) {\n                    chars[write++] = '' + num % 10;\n                    num = Math.floor(num / 10);\n                }\n                reverse(chars, anchor, write - 1);\n            }\n            left = read + 1;\n        }\n    }\n    return write;\n};\n\nconst reverse = (chars, left, right) => {\n    while (left < right) {\n        const temp = chars[left];\n        chars[left] = chars[right];\n        chars[right] = temp;\n        left++;\n        right--;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为字符串长度，我们只需要遍历该字符串一次。\n\n- 空间复杂度：$O(1)$。我们只需要常数的空间保存若干变量。",
      "createdAt": "2021-08-20T15:52:10.851381+00:00",
      "hitCount": 22800,
      "identifier": "OnLAYz",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "443-ya-suo-zi-fu-chuan-by-wtz666-4-ec9d",
        "title": "443. 压缩字符串"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "string-compression"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 18,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "ya-suo-zi-fu-chuan-by-leetcode-solution-kbuc",
      "status": "PREPUBLISH",
      "summary": "方法一：双指针 思路和算法 为了实现原地压缩，我们可以使用双指针分别标志我们在字符串中读和写的位置。每次当读指针 $\\textit{read}$ 移动到某一段连续相同子串的最右侧，我们就在写指针 $\\textit{write}$ 处依次写入该子串对应的字符和子串长度即可。 在实际代码中，当读指针 $\\textit{re",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "压缩字符串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 91,
        "id": 948556,
        "viewCount": 15158
      },
      "uuid": "OnLAYz",
      "videosInfo": []
    }
  }
}
