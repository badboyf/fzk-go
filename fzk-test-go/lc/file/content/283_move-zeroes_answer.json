{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：双指针\n\n**思路及解法** \n\n使用双指针，左指针指向当前已经处理好的序列的尾部，右指针指向待处理序列的头部。\n\n右指针不断向右移动，每次右指针指向非零数，则将左右指针对应的数交换，同时左指针右移。\n\n注意到以下性质：\n\n1. 左指针左边均为非零数；\n\n2. 右指针左边直到左指针处均为零。\n\n因此每次交换，都是将左指针的零与右指针的非零数交换，且非零数的相对顺序并未改变。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int n = nums.size(), left = 0, right = 0;\n        while (right < n) {\n            if (nums[right]) {\n                swap(nums[left], nums[right]);\n                left++;\n            }\n            right++;\n        }\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int n = nums.length, left = 0, right = 0;\n        while (right < n) {\n            if (nums[right] != 0) {\n                swap(nums, left, right);\n                left++;\n            }\n            right++;\n        }\n    }\n\n    public void swap(int[] nums, int left, int right) {\n        int temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        n = len(nums)\n        left = right = 0\n        while right < n:\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n```\n\n```Golang [sol1-Golang]\nfunc moveZeroes(nums []int) {\n    left, right, n := 0, 0, len(nums)\n    for right < n {\n        if nums[right] != 0 {\n            nums[left], nums[right] = nums[right], nums[left]\n            left++\n        }\n        right++\n    }\n}\n```\n\n```C [sol1-C]\nvoid swap(int *a, int *b) {\n    int t = *a;\n    *a = *b, *b = t;\n}\n\nvoid moveZeroes(int *nums, int numsSize) {\n    int left = 0, right = 0;\n    while (right < numsSize) {\n        if (nums[right]) {\n            swap(nums + left, nums + right);\n            left++;\n        }\n        right++;\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为序列长度。每个位置至多被遍历两次。\n\n- 空间复杂度：$O(1)$。只需要常数的空间存放若干变量。",
      "createdAt": "2020-11-18T15:45:12.102498+00:00",
      "hitCount": 145413,
      "identifier": "6FtDRE",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dong-hua-yan-shi-283yi-dong-ling-by-wang_ni_ma",
        "title": "动画演示 283.移动零"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "move-zeroes"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 109,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "yi-dong-ling-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "方法一：双指针 思路及解法  使用双指针，左指针指向当前已经处理好的序列的尾部，右指针指向待处理序列的头部。 右指针不断向右移动，每次右指针指向非零数，则将左右指针对应的数交换，同时左指针右移。 注意到以下性质： 左指针左边均为非零数； 右指针左边直到左指针处均为零。 因此每次交换，都是将左指针的零与右指针的非零数交换",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "移动零",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 274,
        "id": 489622,
        "viewCount": 102435
      },
      "uuid": "6FtDRE",
      "videosInfo": []
    }
  }
}
