{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：二分查找\n\n**思路及算法**\n\n因为题目要求尽量减少调用检查接口的次数，所以不能对每个版本都调用检查接口，而是应该将调用检查接口的次数降到最低。\n\n注意到一个性质：当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。\n\n具体地，将左右边界分别初始化为 $1$ 和 $n$，其中 $n$ 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。\n\n这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 $O(\\log n)$ 次。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int firstBadVersion(int n) {\n        int left = 1, right = n;\n        while (left < right) { // 循环直至区间左右端点相同\n            int mid = left + (right - left) / 2; // 防止计算时溢出\n            if (isBadVersion(mid)) {\n                right = mid; // 答案在区间 [left, mid] 中\n            } else {\n                left = mid + 1; // 答案在区间 [mid+1, right] 中\n            }\n        }\n        // 此时有 left == right，区间缩为一个点，即为答案\n        return left;\n    }\n};\n```\n\n```Java [sol1-Java]\npublic class Solution extends VersionControl {\n    public int firstBadVersion(int n) {\n        int left = 1, right = n;\n        while (left < right) { // 循环直至区间左右端点相同\n            int mid = left + (right - left) / 2; // 防止计算时溢出\n            if (isBadVersion(mid)) {\n                right = mid; // 答案在区间 [left, mid] 中\n            } else {\n                left = mid + 1; // 答案在区间 [mid+1, right] 中\n            }\n        }\n        // 此时有 left == right，区间缩为一个点，即为答案\n        return left;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution : VersionControl {\n    public int FirstBadVersion(int n) {\n        int left = 1, right = n;\n        while (left < right) { // 循环直至区间左右端点相同\n            int mid = left + (right - left) / 2; // 防止计算时溢出\n            if (IsBadVersion(mid)) {\n                right = mid; // 答案在区间 [left, mid] 中\n            } else {\n                left = mid + 1; // 答案在区间 [mid+1, right] 中\n            }\n        }\n        // 此时有 left == right，区间缩为一个点，即为答案\n        return left;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc firstBadVersion(n int) int {\n    return sort.Search(n, func(version int) bool { return isBadVersion(version) })\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar solution = function(isBadVersion) {\n    return function(n) {\n        let left = 1, right = n;\n        while (left < right) { // 循环直至区间左右端点相同\n            const mid = Math.floor(left + (right - left) / 2); // 防止计算时溢出\n            if (isBadVersion(mid)) {\n                right = mid; // 答案在区间 [left, mid] 中\n            } else {\n                left = mid + 1; // 答案在区间 [mid+1, right] 中\n            }\n        }\n        // 此时有 left == right，区间缩为一个点，即为答案\n        return left;\n    };\n};\n```\n\n```C [sol1-C]\nint firstBadVersion(int n) {\n    int left = 1, right = n;\n    while (left < right) {  // 循环直至区间左右端点相同\n        int mid = left + (right - left) / 2;  // 防止计算时溢出\n        if (isBadVersion(mid)) {\n            right = mid;  // 答案在区间 [left, mid] 中\n        } else {\n            left = mid + 1;  // 答案在区间 [mid+1, right] 中\n        }\n    }\n    // 此时有 left == right，区间缩为一个点，即为答案\n    return left;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，其中 $n$ 是给定版本的数量。\n\n- 空间复杂度：$O(1)$。我们只需要常数的空间保存若干变量。",
      "createdAt": "2021-06-12T00:46:46.513194+00:00",
      "hitCount": 81516,
      "identifier": "gHE0en",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "li-yong-er-fen-cha-zhao-fa-by-onaug6th-pdtc",
        "title": "利用二分查找法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "first-bad-version"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 40,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "di-yi-ge-cuo-wu-de-ban-ben-by-leetcode-s-pf8h",
      "status": "PUBLISHED",
      "summary": "方法一：二分查找 思路及算法 因为题目要求尽量减少调用检查接口的次数，所以不能对每个版本都调用检查接口，而是应该将调用检查接口的次数降到最低。 注意到一个性质：当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。 具体地，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "第一个错误的版本",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 160,
        "id": 824522,
        "viewCount": 55970
      },
      "uuid": "gHE0en",
      "videosInfo": []
    }
  }
}
