{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 方法一：字符数组\n由于每次替换从 1 个字符变成 3 个字符，使用字符数组可方便地进行替换。建立字符数组地长度为 `s` 的长度的 3 倍，这样可保证字符数组可以容纳所有替换后的字符。\n\n\n* 获得 `s` 的长度 `length`\n* 创建字符数组 `array`，其长度为 `length * 3`\n* 初始化 `size` 为 `0`，`size` 表示替换后的字符串的长度\n* 从左到右遍历字符串 `s`\n  * 获得 `s` 的当前字符 `c`\n  * 如果字符 `c` 是空格，则令 `array[size] = '%'`，`array[size + 1] = '2'`，`array[size + 2] = '0'`，并将 `size` 的值加 3\n  * 如果字符 `c` 不是空格，则令 `array[size] = c`，并将 `size` 的值加 1\n* 遍历结束之后，`size` 的值等于替换后的字符串的长度，从 `array` 的前 `size` 个字符创建新字符串，并返回新字符串\n\n```Java []\nclass Solution {\n    public String replaceSpace(String s) {\n        int length = s.length();\n        char[] array = new char[length * 3];\n        int size = 0;\n        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n            if (c == ' ') {\n                array[size++] = '%';\n                array[size++] = '2';\n                array[size++] = '0';\n            } else {\n                array[size++] = c;\n            }\n        }\n        String newStr = new String(array, 0, size);\n        return newStr;\n    }\n}\n```\n\n**复杂性分析**\n\n* 时间复杂度：$O(n)$。遍历字符串 `s` 一遍。\n* 空间复杂度：$O(n)$。额外创建字符数组，长度为 `s` 的长度的 3 倍。",
      "createdAt": "2020-02-20T04:13:31.932717+00:00",
      "hitCount": 142971,
      "identifier": "00wed4",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "mian-shi-ti-05-ti-huan-kong-ge-ji-jian-qing-xi-tu-",
        "title": "面试题05. 替换空格 （字符串修改，清晰图解）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "ti-huan-kong-ge-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 45,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio",
      "status": "PUBLISHED",
      "summary": "方法一：字符数组\n由于每次替换从 1 个字符变成 3 个字符，使用字符数组可方便地进行替换。建立字符数组地长度为 s 的长度的 3 倍，这样可保证字符数组可以容纳所有替换后的字符。\n\n获得 s 的长度 length\n创建字符数组 array，其长度为 length * 3\n初始化 size 为 0，size 表示替换后",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "面试题05. 替换空格",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 209,
        "id": 103058,
        "viewCount": 112483
      },
      "uuid": "00wed4",
      "videosInfo": []
    }
  }
}
