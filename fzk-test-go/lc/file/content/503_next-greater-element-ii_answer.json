{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：单调栈 + 循环数组\n\n**思路及算法**\n\n我们可以使用单调栈解决本题。单调栈中保存的是下标，从栈底到栈顶的下标在数组 $\\textit{nums}$ 中对应的值是单调不升的。\n\n每次我们移动到数组中的一个新的位置 $i$，我们就将当前单调栈中所有对应值小于 $\\textit{nums}[i]$ 的下标弹出单调栈，这些值的下一个更大元素即为 $\\textit{nums}[i]$（证明很简单：如果有更靠前的更大元素，那么这些位置将被提前弹出栈）。随后我们将位置 $i$ 入栈。\n\n但是注意到只遍历一次序列是不够的，例如序列 $[2,3,1]$，最后单调栈中将剩余 $[3,1]$，其中元素 $[1]$ 的下一个更大元素还是不知道的。\n\n一个朴素的思想是，我们可以把这个循环数组「拉直」，即复制该序列的前 $n-1$ 个元素拼接在原序列的后面。这样我们就可以将这个新序列当作普通序列，用上文的方法来处理。\n\n而在本题中，我们不需要显性地将该循环数组「拉直」，而只需要在处理时对下标取模即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> nextGreaterElements(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ret(n, -1);\n        stack<int> stk;\n        for (int i = 0; i < n * 2 - 1; i++) {\n            while (!stk.empty() && nums[stk.top()] < nums[i % n]) {\n                ret[stk.top()] = nums[i % n];\n                stk.pop();\n            }\n            stk.push(i % n);\n        }\n        return ret;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] nextGreaterElements(int[] nums) {\n        int n = nums.length;\n        int[] ret = new int[n];\n        Arrays.fill(ret, -1);\n        Deque<Integer> stack = new LinkedList<Integer>();\n        for (int i = 0; i < n * 2 - 1; i++) {\n            while (!stack.isEmpty() && nums[stack.peek()] < nums[i % n]) {\n                ret[stack.pop()] = nums[i % n];\n            }\n            stack.push(i % n);\n        }\n        return ret;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar nextGreaterElements = function(nums) {\n    const n = nums.length;\n    const ret = new Array(n).fill(-1);\n    const stk = [];\n    for (let i = 0; i < n * 2 - 1; i++) {\n        while (stk.length && nums[stk[stk.length - 1]] < nums[i % n]) {\n            ret[stk[stk.length - 1]] = nums[i % n];\n            stk.pop();\n        }\n        stk.push(i % n);\n    }\n    return ret;\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ret = [-1] * n\n        stk = list()\n\n        for i in range(n * 2 - 1):\n            while stk and nums[stk[-1]] < nums[i % n]:\n                ret[stk.pop()] = nums[i % n]\n            stk.append(i % n)\n        \n        return ret\n```\n\n```go [sol1-Golang]\nfunc nextGreaterElements(nums []int) []int {\n    n := len(nums)\n    ans := make([]int, n)\n    for i := range ans {\n        ans[i] = -1\n    }\n    stack := []int{}\n    for i := 0; i < n*2-1; i++ {\n        for len(stack) > 0 && nums[stack[len(stack)-1]] < nums[i%n] {\n            ans[stack[len(stack)-1]] = nums[i%n]\n            stack = stack[:len(stack)-1]\n        }\n        stack = append(stack, i%n)\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nint* nextGreaterElements(int* nums, int numsSize, int* returnSize) {\n    *returnSize = numsSize;\n    if (numsSize == 0) {\n        return NULL;\n    }\n    int* ret = malloc(sizeof(int) * numsSize);\n    memset(ret, -1, sizeof(int) * numsSize);\n\n    int stk[numsSize * 2 - 1], top = 0;\n    for (int i = 0; i < numsSize * 2 - 1; i++) {\n        while (top > 0 && nums[stk[top - 1]] < nums[i % numsSize]) {\n            ret[stk[top - 1]] = nums[i % numsSize];\n            top--;\n        }\n        stk[top++] = i % numsSize;\n    }\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度: $O(n)$，其中 $n$ 是序列的长度。我们需要遍历该数组中每个元素最多 $2$ 次，每个元素出栈与入栈的总次数也不超过 $4$ 次。\n\n- 空间复杂度: $O(n)$，其中 $n$ 是序列的长度。空间复杂度主要取决于栈的大小，栈的大小至多为 $2n-1$。",
      "createdAt": "2021-03-05T14:23:52.746374+00:00",
      "hitCount": 54149,
      "identifier": "178XDv",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dong-hua-jiang-jie-dan-diao-zhan-by-fuxu-4z2g",
        "title": "动画讲解：单调栈"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "next-greater-element-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 63,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "xia-yi-ge-geng-da-yuan-su-ii-by-leetcode-bwam",
      "status": "PREPUBLISH",
      "summary": "方法一：单调栈 + 循环数组 思路及算法 我们可以使用单调栈解决本题。单调栈中保存的是下标，从栈底到栈顶的下标在数组 $\\textit{nums}$ 中对应的值是单调不升的。 每次我们移动到数组中的一个新的位置 $i$，我们就将当前单调栈中所有对应值小于 $\\textit{nums}[i]$ 的下标弹出单调栈，这些值的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Monotonic Stack",
          "nameTranslated": "单调栈",
          "slug": "monotonic-stack",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "下一个更大元素 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 120,
        "id": 637573,
        "viewCount": 35295
      },
      "uuid": "178XDv",
      "videosInfo": []
    }
  }
}
