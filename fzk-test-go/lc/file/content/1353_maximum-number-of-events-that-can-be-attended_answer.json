{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\n\n贪心的思想，对于第 $i$ 天，如果有若干的会议都可以在这一天开，那么我们肯定是让 $endDay$ 小的会议先在这一天开才会使答案最优，因为 $endDay$ 大的会议可选择的空间是比 $endDay$ 小的多的，所以在满足条件的会议需要让 $endDay$ 小的先开。\n\n\n\n我们开两个数组和一个 $set$：\n\n- $in[i]$：表示在第 $i$ 天开始的会议\n- $out[i]$：表示在第 $i$ 天有些会议结束了\n- $set<pair<int,int> >:$存放当前时间下可以开的会议，用 $(endDay_i,i)$ 这个二元组标记。\n\n即对于第 $x$ 个会议，我们在 $in[events[x][0]]$ 和 $out[events[x][1]+1]$ 处加入 $x$，则我们从按时间从小往大扫过去，对于第 $i$ 天我们遍历 $in[i]$，把第 $i$ 天开始的会议全部加入 $set$，再遍历 $out[i]$，把这一天结束的会议全部从 $set$ 里拿出来。相当于对于会议 $x$，它在第 $events[x][0]$ 天加入 $set$，直到第 $events[x][1]+1$ 天才会被抹去，那么我们根据这个就可以知道第 $i$ 天的所有可以开的会议就都在 $set$ 里了。\n\n最后基于我们上面分析的贪心的思想，我们直接从 $set$ 里拿出 $endDay$ 最小的会议，然后删除，表示在第 $i$ 天我们开了这个会议即可，$set$ 内部是有序的，可以直接 $O(1)$ 取出我们要的会议，当然这里也可以用别的数据结构来替代我们的 $set$，比如优先队列，它们支持的都是 $O(1)$ 取出最小值，$O(logn)$ 插入删除，这样可以保证时间复杂度是正确的。\n\n\n```C++ []\nclass Solution {\npublic:\n    #define N 100010\n    #define MP make_pair\n    multiset<pair<int,int> >S;\n    vector<int>in[N],out[N];\n    int maxEvents(vector<vector<int>>& events) {\n        int mx=0,cnt=0;\n        for (auto x:events){\n            int l=x[0],r=x[1];\n            mx=max(mx,r);\n            in[l].push_back(cnt);\n            out[r+1].push_back(cnt);\n            cnt++;\n        }\n        int ans=0;\n        for (int i=1;i<=mx;++i){\n            for (auto x:in[i]) S.insert(MP(events[x][1],x));\n            for (auto x:out[i]){\n                auto it=S.find(MP(events[x][1],x));\n                if (it!=S.end()) S.erase(it);\n            }\n            if (!S.empty()){\n                S.erase(S.begin());\n                ans++;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n**复杂度分析**\n\n- **时间复杂度：**$O(Slogn)$，$S=max_{i=0}^{events.length-1}{evens[i][1]}$，即时间点的上界，$set$ 插入删除均要 $logn$ 的时间。\n- **空间复杂度：**$O(S)$。",
      "createdAt": "2020-02-18T12:40:29.699932+00:00",
      "hitCount": 22803,
      "identifier": "dju7c1",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "you-xian-dui-lie-by-cao-mei-nai-xi-i-bitq",
        "title": "优先队列"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-number-of-events-that-can-be-attended"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-duo-ke-yi-can-jia-de-hui-yi-shu-mu-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 解题思路：\n贪心的思想，对于第 i 天，如果有若干的会议都可以在这一天开，那么我们肯定是让 endDay 小的会议先在这一天开才会使答案最优，因为 endDay 大的会议可选择的空间是比 endDay 小的多的，所以在满足条件的会议需要让 endDay 小的先开。\n我们开两个数组和一个 set：\n\nin[i]：表示在",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最多可以参加的会议数目",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 24,
        "id": 101227,
        "viewCount": 15595
      },
      "uuid": "dju7c1",
      "videosInfo": []
    }
  }
}
