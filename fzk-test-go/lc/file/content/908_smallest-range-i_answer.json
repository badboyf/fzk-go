{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法 1：数学\n\n**想法和算法**\n\n假设 `A` 是原始数组，`B` 是修改后的数组，我们需要最小化 `max(B) - min(B)`，也就是分别最小化 `max(B)` 和最大化 `min(B)`。\n\n`max(B)` 最小可能为 `max(A) - K`，因为 `max(A)` 不可能再变得更小。同样，`min(B)` 最大可能为 `min(A) + K`。所以结果 `max(B) - min(B)` 至少为 `ans = (max(A) - K) - (min(A) + K)`。\n\n我们可以用一下修改方式获得结果（如果 `ans >= 0`）：\n\n* 如果 $A[i] \\leq \\min(A) + K$，那么 $B[i] = \\min(A) + K$\n* 如果 $A[i] \\geq \\max(A) - K$，那么 $B[i] = \\max(A) - K$\n* 否则 $B[i] = A[i]$。\n\n如果 `ans < 0`，最终结果会有 `ans = 0`，同样利用上面的修改方式。\n\n```Java []\nclass Solution {\n    public int smallestRangeI(int[] A, int K) {\n        int min = A[0], max = A[0];\n        for (int x: A) {\n            min = Math.min(min, x);\n            max = Math.max(max, x);\n        }\n        return Math.max(0, max - min - 2*K);\n    }\n}\n```\n\n```Python []\nclass Solution(object):\n    def smallestRangeI(self, A, K):\n        return max(0, max(A) - min(A) - 2*K)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是 `A` 的长度。\n* 空间复杂度：$O(1)$。",
      "createdAt": "2019-08-11T09:36:46.394212+00:00",
      "hitCount": 8933,
      "identifier": "w6MfdB",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shu-xue-by-euyvvl-eyui",
        "title": "数学"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "smallest-range-i"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-xiao-chai-zhi-i-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法 1：数学\n想法和算法\n假设 A 是原始数组，B 是修改后的数组，我们需要最小化 max(B) - min(B)，也就是分别最小化 max(B) 和最大化 min(B)。\nmax(B) 最小可能为 max(A) - K，因为 max(A) 不可能再变得更小。同样，min(B) 最大可能为 min(A) + K。",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最小差值 I",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 21,
        "id": 19790,
        "viewCount": 7518
      },
      "uuid": "w6MfdB",
      "videosInfo": []
    }
  }
}
