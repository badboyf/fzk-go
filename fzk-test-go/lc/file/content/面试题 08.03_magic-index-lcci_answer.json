{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![面试题 08.03. 魔术索引.mp4](7d9d4c90-3102-42a4-8700-4bc6ca4237f2)\n### 📖 文字题解\n\n#### 写在前面\n\n这题是《程序员面试金典》里面的一道题。在原书里此题是有两个小问的，它们的描述很相似。本题即为第二个小问的描述，而第一个小问保证了题目给定的数组是「严格单调递增」的，就是不会有重复的数字。\n\n因此第一个小问是经典的二分查找问题，时间复杂度为 $O(\\log n)$。而第二个小问相当于是第一个小问的进阶：面试官在看到你解决了问题之后，会问你如果数组中可以出现重复的元素应该怎么做，就变成了本题。\n\n#### 方法一：二分剪枝\n\n**思路与算法**\n\n此问题如果用暴力的方法来解决，我们只需要对原数组从前往后进行一次遍历，找到第一个可行的位置返回即可，这里不再赘述。而本方法会进行一定程度的剪枝，在一些情况下会达到较优的时间复杂度，在最差情况下仍会退化成线性的时间复杂度，这里我们分两种情况讨论。\n\n第一种情况是**数组中只有一个满足条件的答案**。我们假设这个答案为 $i$，那么意味着 $[0 \\ldots i-1]$ 的值均小于自身的下标，$[i+1 \\ldots n-1]$ 的值均大于自身的下标。我们将整个数组每个元素减去其自身所在的下标，那么最后的答案即为 $0$ 所在的下标，且在 $0$ 之前的元素均为负数，$0$ 之后的元素均为正数。以 $[-1,0,2,4,5]$ 为例，减去自身下标以后以后得到 $[-1,-1,0,1,1]$，整个数组以 $0$ 为分界点，前半部分均为负数，后半部分均为负数，因此我们可以使用二分查找在 $O(\\log n)$ 的时间内找到答案 $0$ 所在的下标，具体做法就是碰到负数舍弃左半边，碰到正数舍弃右半边即可。\n\n第二种情况是**数组中存在多个满足条件的答案**，此时我们发现整个数组不具有任何性质。以 $[0,0,2,2,5]$ 为例，我们仍进行一次将每个元素减去其自身下标的操作，得到 $[0,-1,0,-1,1]$。目标是要找到第一个出现的 $0$，而由于数组中出现 $0$ 的位置不确定，因此无法使用二分查找，但是我们可以依据此来进行一定程度的剪枝，我们剪枝的策略为：\n\n- 每次我们选择数组的中间元素，如果当前中间元素是满足条件的答案，那么这个位置往后的元素我们都不再考虑，只要寻找左半部分是否有满足条件的答案即可。\n\n- 否则我们需要查看左半部分是否有满足条件的答案，如果没有的话我们仍然需要在右半边寻找，使用的策略同上。\n\n我们可以依靠此策略定义一个递归函数：`getAnswer(nums, left, right)` 返回数组 $\\textit{nums}$ 的下标范围 $[\\textit{left},\\textit{right}]$ 中第一个满足条件的答案，如果没有返回 $-1$。每次选择中间的位置 $\\textit{mid}$，此时直接先递归调用数组左半部分 `getAnswer(nums, left, mid - 1)` 得到返回值 $\\textit{leftAnswer}$，如果存在则直接返回，如果不存在则比较 $\\textit{nums}[\\textit{mid}]$ 和 $\\textit{mid}$ 是否相等，如果相等则返回 $\\textit{mid}$，否则需要递归调用 `getAnswer(nums, mid + 1, right)`。\n\n显然，此剪枝策略在 $[-1,0,1,2,4]$ 这种答案为数组的最后一个元素的情况下会退化成线性的时间复杂度，但是在一些情况下会有不错的表现。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getAnswer(vector<int>& nums, int left, int right) {\n        if (left > right) {\n            return -1;\n        }\n        int mid = (right - left) / 2 + left;\n        int leftAnswer = getAnswer(nums, left, mid - 1);\n        if (leftAnswer != -1) {\n            return leftAnswer;\n        } else if (nums[mid] == mid) {\n            return mid;\n        }\n        return getAnswer(nums, mid + 1, right);\n    }\n\n    int findMagicIndex(vector<int>& nums) {\n        return getAnswer(nums, 0, (int) nums.size() - 1);\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findMagicIndex(int[] nums) {\n        return getAnswer(nums, 0, nums.length - 1);\n    }\n\n    public int getAnswer(int[] nums, int left, int right) {\n        if (left > right) {\n            return -1;\n        }\n        int mid = (right - left) / 2 + left;\n        int leftAnswer = getAnswer(nums, left, mid - 1);\n        if (leftAnswer != -1) {\n            return leftAnswer;\n        } else if (nums[mid] == mid) {\n            return mid;\n        }\n        return getAnswer(nums, mid + 1, right);\n    }\n}\n```\n\n```C [sol1-C]\nint getAnswer(int* nums, int left, int right) {\n    if (left > right) {\n        return -1;\n    }\n    int mid = (right - left) / 2 + left;\n    int leftAnswer = getAnswer(nums, left, mid - 1);\n    if (leftAnswer != -1) {\n        return leftAnswer;\n    } else if (nums[mid] == mid) {\n        return mid;\n    }\n    return getAnswer(nums, mid + 1, right);\n}\n\nint findMagicIndex(int* nums, int numsSize) {\n    return getAnswer(nums, 0, numsSize - 1);\n}\n```\n\n```golang [sol1-Golang]\nfunc findMagicIndex(nums []int) int {\n    return getAnswer(nums, 0, len(nums) - 1)\n}\n\nfunc getAnswer(nums []int, left, right int) int {\n    if left > right {\n        return -1\n    }\n    mid := (right - left) / 2 + left\n    leftAnswer := getAnswer(nums, left, mid - 1)\n    if leftAnswer != -1 {\n        return leftAnswer\n    } else if nums[mid] == mid {\n        return mid\n    }\n    return getAnswer(nums, mid + 1, right)\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：最坏情况下会达到 $O(n)$ 的时间复杂度，其中 $n$ 为数组的长度。具体分析已经在上文中讲述，这里不再赘述。\n- 空间复杂度：递归函数的空间取决于调用的栈深度，而最坏情况下我们会递归 $n$ 层，即栈深度为 $O(n)$，因此空间复杂度最坏情况下为 $O(n)$。",
      "createdAt": "2020-07-30T11:02:34.223059+00:00",
      "hitCount": 28242,
      "identifier": "DLgA8S",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shou-hua-tu-jie-er-fen-cha-zhao-de-bian-chong-xia-",
        "title": "「手画图解」二分查找没法用，借它的壳进行分治"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "magic-index-lcci"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 35,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mo-zhu-suo-yin-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 写在前面 这题是《程序员面试金典》里面的一道题。在原书里此题是有两个小问的，它们的描述很相似。本题即为第二个小问的描述，而第一个小问保证了题目给定的数组是「严格单调递增」的，就是不会有重复的数字。 因此第一个小问是经典的二分查找问题，时间复杂度为 $O(\\log n)$。而第二个小问相当于是",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "魔术索引",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 149,
        "id": 354141,
        "viewCount": 21874
      },
      "uuid": "DLgA8S",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/393C0448FE4F45EFA480AE42589410EF-6-2.png",
          "duration": 378.4747,
          "videoId": "d9e91fdde2f440f7a57111b33659aa85"
        }
      ]
    }
  }
}
