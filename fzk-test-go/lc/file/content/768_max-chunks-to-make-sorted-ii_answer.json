{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一： 滑动窗口 【通过】\n\n**思路**\n\n首先还是要找到从左边开始最小的块。\n\n**算法**\n\n可以注意到，如果 $a_1, a_2, \\dots, a_m$ 是一个分块，同时 $a_1, a_2, \\dots, a_n$ 也是一个分块 ($m < n$)，那么 $a_{m+1}, a_{m+2}, \\dots, a_n$ 一定是一个分块。对于这种形式的问题，实际是可以用贪心算法来找到最多的块数的。\n\n我们知道数组 `arr` 在排序之后一定跟整个数组排序后相应的地方完全相同，即 `expect = sorted(arr)`。如果前 `k` 个元素的个数减去排序后前 `k` 个元素的个数都为 `0` 的话，那这前 `k` 个元素是可以成为一个合法的分块的。对于整个数组可以重复这一过程。\n\n用变量 `nonzero` 来计数目前差值不等于 `0` 的字符的个数。\n\n```python [solution1-Python]\nclass Solution(object):\n    def maxChunksToSorted(self, arr):\n        count = collections.defaultdict(int)\n        ans = nonzero = 0\n\n        for x, y in zip(arr, sorted(arr))\n            count[x] += 1\n            if count[x] == 0: nonzero -= 1\n            if count[x] == 1: nonzero += 1\n\n            count[y] -= 1\n            if count[y] == -1: nonzero += 1\n            if count[y] == 0: nonzero -= 1\n\n            if nonzero == 0: ans += 1\n\n        return ans\n```\n\n```java [solution1-Java]\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n        Map<Integer, Integer> count = new HashMap();\n        int ans = 0, nonzero = 0;\n\n        int[] expect = arr.clone();\n        Arrays.sort(expect);\n\n        for (int i = 0; i < arr.length; ++i) {\n            int x = arr[i], y = expect[i];\n\n            count.put(x, count.getOrDefault(x, 0) + 1);\n            if (count.get(x) == 0) nonzero--;\n            if (count.get(x) == 1) nonzero++;\n\n            count.put(y, count.getOrDefault(y, 0) - 1);\n            if (count.get(y) == -1) nonzero++;\n            if (count.get(y) == 0) nonzero--;\n\n            if (nonzero == 0) ans++;\n        }\n\n        return ans;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度: $O(N \\log N)$，其中 $N$ 为 `arr` 的长度。\n\n* 空间复杂度: $O(N)$。\n\n#### 方法二： 排序计数 【通过】\n\n**思路**\n\n与前一种方法相同，还是要找到从左边开始最小的块，对于这个分块 `expect = sorted(arr)`。\n\n在元素各不相同的情况下，找到最小的 `k` 只要满足 `max(arr[:k+1]) == expect[k]` 就可以了，这时候 `arr[:k+1]` 一定是 `expect[:k+1]` 的某种排列组合。\n\n但题目给出的条件元素是可能重复出现的，这时候就不能这么做了。但可以做一个简单的转换，将元素本身的值加上这个元素出现的个数作为一个组合，这个组合是一定唯一的。\n\n**算法**\n\n用 `(x, count)` 来代替 `x`，其中 `count` 的取值范围为 `1` 到 `x` 出现在 `arr` 中的数量。\n\n用 `cur` 来表示 `counted[:k+1]` 的累计和，在 `Y=expect[k]` 的情况下，分块次数就可以加 `1`。\n\n```python [solution2-Python]\nclass Solution(object):\n    def maxChunksToSorted(self, arr):\n        count = collections.Counter()\n        counted = []\n        for x in arr:\n            count[x] += 1\n            counted.append((x, count[x]))\n\n        ans, cur = 0, None\n        for X, Y in zip(counted, sorted(counted)):\n            cur = max(cur, X)\n            if cur == Y:\n                ans += 1\n        return ans\n```\n\n```java [solution2-Java]\nclass Solution {\n    public int maxChunksToSorted(int[] arr) {\n        Map<Integer, Integer> count = new HashMap();\n        List<Pair> counted = new ArrayList();\n        for (int x: arr) {\n            count.put(x, count.getOrDefault(x, 0) + 1);\n            counted.add(new Pair(x, count.get(x)));\n        }\n\n        List<Pair> expect = new ArrayList(counted);\n        Collections.sort(expect, (a, b) -> a.compare(b));\n\n        Pair cur = counted.get(0);\n        int ans = 0;\n        for (int i = 0; i < arr.length; ++i) {\n            Pair X = counted.get(i), Y = expect.get(i);\n            if (X.compare(cur) > 0) cur = X;\n            if (cur.compare(Y) == 0) ans++;\n        }\n\n        return ans;\n    }\n}\n\nclass Pair {\n    int val, count;\n    Pair(int v, int c) {\n        val = v; count = c;\n    }\n    int compare(Pair that) {\n        return this.val != that.val ? this.val - that.val : this.count - that.count;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度: $O(N \\log N)$，其中 $N$ 为数组 `arr` 的长度。\n\n* 空间复杂度: $O(N)$。",
      "createdAt": "2019-11-04T09:19:08.735421+00:00",
      "hitCount": 4998,
      "identifier": "rJGJrp",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zui-duo-neng-wan-cheng-pai-xu-de-kuai-ii-deng-jie-",
        "title": "最多能完成排序的块 II （辅助栈法，清晰图解）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "max-chunks-to-make-sorted-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 8,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-duo-neng-wan-cheng-pai-xu-de-kuai-ii-by-leetco",
      "status": "PUBLISHED",
      "summary": "方法一： 滑动窗口 【通过】 思路 首先还是要找到从左边开始最小的块。 算法 可以注意到，如果 $a_1, a_2, \\dots, a_m$ 是一个分块，同时 $a_1, a_2, \\dots, a_n$ 也是一个分块 ($m < n$)，那么 $a_{m+1}, a_{m+2}, \\dots, a_n$ 一定是一个分",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最多能完成排序的块 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 10,
        "id": 40594,
        "viewCount": 3573
      },
      "uuid": "rJGJrp",
      "videosInfo": []
    }
  }
}
