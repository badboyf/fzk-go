{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "该问题要求在原数组上直接修改。如果没有该限制条件，可以把元素直接从原数组复制到目标数组。\n\n![](https://pic.leetcode-cn.com/Figures/1089/1089_Duplicate_Zeros_1.png){:width=480}\n\n\n注意：如何把零复制两次。\n\n```python [snippet1-Python]\n  s = 0\n  d = 0\n\n  # Copy is performed until the destination array is full.\n  for s in range(N):\n    if source[s] == 0:\n      # Copy zero twice.\n      destination[d] = 0\n      d += 1\n      destination[d] = 0\n    else:\n      destination[d] = source[s]\n\n    d += 1\n```\n\n题目中还要求不能增加原数组的长度，这意味着在复写零之后，数组末尾一些元素的新索引超出了数组长度，会被丢弃。\n\n![](https://pic.leetcode-cn.com/Figures/1089/1089_Duplicate_Zeros_2.png){:width=480}\n\n由于不能使用额外空间，因此原数组和目标数组是同一个，不能将原数组复制到目标数组。因此，只能直接在原数组上重写。\n\n![](https://pic.leetcode-cn.com/Figures/1089/1089_Duplicate_Zeros_3.png){:width=480}\n\n\n#### 方法一：两次遍历，$O(1)$ 的空间复杂度\n\n**思路**\n\n如果知道数组末尾有多少个元素被丢弃，就可以复制其他元素。丢弃的元素数量等于在原数组中添加的零的数量。通过向数组中添加零，将数组末尾的元素丢弃。\n\n只要知道原始数组找中有多少个元素留下来，就可以从留下来元素的末尾开始复制。从末尾复制可以确保不会丢弃任何元素，因为只有末尾之后的元素才会被丢弃。\n\n**算法**\n\n1. 计算需要复写零的数量 `possible_dups`。需要注意的是，这里不是计算所有的零，一部分零可能因为在数组末尾被丢弃而不参与复写。`possible_dups` 的值等于复写零的数量，也等于被丢弃元素的数量。因此 `length_possible_dups` 也是目标数组的一部分。\n\n    ![](https://pic.leetcode-cn.com/Figures/1089/1089_Duplicate_Zeros_4.png){:width=480}\n\n    注意：上图显示原数组和目标数组是为了便于理解，实际上只在一个数组中执行操作。\n\n2. 处理剩余元素边界上零的情况。\n\n    在剩余元素中复写零的时候，需要注意边界上零的情况。如果数组有剩余空间，这个零应该被当做复写；如果没有剩余项，这个零不能被复写。即如果它是 `possible_dups` 的一部分，则复写；否则不复写。\n\n    > 一个边界零情况的例子：[8,4,5,0,0,0,0,7]。\n    该数组中，第一个和第二个出现的零可以被复写。由于空间不足，第三个零不能被复写。\n    在复写零时，需确保第三个零不被复写，复写结果为：[8,4,5,0,`0`,0,`0`,0]。\n\n3. 从末尾迭代数组，遇到非零元素直接向后移动，遇到零需要复制和移动。从丢弃元素的左侧开始向左迭代，不断向右移动，为复写的零腾出空间。\n\n![](https://pic.leetcode-cn.com/Figures/1089/1089_Duplicate_Zeros_5.png){:width=480}\n\n```java [solution1-Java]\nclass Solution {\n    public void duplicateZeros(int[] arr) {\n        int possibleDups = 0;\n        int length_ = arr.length - 1;\n\n        // Find the number of zeros to be duplicated\n        // Stopping when left points beyond the last element in the original array\n        // which would be part of the modified array\n        for (int left = 0; left <= length_ - possibleDups; left++) {\n\n            // Count the zeros\n            if (arr[left] == 0) {\n\n                // Edge case: This zero can't be duplicated. We have no more space,\n                // as left is pointing to the last element which could be included  \n                if (left == length_ - possibleDups) {\n                    // For this zero we just copy it without duplication.\n                    arr[length_] = 0;\n                    length_ -= 1;\n                    break;\n                }\n                possibleDups++;\n            }\n        }\n\n        // Start backwards from the last element which would be part of new array.\n        int last = length_ - possibleDups;\n\n        // Copy zero twice, and non zero once.\n        for (int i = last; i >= 0; i--) {\n            if (arr[i] == 0) {\n                arr[i + possibleDups] = 0;\n                possibleDups--;\n                arr[i + possibleDups] = 0;\n            } else {\n                arr[i + possibleDups] = arr[i];\n            }\n        }\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution:\n    def duplicateZeros(self, arr: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify arr in-place instead.\n        \"\"\"\n\n        possible_dups = 0\n        length_ = len(arr) - 1\n\n        # Find the number of zeros to be duplicated\n        for left in range(length_ + 1):\n\n            # Stop when left points beyond the last element in the original list\n            # which would be part of the modified list\n            if left > length_ - possible_dups:\n                break\n\n            # Count the zeros\n            if arr[left] == 0:\n                # Edge case: This zero can't be duplicated. We have no more space,\n                # as left is pointing to the last element which could be included  \n                if left == length_ - possible_dups:\n                    arr[length_] = 0 # For this zero we just copy it without duplication.\n                    length_ -= 1\n                    break\n                possible_dups += 1\n\n        # Start backwards from the last element which would be part of new list.\n        last = length_ - possible_dups\n\n        # Copy zero twice, and non zero once.\n        for i in range(last, -1, -1):\n            if arr[i] == 0:\n                arr[i + possible_dups] = 0\n                possible_dups -= 1\n                arr[i + possible_dups] = 0\n            else:\n                arr[i + possible_dups] = arr[i]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是元素个数。遍历两次数组，第一次计算 `possible_dups`，第二次复制元素。最坏情况下，数组中的零非常少或者没有零，需要遍历整个数组。\n\n* 空间复杂度：$O(1)$，不使用额外空间。",
      "createdAt": "2020-02-10T02:45:35.333515+00:00",
      "hitCount": 9873,
      "identifier": "LmN7rN",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gofang-fa-qiao-yong-by-dao-di-huan-shi-m-eqpb",
        "title": "GO方法巧用"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "duplicate-zeros"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "fu-xie-ling-by-leetcode",
      "status": "PUBLISHED",
      "summary": "该问题要求在原数组上直接修改。如果没有该限制条件，可以把元素直接从原数组复制到目标数组。\n注意：如何把零复制两次。\n题目中还要求不能增加原数组的长度，这意味着在复写零之后，数组末尾一些元素的新索引超出了数组长度，会被丢弃。\n由于不能使用额外空间，因此原数组和目标数组是同一个，不能将原数组复制到目标数组。因此，只能直接在",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/Figures/1089/1089_Duplicate_Zeros_1.png",
      "title": "复写零",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 90473,
        "viewCount": 7242
      },
      "uuid": "LmN7rN",
      "videosInfo": []
    }
  }
}
