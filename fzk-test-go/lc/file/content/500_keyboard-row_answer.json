{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：遍历\n\n我们为每一个英文字母标记其对应键盘上的行号，然后检测字符串中所有字符对应的行号是否相同。\n\n- 我们可以预处理计算出每个字符对应的行号。\n\n- 遍历字符串时，统一将大写字母转化为小写字母方便计算。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<string> findWords(vector<string>& words) {\n        vector<string> ans;\n        string rowIdx = \"12210111011122000010020202\";\n        for (auto & word : words) {\n            bool isValid = true;\n            char idx = rowIdx[tolower(word[0]) - 'a'];\n            for (int i = 1; i < word.size(); ++i) {\n                if(rowIdx[tolower(word[i]) - 'a'] != idx) {\n                    isValid = false;\n                    break;\n                }\n            }\n            if (isValid) {\n                ans.emplace_back(word);\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {    \n    public String[] findWords(String[] words) {\n        List<String> list = new ArrayList<String>();\n        String rowIdx = \"12210111011122000010020202\";\n        for (String word : words) {\n            boolean isValid = true;\n            char idx = rowIdx.charAt(Character.toLowerCase(word.charAt(0)) - 'a');\n            for (int i = 1; i < word.length(); ++i) {\n                if (rowIdx.charAt(Character.toLowerCase(word.charAt(i)) - 'a') != idx) {\n                    isValid = false;\n                    break;\n                }\n            }\n            if (isValid) {\n                list.add(word);\n            }\n        }\n        String[] ans = new String[list.size()];\n        for (int i = 0; i < list.size(); ++i) {\n            ans[i] = list.get(i);\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public string[] FindWords(string[] words) {\n        IList<string> list = new List<string>();\n        string rowIdx = \"12210111011122000010020202\";\n        foreach (string word in words) {\n            bool isValid = true;\n            char idx = rowIdx[char.ToLower(word[0]) - 'a'];\n            for (int i = 1; i < word.Length; ++i) {\n                if (rowIdx[char.ToLower(word[i]) - 'a'] != idx) {\n                    isValid = false;\n                    break;\n                }\n            }\n            if (isValid) {\n                list.Add(word);\n            }\n        }\n\n        string[] ans = new string[list.Count];\n        for (int i = 0; i < list.Count; ++i) {\n            ans[i] = list[i];\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findWords(self, words: List[str]) -> List[str]:\n        ans = []\n        rowIdx = \"12210111011122000010020202\"\n        for word in words:\n            idx = rowIdx[ord(word[0].lower()) - ord('a')]\n            if all(rowIdx[ord(ch.lower()) - ord('a')] == idx for ch in word):\n                ans.append(word)\n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar findWords = function(words) {\n    const list = [];\n    const rowIdx = \"12210111011122000010020202\";\n    for (const word of words) {\n        let isValid = true;\n        const idx = rowIdx[word[0].toLowerCase().charCodeAt() - 'a'.charCodeAt()];\n        for (let i = 1; i < word.length; ++i) {\n            if (rowIdx[word[i].toLowerCase().charCodeAt() - 'a'.charCodeAt()] !== idx) {\n                isValid = false;\n                break;\n            }\n        }\n        if (isValid) {\n            list.push(word);\n        }\n    }\n    return list;\n};\n```\n\n```TypeScript [sol1-TypeScript]\nfunction findWords(words: string[]): string[] {\n    const list: string[] = [];\n    const rowIdx: string = \"12210111011122000010020202\";\n    for (const word of words) {\n        let isValid: boolean = true;\n        const idx: string = rowIdx[word[0].toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)];\n        for (let i = 1; i < word.length; ++i) {\n            if (rowIdx[word[i].toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0)] !== idx) {\n                isValid = false;\n                break;\n            }\n        }\n        if (isValid) {\n            list.push(word);\n        }\n    }\n    return list;\n};\n```\n\n```go [sol1-Golang]\nfunc findWords(words []string) (ans []string) {\n    const rowIdx = \"12210111011122000010020202\"\nnext:\n    for _, word := range words {\n        idx := rowIdx[unicode.ToLower(rune(word[0]))-'a']\n        for _, ch := range word[1:] {\n            if rowIdx[unicode.ToLower(ch)-'a'] != idx {\n                continue next\n            }\n        }\n        ans = append(ans, word)\n    }\n    return\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(L)$，其中 $L$ 表示 $\\textit{words}$ 中所有字符串的长度之和。\n\n- 空间复杂度：$O(C)$，其中 $C$ 表示英文字母的个数，在本题中英文字母的个数为 $26$。注意返回值不计入空间复杂度。",
      "createdAt": "2021-10-27T11:19:30.941855+00:00",
      "hitCount": 16900,
      "identifier": "YCkXit",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-jian-dan-zi-fu-chuan-m-zx6b",
        "title": "【宫水三叶】简单字符串模拟"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "keyboard-row"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 24,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "jian-pan-xing-by-leetcode-solution-bj5e",
      "status": "PUBLISHED",
      "summary": "方法一：遍历 我们为每一个英文字母标记其对应键盘上的行号，然后检测字符串中所有字符对应的行号是否相同。 我们可以预处理计算出每个字符对应的行号。 遍历字符串时，统一将大写字母转化为小写字母方便计算。 C++ [sol1-C++] class Solution { public:     vector<string> f",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "TypeScript",
          "nameTranslated": "",
          "slug": "typescript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "键盘行",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 72,
        "id": 1069754,
        "viewCount": 12730
      },
      "uuid": "YCkXit",
      "videosInfo": []
    }
  }
}
