{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：二分查找 + Rabin-Karp 字符串编码\n\n**分析**\n\n我们可以把这个问题分解成两个子问题：\n\n1. 从 `1` 到 `N` 中选取子串的长度 `L`；\n\n2. 检查字符串中是否存在长度为 `L` 的重复子串。\n\n**子任务一：二分查找**\n\n解决子问题一的最简单的方法是，我们从 `L = N - 1` 开始，依次递减选取子串的长度，并进行判断。如果发现存在长度为 `L` 的重复子串，就表示 `L` 是最长的可能长度。\n\n但我们发现，如果字符串中存在长度为 `L` 的重复子串，那么一定存在长度为 `L0 < L` 的重复子串（选取长度为 `L` 的重复子串的某个长度为 `L0` 的子串即可），因此我们可以使用二分查找的方法，找到最大的 `L`。\n\n![fig](https://pic.leetcode-cn.com/Figures/1044/binary.png){:width=600}\n{:align=center}\n\n**子任务二：Rabin-Karp 字符串编码**\n\n我们可以使用 `Rabin-Karp` 算法将字符串进行编码，这样只要有两个编码相同，就说明存在重复子串。对于选取的长度 `L`：\n\n- 使用长度为 `L` 的滑动窗口在长度为 `N` 的字符串上从左向右滑动；\n\n- 检查当前处于滑动窗口中的子串的编码是否已经出现过（用一个集合存储已经出现过的编码）；\n\n    - 若已经出现过，就说明找到了长度为 `L` 的重复子串；\n\n    - 若没有出现过，就把当前子串的编码加入到集合中。\n\n<![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_1.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_2.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_3.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_4.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_5.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_6.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_7.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_8.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_9.png),![1200](https://pic.leetcode-cn.com/Figures/1044/1044_slide_10.png)>{:width=600}\n{:align=center}\n\n\n可以看出，`Rabin-Karp` 字符串编码的本质是对字符串进行哈希，将字符串之间的比较转化为编码之间的比较。接下来的问题是，在滑动窗口从左向右滑动时，如何快速计算出当前子串的编码呢？如果需要在 $O(L)$ 的时间内算出编码，这种方法就没有意义了，因为这个直接进行字符串比较需要的时间相同。\n\n为了能够快速计算出字符串编码，我们可以将字符串看成一个 26 进制的数（因为字符串中仅包含小写字母），它对应的 10 进制的值就是字符串的编码值。首先将字符转换为 26 进制中的 0-25，即通过 `arr[i] = (int)S.charAt(i) - (int)'a'`，可以将字符串 `abcd` 转换为 `[0, 1, 2, 3]`，它对应的 10 进制值为：\n\n$$\nh_0 = 0 \\times 26^3 + 1 \\times 26^2 + 2 \\times 26^1 + 3 \\times 26^0\n$$\n\n我们将这个表达式写得更通用一些，设 $c_i$ 为字符串中第 `i` 个字符对应的数字，$a = 26$ 为字符串的进制，那么有：\n\n$$\n\\begin{aligned}\nh_0 &= c_0 a^{L - 1} + c_1 a^{L - 2} + ... + c_i a^{L - 1 - i} + ... + c_{L - 1} a^1 + c_L a^0\\\\\n&= \\sum_{i = 0}^{L - 1}{c_i a^{L - 1 - i}}\n\\end{aligned}\n$$\n\n当我们向右移动滑动窗口时，例如从 `abcd` 变成 `bcde`，此时字符串对应的值从 `[0, 1, 2, 3]` 变成 `[1, 2, 3, 4]`，移除了最高位的 `0`，并且在最低位添加了 `4`，那么我们可以快速地计算出新的字符串的编码：\n\n$$\nh_1 = (h_0 - 0 \\times 26^3) \\times 26 + 4 \\times 26^0\n$$\n\n更加通用的写法是：\n\n$$\nh_1 = (h_0 a - c_0 a^L) + c_{L + 1}\n$$\n\n这样，我们只需要 $O(L)$ 的时间复杂度计算出最左侧子串的编码，这个 $O(L)$ 和滑动窗口的循环是独立的。在滑动窗口向右滑动时，计算新的子串的编码的时间复杂度仅为 $O(1)$。\n\n最后一个需要解决的问题是，在实际的编码计算中，$a^L$ 的值可能会非常大，在 C++ 和 Java 语言中，会导致整数的上溢出。一般的解决方法时，对编码值进行取模，将编码控制在一定的范围内，防止溢出，即`h = h % modulus`。根据 [生日悖论](https://baike.baidu.com/item/%E7%94%9F%E6%97%A5%E6%82%96%E8%AE%BA)，模数一般需要和被编码的信息数量的平方根的数量级相同，在本题中，相同长度的子串的数量不会超过 $N$ 个，因此选取模数是 $2^{32}$（无符号整型数的最大值）是足够的。在 Java 中可以用如下的代码实现取模：\n\n```Java\nh = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;\nh = (h + nums[start + L - 1]) % modulus;\n```\n\n而在 Python 中，整型数没有最大值，因此可以在运算的最后再取模：\n\n```Python\nh = (h * a - nums[start - 1] * aL + nums[start + L - 1]) % modulus\n```\n\n在解决算法题时，我们只要判断两个编码是否相同，就表示它们对应的字符串是否相同。但在实际的应用场景中，会出现字符串不同但编码相同的情况，因此在实际场景中使用 `Rabin-Karp` 字符串编码时，推荐在编码相同时再对字符串进行比较，防止出现错误。\n\n```Python [sol1]\nclass Solution:\n    def search(self, L: int, a: int, modulus: int, n: int, nums: List[int]) -> str:\n        \"\"\"\n        Rabin-Karp with polynomial rolling hash.\n        Search a substring of given length\n        that occurs at least 2 times.\n        @return start position if the substring exits and -1 otherwise.\n        \"\"\"\n        # compute the hash of string S[:L]\n        h = 0\n        for i in range(L):\n            h = (h * a + nums[i]) % modulus\n              \n        # already seen hashes of strings of length L\n        seen = {h} \n        # const value to be used often : a**L % modulus\n        aL = pow(a, L, modulus) \n        for start in range(1, n - L + 1):\n            # compute rolling hash in O(1) time\n            h = (h * a - nums[start - 1] * aL + nums[start + L - 1]) % modulus\n            if h in seen:\n                return start\n            seen.add(h)\n        return -1\n        \n    def longestDupSubstring(self, S: str) -> str:\n        n = len(S)\n        # convert string to array of integers\n        # to implement constant time slice\n        nums = [ord(S[i]) - ord('a') for i in range(n)]\n        # base value for the rolling hash function\n        a = 26\n        # modulus value for the rolling hash function to avoid overflow\n        modulus = 2**32\n        \n        # binary search, L = repeating string length\n        left, right = 1, n\n        while left != right:\n            L = left + (right - left) // 2\n            if self.search(L, a, modulus, n, nums) != -1:\n                left = L + 1\n            else:\n                right = L \n               \n        start = self.search(left - 1, a, modulus, n, nums)\n        return S[start: start + left - 1] if start != -1 else \"\"\n```\n\n```Java [sol1]\nclass Solution {\n    /*\n    Rabin-Karp with polynomial rolling hash.\n        Search a substring of given length\n        that occurs at least 2 times.\n        Return start position if the substring exits and -1 otherwise.\n        */\n    public int search(int L, int a, long modulus, int n, int[] nums) {\n        // compute the hash of string S[:L]\n        long h = 0;\n        for (int i = 0; i < L; ++i) h = (h * a + nums[i]) % modulus;\n\n        // already seen hashes of strings of length L\n        HashSet<Long> seen = new HashSet();\n        seen.add(h);\n        // const value to be used often : a**L % modulus\n        long aL = 1;\n        for (int i = 1; i <= L; ++i) aL = (aL * a) % modulus;\n\n        for (int start = 1; start < n - L + 1; ++start) {\n            // compute rolling hash in O(1) time\n            h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;\n            h = (h + nums[start + L - 1]) % modulus;\n            if (seen.contains(h)) return start;\n            seen.add(h);\n        }\n        return -1;\n    }\n\n    public String longestDupSubstring(String S) {\n        int n = S.length();\n        // convert string to array of integers\n        // to implement constant time slice\n        int[] nums = new int[n];\n        for (int i = 0; i < n; ++i) nums[i] = (int)S.charAt(i) - (int)'a';\n        // base value for the rolling hash function\n        int a = 26;\n        // modulus value for the rolling hash function to avoid overflow\n        long modulus = (long)Math.pow(2, 32);\n\n        // binary search, L = repeating string length\n        int left = 1, right = n;\n        int L;\n        while (left != right) {\n            L = left + (right - left) / 2;\n            if (search(L, a, modulus, n, nums) != -1) left = L + 1;\n            else right = L;\n        }\n\n        int start = search(left - 1, a, modulus, n, nums);\n        return start != -1 ? S.substring(start, start + left - 1) : \"\";\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N \\log N)$，二分查找的时间复杂度为 $O(\\log N)$，Rabin-Karp 字符串编码的时间复杂度为 $O(N)$。\n\n* 空间复杂度：$O(N)$，用来存储字符串编码的集合。",
      "createdAt": "2019-07-22T05:49:20.817570+00:00",
      "hitCount": 41041,
      "identifier": "fKbLri",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shi-yong-bigintlai-cun-chu-by-cao-mei-na-in0p",
        "title": "使用bigint来存储"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "longest-duplicate-substring"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 46,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-chang-zhong-fu-zi-chuan-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：二分查找 + Rabin-Karp 字符串编码\n分析\n我们可以把这个问题分解成两个子问题：\n\n\n从 1 到 N 中选取子串的长度 L；\n\n\n检查字符串中是否存在长度为 L 的重复子串。\n\n\n子任务一：二分查找\n解决子问题一的最简单的方法是，我们从 L = N - 1 开始，依次递减选取子串的长度，并进行判断",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/Figures/1044/binary.png",
      "title": "最长重复子串",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 75,
        "id": 15925,
        "viewCount": 27290
      },
      "uuid": "fKbLri",
      "videosInfo": []
    }
  }
}
