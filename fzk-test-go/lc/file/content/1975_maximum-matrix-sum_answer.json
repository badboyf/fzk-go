{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心\n\n**提示 $1$**\n\n为了使得操作后方阵总和最大，我们需要使得负数元素的**总和尽可能大**。\n\n对于方阵中的两个负数元素，一定存在一系列的操作使得这两个负数元素均变为正数，且其余元素不变。\n\n对于方阵中的一个正数元素和一个负数元素，一定存在一系列的操作使得这两个元素交换正负，且其余元素不变。\n\n**提示 $1$ 解释**\n\n第一部分是显然的。\n\n对于第二部分，我们可以任意选择一条连接两个负数元素的**有向**路径，按顺序对路径上（除终点以外）的每个元素和它对应的下一个元素都执行一次操作。最终路径上除了两个端点以外的其他元素都被执行了两次操作，因此数值不变；两个端点元素都被执行了一次操作二变为正数。\n\n由于方阵是网格，因此上述路径一定存在。\n\n对于第三部分，将第二部分中的一个负数更改为正数即可证明。\n\n**提示 $2$**\n\n如果方阵中存在一个元素为 $0$，另一个元素为负数。那么一定存在一系列的操作使得负数元素变为正数，且其余元素不变。\n\n**提示 $2$ 解释**\n\n类似 **提示 $1$**，将一个负数元素更改为 $0$ 即可证明。\n\n**提示 $3$**\n\n如果方阵中存在 $0$，那么一定可以通过一系列的操作使得方阵中所有元素**均为非负数**;\n\n如果方阵中不存在 $0$，那么：\n\n- 如果方阵中有奇数个负数元素，那么一定可以通过一系列的操作使得方阵中只有一个负数元素，且该负数元素可以在任何位置。同时，无论如何操作，方阵中必定存在负数元素。\n\n- 如果方阵中有偶数个负数元素，那么一定可以通过一系列的操作使得方阵中不存在负数元素。\n\n**提示 $3$ 解释**\n\n对于第一部分，反复对 $0$ 和负数元素进行 **提示 $2$** 的操作即可。\n\n对于第二部分，我们首先可以证明如果方阵**不存在** $0$，那么负数元素**数量**的**奇偶性不会改变**。然后，我们可以根据 **提示 $1$** 构造出一系列操作从而达到对应的要求。\n\n**思路与算法**\n\n根据 **提示 $3$**，我们可以按照方阵的元素分为以下几种情况：\n\n- 方阵中有 $0$，那么最大方阵和即为所有元素的绝对值之和；\n\n- 方阵中没有 $0$，且负数元素数量为偶数，那么最大方阵和即为所有元素的绝对值之和；\n\n- 方阵中没有 $0$，且负数元素数量为奇数，那么最大方阵和即为所有元素的绝对值之和减去所有元素最小绝对值的两倍。\n\n其中，第一种情况也可以按照负数元素数量的奇偶性划入后两种情况中（此时最小绝对值一定为 $0$）。\n\n我们遍历方阵，维护负数元素的数量、元素的最小绝对值以及所有元素的绝对值之和。随后，我们按照负数元素数量的奇偶性计算对应的最大元素和并返回。\n\n最后，矩阵所有元素绝对值之和可能超过 $32$ 位整数的上限，因此对于 $\\texttt{C++}$ 等语言，需要使用 $64$ 位整数来维护。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    long long maxMatrixSum(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        int cnt = 0;   // 负数元素的数量\n        long long total = 0;   // 所有元素的绝对值之和\n        int mn = INT_MAX;   // 方阵元素的最小绝对值\n        for (int i = 0; i < n; ++i){\n            for (int j = 0; j < n; ++j){\n                mn = min(mn, abs(matrix[i][j]));\n                if (matrix[i][j] < 0){\n                    ++cnt;\n                }\n                total += abs(matrix[i][j]);\n            }\n        }\n        // 按照负数元素的数量的奇偶性讨论\n        if (cnt % 2 == 0){\n            return total;\n        }\n        else{\n            return total - 2 * mn;\n        }\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxMatrixSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        cnt = 0   # 负数元素的数量\n        total = 0   # 所有元素的绝对值之和\n        mn = float(\"INF\")   # 方阵元素的最小绝对值\n        for i in range(n):\n            for j in range(n):\n                mn = min(mn, abs(matrix[i][j]))\n                if matrix[i][j] < 0:\n                    cnt += 1\n                total += abs(matrix[i][j])\n        # 按照负数元素的数量的奇偶性讨论\n        if cnt % 2 == 0:\n            return total\n        else:\n            return total - 2 * mn\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(mn)$，其中 $m$ 为 $\\textit{matrix}$ 的行数，$n$ 为 $\\textit{matrix}$ 的列数。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-08-22T09:11:54.149668+00:00",
      "hitCount": 1070,
      "identifier": "mi4bNu",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "5835-zui-da-fang-zhen-he-tan-xin-by-mga_-vkzl",
        "title": "5835. 最大方阵和 - 贪心"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-matrix-sum"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-da-fang-zhen-he-by-leetcode-solution-5xnx",
      "status": "PREPUBLISH",
      "summary": "方法一：贪心 提示 $1$ 为了使得操作后方阵总和最大，我们需要使得负数元素的总和尽可能大。 对于方阵中的两个负数元素，一定存在一系列的操作使得这两个负数元素均变为正数，且其余元素不变。 对于方阵中的一个正数元素和一个负数元素，一定存在一系列的操作使得这两个元素交换正负，且其余元素不变。 提示 $1$ 解释 第一部分是",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最大方阵和",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 8,
        "id": 951896,
        "viewCount": 833
      },
      "uuid": "mi4bNu",
      "videosInfo": []
    }
  }
}
