{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心\n\n**提示 $1$**\n\n考虑耗时最长的工作。假设我们需要 $\\textit{longest}$ 周完成该工作，其余工作共计需要 $\\textit{rest}$ 周完成。那么可以完成所有工作的**充要条件**是：\n\n$$\n\\textit{longest} \\le \\textit{rest} + 1.\n$$\n\n**提示 $1$ 解释**\n\n首先考虑**必要性**。必要性可以通过证明逆否命题，即「如果 $\\textit{longest} > \\textit{rest} + 1$，那么无法完成所有的工作」，来证明。\n\n我们可以利用反证法，如果可以完成所有工作，那么耗时最长的工作一定可以完成，这意味着至少需要有 $\\textit{longest} - 1$ 周剩余工作可以被分配在间隔内，但剩余工作的工时 $\\textit{rest}$ 并不满足这一要求，因此充分性得证。\n\n随后考虑**充分性**。充分性可以通过构造分配方案来证明。我们可以将分配工作时间的过程转化为在 $[1, \\textit{longest} + \\textit{rest}]$ 闭区间内分配整数的过程，其中每个整数代表对应的一周时间。在分配整数的过程中，我们首先按照从小到大的顺序分配所有的**奇数**，然后按照从小到大的顺序分配所有的**偶数**。\n\n我们将所有工作按照**耗时从高到低**来排序，按照前文的顺序分配对应的时间。此时由于 $\\textit{longest} \\le \\textit{rest} + 1$，因此耗时最长的工作不会出现任意两周相邻这种违反规定的情况。类似地可以证明，其他工作由于耗时小于最长的工作，也不会出现相邻的情况。因此必要性得证。\n\n**思路与算法**\n\n根据 **提示 $1$**，我们首先计算出耗时最长的工作所需周数 $\\textit{longest}$ 与剩余工作所需周数 $\\textit{rest}$，并比较两者大小。根据比较的结果不同会有两种情况：\n\n- $\\textit{longest} \\le \\textit{rest} + 1$，此时根据 **提示 $1$**，所有工作都可以完成，我们返回所有工作的总耗时 $\\textit{longest} + \\textit{rest}$ 作为答案。\n\n- $\\textit{longest} > \\textit{rest} + 1$，此时我们无法完成耗时最长的工作。根据 **提示 $1$** 的证明过程，耗时最长的工作最多可以完成 $\\textit{rest} + 1$ 周，因此最大的工作周数即为 $2 \\times \\textit{rest} + 1$，我们返回该数作为答案。\n\n最后，由于 $\\textit{rest}$ 可能超过 $32$ 位整数的范围，我们需要使用 $64$ 位整数进行相应的计算与比较。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    long long numberOfWeeks(vector<int>& milestones) {\n        // 耗时最长工作所需周数\n        long long longest = *max_element(milestones.begin(), milestones.end());\n        // 其余工作共计所需周数\n        long long rest = accumulate(milestones.begin(), milestones.end(), 0LL) - longest;\n        if (longest > rest + 1){\n            // 此时无法完成所耗时最长的工作\n            return rest * 2 + 1;\n        }\n        else {\n            // 此时可以完成所有工作\n            return longest + rest;\n        }\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfWeeks(self, milestones: List[int]):\n        # 耗时最长工作所需周数\n        longest = max(milestones)\n        # 其余工作共计所需周数\n        rest = sum(milestones) - longest\n        if longest > rest + 1:\n            # 此时无法完成所耗时最长的工作\n            return rest * 2 + 1\n        else:\n            # 此时可以完成所有工作\n            return longest + rest\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{milestones}$ 的长度。即为遍历数组计算耗时总和与最大值的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-08-01T04:26:01.140274+00:00",
      "hitCount": 4080,
      "identifier": "lIwqeR",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ezi-zai-fei-hua-e-bi-jiao-hao-li-jie-de-8in32",
        "title": " ʚ自在飞花ɞ | 比较好理解的 O(n) 的思路"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "maximum-number-of-weeks-for-which-you-can-work"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 16,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "ni-ke-yi-gong-zuo-de-zui-da-zhou-shu-by-rbidw",
      "status": "PUBLISHED",
      "summary": "方法一：贪心 提示 $1$ 考虑耗时最长的工作。假设我们需要 $\\textit{longest}$ 周完成该工作，其余工作共计需要 $\\textit{rest}$ 周完成。那么可以完成所有工作的充要条件是： \\textit{longest} \\le \\textit{rest} + 1. 提示 $1$ 解释 首先考虑必要",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "你可以工作的最大周数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 38,
        "id": 908442,
        "viewCount": 2734
      },
      "uuid": "lIwqeR",
      "videosInfo": []
    }
  }
}
