{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "诸葛青",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/zhu-ge-qing-2/avatar_1612780583.png",
          "userSlug": "xing-you-ji"
        },
        "username": "xing-you-ji"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "## 解法\n``在设计上我们使用两个栈，一个栈用来保存当前栈中的元素，其功能和一个正常的栈没有区别，这个栈记为stackData；另一个栈用于保存每一步的最小值，这个栈记为stackMin。具体的实现方式有两种。``\n### 实现方式一\n\n* ``压入数据规则``\n假设当前数据为``newNum``，先将其压入``stackData``。然后判断``stackMin``是否为空：\n* 如果为空，则``newNum``也压入``stackMin``。\n* 如果不为空，则比较``newNum``和``stackMin``的栈顶元素中哪一个更小：\n* 如果``newNum``更小或两者相等，则``newNum``也压入``stackMin``；\n* 如果``stackMin``中栈顶元素小，则``stackMin``不压入任何内容。\n\n举例：依次压入3、4、5、1、2、1的过程中，stackData和stackMin的变化如下图所示。\n\n![min-stack-1.png](https://pic.leetcode-cn.com/1637679369-TskYtk-min-stack-1.png){:height=“10px” width=“50px”}\n\n\n* ``弹出数据规则``\n* 先在``stackData``中弹出栈顶元素，记为``value``。然后比较当前``stackMin``的栈顶元素和``value``哪一个更小。\n通过上文提到的压入规则可知，``stackMin``中存在的元素是从栈底到栈顶逐渐变小的，``stackMin``栈顶的元素既是``stackMin``栈的最小值，也是当前``stackData``栈的最小值。所以不会出现``value``比``stackMin``的栈顶元素更小的情况，value只可能大于或等于``stackMin``的栈顶元素。\n* 当``value``等于``stackMin``的栈顶元素时，``stackMin``弹出栈顶元素；当``value``大于``stackMin``的栈顶元素时，``stackMin``不弹出栈顶元素；返回``value``。\n很明显可以看出，压入与弹出规则是对应的。\n\n* `` 查询当前栈中的最小值操作``\n由上文的压入数据规则和弹出数据规则可知，``stackMin``始终记录着``stackData``中的最小值，所以，``stackMin``的栈顶元素始终是当前``stackData``中的最小值。\n\n```Go\ntype MinStack struct {\n    //普通栈（后进先出）\n    stackData []int\n    //辅助栈，维护一个最小元素在data栈相对顺序的栈\n    stackMin []int\n    //记录当前两个栈的大小，减少遍历\n    lengthData, lengthMin int\n}\n\n\n/** initialize your data structure here. */\nfunc Constructor() MinStack {\n    return MinStack{\n        stackData : []int{},\n        //加一个int64最大值，可以减少对min栈为空的判断\n        stackMin  : []int{math.MaxInt64},\n        lengthMin : 1,\n    }\n}\n\n\nfunc (this *MinStack) Push(x int)  {\n    this.stackData = append(this.stackData, x)\n    this.lengthData++\n\n    //最小元素大于x时无需加入\n    if this.stackMin[this.lengthMin-1] >= x{\n        this.stackMin = append(this.stackMin, x)\n        this.lengthMin++\n    }    \n}\n\nfunc (this *MinStack) Pop()  {\n    x := this.stackData[this.lengthData-1]\n    //出栈\n    this.stackData = this.stackData[:this.lengthData-1]\n    this.lengthData--\n    //若data栈出栈的元素是最小元素，那么min栈也需要进行弹出操作\n    if this.stackMin[this.lengthMin-1] == x {\n        this.stackMin = this.stackMin[:this.lengthMin-1]\n        this.lengthMin--\n    }\n}\n\n\nfunc (this *MinStack) Top() int {\n    return this.stackData[this.lengthData-1]\n}\n\n\nfunc (this *MinStack) GetMin() int {\n    return this.stackMin[this.lengthMin-1]\n}\n```\n\n### 实现方式二\n* ``压入数据规则``\n假设当前数据为``newNum``，先将其压入``stackData``。然后判断``stackMin``是否为空。\n* 如果为空，则``newNum``也压入``stackMin``；如果不为空，则比较``newNum``和``stackMin``的栈顶元素中哪一个更小：如果newNum更小或两者相等，则``newNum``也压入``stackMin``；如果``stackMin``中栈顶元素小，则把``stackMin``的栈顶元素重复压入``stackMin``，即在栈顶元素上再压入一个栈顶元素。\n举例：依次压入3、4、5、1、2、1的过程中，stackData和stackMin的变化如下图所示。\n\n![min-stack-2.png](https://pic.leetcode-cn.com/1637679698-RkCRdS-min-stack-2.png)\n\n* 弹出数据规则\n在``stackData``中弹出数据，弹出的数据记为``value``；弹出``stackMin``中的栈顶；返回``value``。\n很明显可以看出，压入与弹出规则是对应的\n\n* 查询当前栈中的最小值操作\n由上文的压入数据规则和弹出数据规则可知，``stackMin``始终记录着``stackData``中的最小值，所以``stackMin``的栈顶元素始终是当前``stackData``中的最小值。\n\n```Go\ntype MinStack struct {\n    //保存当前栈的元素\n    stackData []int \n    //保存每一步的最小值\n    stackMin []int\n    //记录当前两个栈的大小，减少遍历\n    lengthData, lengthMin int\n}\n\n\n/** initialize your data structure here. */\nfunc Constructor() MinStack {\n    //给stackMin一个初始元素，是为了减少判断stackMin为空的情况\n    return MinStack{stackMin: []int{math.MaxInt64}, lengthMin: 1}\n}\n\n\nfunc (this *MinStack) Push(x int)  {\n    this.stackData = append(this.stackData, x)\n    //压入栈，将栈顶元素和新元素比较，压入最小的元素\n    this.stackMin = append(this.stackMin, min(x, this.stackMin[this.lengthMin-1]))\n    this.lengthData++\n    this.lengthMin++\n}\n\n\nfunc (this *MinStack) Pop()  {\n    this.stackData = this.stackData[:this.lengthData-1]\n    this.stackMin = this.stackMin[:this.lengthMin-1]    \n    this.lengthMin--; this.lengthData--\n}\n\n\nfunc (this *MinStack) Top() int {\n    return this.stackData[this.lengthData-1]\n}\n\n\nfunc (this *MinStack) GetMin() int {\n    return this.stackMin[this.lengthMin-1]\n}\n\nfunc min(a, b int) int {\n    if a < b {\n        return a\n    }\n    return b\n}\n```\n\n## 总结\n方案一和方案二其实都是用``stackMin``栈保存着``stackData``每一步的最小值。共同点是所有操作的时间复杂度都为``O（1）``、空间复杂度都为``O（n）``。区别是：方案一中``stackMin``压入时稍省空间，但是弹出操作稍费时间；方案二中``stackMin``压入时稍费空间，但是弹出操作稍省时间",
      "createdAt": "2021-11-23T15:03:39.012843+00:00",
      "hitCount": 70,
      "identifier": "rX4X6J",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "golang-zhan-de-zui-xiao-zhi-by-xiaodingc-47b1",
        "title": "【Golang】栈的最小值"
      },
      "position": 43,
      "prev": {
        "__typename": "BriefSolutionNode",
        "slug": "li-yong-pairshi-xian-by-lou-xiao-xin",
        "title": "利用Pair实现"
      },
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "min-stack-lcci"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "lai-zi-zuo-shen-de-jie-ti-si-lu-wo-yi-yi-hyp4",
      "status": "PUBLISHED",
      "summary": "解法\n在设计上我们使用两个栈，一个栈用来保存当前栈中的元素，其功能和一个正常的栈没有区别，这个栈记为stackData；另一个栈用于保存每一步的最小值，这个栈记为stackMin。具体的实现方式有两种。\n实现方式一\n\n压入数据规则\n假设当前数据为newNum，先将其压入stackData。然后判断stackMin是否为",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Monotonic Stack",
          "nameTranslated": "单调栈",
          "slug": "monotonic-stack",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1637679369-TskYtk-min-stack-1.png",
      "title": "来自左神的解题思路，我一一给大家奉上",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1118647,
        "viewCount": 54
      },
      "uuid": "rX4X6J",
      "videosInfo": []
    }
  }
}
