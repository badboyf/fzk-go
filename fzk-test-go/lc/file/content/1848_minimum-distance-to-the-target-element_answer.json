{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路与算法**\n\n我们对 $\\textit{nums}$ 进行遍历，并在遍历的过程中用 $\\textit{res}$ 来维护满足要求的 $|i - \\textit{start}|$ 的最小值。\n\n注意 $\\textit{res}$ 的初始值需要大于等于 $|i - \\textit{start}|$ 的最大可能值，即 $\\textit{nums.length} - 1$。在下面的代码中，我们选择值 $\\textit{nums.length}$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int getMinDistance(vector<int>& nums, int target, int start) {\n        int res = nums.size();\n        for (int i = 0; i < nums.size(); ++i){\n            if (nums[i] == target){\n                res = min(res, abs(i - start));\n            }\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:\n        res = len(nums)\n        for i, num in enumerate(nums):\n            if num == target:\n                res = min(res, abs(i - start))\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，即为遍历数组的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-05-02T09:52:06.059662+00:00",
      "hitCount": 1439,
      "identifier": "bqqcMF",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "bao-li-by-mei-56-e8l4",
        "title": "一次遍历"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-distance-to-the-target-element"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "dao-mu-biao-yuan-su-de-zui-xiao-ju-chi-b-v4ce",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 思路与算法 我们对 $\\textit{nums}$ 进行遍历，并在遍历的过程中用 $\\textit{res}$ 来维护满足要求的 $|i - \\textit{start}|$ 的最小值。 注意 $\\textit{res}$ 的初始值需要大于等于 $|i - \\textit{start}|$ 的最大可能值，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "到目标元素的最小距离",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 4,
        "id": 755634,
        "viewCount": 1247
      },
      "uuid": "bqqcMF",
      "videosInfo": []
    }
  }
}
