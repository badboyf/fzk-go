{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一： 模拟法\n\n**思路和算法**\n\n直接模拟从牌组中取牌的过程就可以了。举个例子，如果从牌组中以 `[0, 2, 4, ...]` 的顺序取牌，我们只需要把最小的牌放在下标为 `0` 的地方，第二小的牌放在下标为 `1` 的地方，第三小的牌放在下标为 `4` 的地方，依次类推即可。\n\n```java [solution1-Java]\nclass Solution {\n    public int[] deckRevealedIncreasing(int[] deck) {\n        int N = deck.length;\n        Deque<Integer> index = new LinkedList();\n        for (int i = 0; i < N; ++i)\n            index.add(i);\n\n        int[] ans = new int[N];\n        Arrays.sort(deck);\n        for (int card: deck) {\n            ans[index.pollFirst()] = card;\n            if (!index.isEmpty())\n                index.add(index.pollFirst());\n        }\n\n        return ans;\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def deckRevealedIncreasing(self, deck):\n        N = len(deck)\n        index = collections.deque(range(N))\n        ans = [None] * N\n\n        for card in sorted(deck):\n            ans[index.popleft()] = card\n            if index:\n                index.append(index.popleft())\n\n        return ans\n```\n\n**复杂度分析**\n\n* 时间复杂度： $O(N \\log N)$，其中 $N$ 是牌组的大小。\n\n* 空间复杂度： $O(N)$。",
      "createdAt": "2019-07-22T09:03:34.914573+00:00",
      "hitCount": 8515,
      "identifier": "pFJzUw",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "950an-di-zeng-shun-xu-xian-shi-qia-pai-k-43kw",
        "title": "950.按递增顺序显示卡牌 看动图写代码，so easy!"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "reveal-cards-in-increasing-order"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "an-di-zeng-shun-xu-xian-shi-qia-pai-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法一： 模拟法\n思路和算法\n直接模拟从牌组中取牌的过程就可以了。举个例子，如果从牌组中以 [0, 2, 4, ...] 的顺序取牌，我们只需要把最小的牌放在下标为 0 的地方，第二小的牌放在下标为 1 的地方，第三小的牌放在下标为 4 的地方，依次类推即可。\n复杂度分析\n\n\n时间复杂度： $O(N \\log N)$，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "按递增顺序显示卡牌",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 9,
        "id": 15988,
        "viewCount": 6077
      },
      "uuid": "pFJzUw",
      "videosInfo": []
    }
  }
}
