{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：深度优先搜索\n\n我们可以使用深度优先搜索的方法解决这个问题。\n\n我们从根节点开始进行搜索，在搜索的同时记录当前节点的深度 `dep`。我们维护两个全局变量 `maxdep` 和 `total`，其中 `maxdep` 表示搜索到的节点的最大深度，`total` 表示搜索到的深度等于 `maxdep` 的节点的权值之和。\n\n当我们搜索到一个新的节点 `x` 时，会有以下三种情况：\n\n- 节点 `x` 的深度 `dep` 小于 `maxdep`，那么我们可以忽略节点 `x`，继续进行搜索；\n\n- 节点 `x` 的深度 `dep` 等于 `maxdep`，那么我们将节点 `x` 的权值添加到 `total` 中；\n\n- 节点 `x` 的深度 `dep` 大于 `maxdep`，此时我们找到了一个深度更大的节点，因此需要将 `maxdep` 置为 `dep`，并将 `total` 置为节点 `x` 的权值。\n\n在深度优先搜索结束之后，深度最大的叶子节点的权值之和即存储在 `total` 中。\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    int maxdep = -1;\n    int total = 0;\n\npublic:\n    void dfs(TreeNode* node, int dep) {\n        if (!node) {\n            return;\n        }\n        if (dep > maxdep) {\n            maxdep = dep;\n            total = node->val;\n        }\n        else if (dep == maxdep) {\n            total += node->val;\n        }\n        dfs(node->left, dep + 1);\n        dfs(node->right, dep + 1);\n    }\n\n    int deepestLeavesSum(TreeNode* root) {\n        dfs(root, 0);\n        return total;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def __init__(self):\n        self.maxdep = -1\n        self.total = 0\n\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        def dfs(node, dep):\n            if not node:\n                return\n            if dep > self.maxdep:\n                self.maxdep, self.total = dep, node.val\n            elif dep == self.maxdep:\n                self.total += node.val\n            dfs(node.left, dep + 1)\n            dfs(node.right, dep + 1)\n        \n        dfs(root, 0)\n        return self.total\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树中的节点个数。\n\n- 空间复杂度：$O(H)$，其中 $H$ 是树的高度（最大深度）。\n\n#### 方法二：广度优先搜索\n\n我们同样可以使用广度优先搜索的方法解决这个问题。\n\n除了搜索的顺序不同之外，实现的细节与深度优先搜索的方法完全相同。\n\n```C++ [sol2-C++]\nusing PTI = pair<TreeNode*, int>;\n\nclass Solution {\npublic:\n    int deepestLeavesSum(TreeNode* root) {\n        queue<PTI> q;\n        q.emplace(root, 0);\n        int maxdep = -1, total = 0;\n        while (!q.empty()) {\n            TreeNode* node = q.front().first;\n            int dep = q.front().second;\n            q.pop();\n            if (dep > maxdep) {\n                maxdep = dep;\n                total = node->val;\n            }\n            else if (dep == maxdep) {\n                total += node->val;\n            }\n            if (node->left) {\n                q.emplace(node->left, dep + 1);\n            }\n            if (node->right) {\n                q.emplace(node->right, dep + 1);\n            }\n        }\n        return total;\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        q = collections.deque([(root, 0)])\n        maxdep, total = -1, 0\n        while len(q) > 0:\n            node, dep = q.pop()\n            if dep > maxdep:\n                maxdep, total = dep, node.val\n            elif dep == maxdep:\n                total += node.val\n            if node.left:\n                q.append((node.left, dep + 1))\n            if node.right:\n                q.append((node.right, dep + 1))\n        return total\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 是树中的节点个数。\n\n- 空间复杂度：$O(N)$。",
      "createdAt": "2020-02-19T03:04:53.880070+00:00",
      "hitCount": 11063,
      "identifier": "NHG4Qs",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "ceng-shu-zui-shen-zi-jie-dian-de-he-xiao-oh7u",
        "title": "层数最深子节点的和----小菜一碟"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "deepest-leaves-sum"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "ceng-shu-zui-shen-xie-zi-jie-dian-de-he-by-leetc-2",
      "status": "PUBLISHED",
      "summary": " 方法一：深度优先搜索\n我们可以使用深度优先搜索的方法解决这个问题。\n我们从根节点开始进行搜索，在搜索的同时记录当前节点的深度 dep。我们维护两个全局变量 maxdep 和 total，其中 maxdep 表示搜索到的节点的最大深度，total 表示搜索到的深度等于 maxdep 的节点的权值之和。\n当我们搜索到一个",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "层数最深叶子节点的和",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 18,
        "id": 101761,
        "viewCount": 8402
      },
      "uuid": "NHG4Qs",
      "videosInfo": []
    }
  }
}
