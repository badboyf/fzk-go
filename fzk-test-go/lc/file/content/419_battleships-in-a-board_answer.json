{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "潇晨",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/chen-wei-f/avatar_1600074453.png",
          "userSlug": "chen-wei-f"
        },
        "username": "chen-wei-f"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### [419. 甲板上的战舰](https://leetcode-cn.com/problems/battleships-in-a-board/) （medium）\n\n- 思路：寻找船头的个数\n- 复杂度：时间复杂度`O(n^2)`，空间复杂度`O(1)`\n\n\n\n```\nX..X\n...X\n...X\n```\n\njs:\n\n```js\nfunction countBattleships(board) {\n    const lenX = board.length, lenY = board[0].length\n    let count = 0\n    for (let i = 0; i < lenX; i++) {\n        for (let j = 0; j < lenY; j++) {\n            //左边和上面不是X 则是船头\n            if ((board[i][j] == 'X') && (i == 0 || board[i - 1][j] == '.') && (j == 0 || board[i][j - 1] == '.')) {\n                ++count;\n            }\n\n        }\n    }\n    return count\n};\n\n\n```\n\njava：\n\n```java\nclass Solution {\n    public int countBattleships(char[][] board) {\n        int count=0,i,j;\n        for(i=0;i<board.length;++i) {\n            for(j=0;j<board[0].length;++j){\n                if((board[i][j]=='X')&&(i==0||board[i-1][j]=='.')&&(j==0||board[i][j-1]=='.')) {\n                    ++count;\n                }\n            }\n        }\n        return count;\n    }\n}\n```\n\n\n#### 视频教程（高效学习）:[点击学习](https://xiaochen1024.com/series/6196129fc1553b002e57bef5/6196208ec1553b002e57bef6)\n\n#### 目录：\n\n[1.开篇介绍](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18)\n\n[2.时间空间复杂度](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/619635dcc1553b002e57bf12)\n\n[3.动态规划](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61963bcdc1553b002e57bf13)\n\n[4.贪心](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61963ce5c1553b002e57bf14)\n\n[5.二分查找](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61963e36c1553b002e57bf15)\n\n[6.深度优先&广度优先](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61964050c1553b002e57bf16)\n\n[7.双指针](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/619640cec1553b002e57bf17)\n\n[8.滑动窗口](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61964164c1553b002e57bf18)\n\n[9.位运算](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196420ac1553b002e57bf19)\n\n[10.递归&分治](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61964285c1553b002e57bf1a)\n\n[11剪枝&回溯](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/61964326c1553b002e57bf1b)\n\n[12.堆](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/619643e1c1553b002e57bf1c)\n\n[13.单调栈](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196ce3ac1553b002e57bf1f)\n\n[14.排序算法](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196ced6c1553b002e57bf20)\n\n[15.链表](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196cf7fc1553b002e57bf21)\n\n[16.set&map](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196cfc6c1553b002e57bf22)\n\n[17.栈](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d002c1553b002e57bf23)\n\n[18.队列](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d065c1553b002e57bf24)\n\n[19.数组](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d0f9c1553b002e57bf25)\n\n[20.字符串](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d19cc1553b002e57bf26)\n\n[21.树](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d279c1553b002e57bf27)\n\n[22.字典树](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d2c4c1553b002e57bf28)\n\n[23.并查集](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d34dc1553b002e57bf29)\n\n[24.其他类型题](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18/6196d3adc1553b002e57bf2a)",
      "createdAt": "2021-11-25T00:27:40.143742+00:00",
      "hitCount": 54,
      "identifier": "6f4MSf",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-ci-sao-miao-o1kong-jian-by-jushuai_lf-2s2q",
        "title": "一次扫描，O(1)空间"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "battleships-in-a-board"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "419-jia-ban-shang-de-zhan-jian-shu-chuan-7q6g",
      "status": "PUBLISHED",
      "summary": "419. 甲板上的战舰 （medium）\n\n思路：寻找船头的个数\n复杂度：时间复杂度O(n^2)，空间复杂度O(1)\n\njs:\njava：\n 视频教程（高效学习）:点击学习\n 目录：\n1.开篇介绍\n2.时间空间复杂度\n3.动态规划\n4.贪心\n5.二分查找\n6.深度优先&广度优先\n7.双指针\n8.滑动窗口\n9.位运算",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "419. 甲板上的战舰（数船头）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 1120884,
        "viewCount": 47
      },
      "uuid": "6f4MSf",
      "videosInfo": []
    }
  }
}
