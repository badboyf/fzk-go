{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：动态规划\n\n\n我们用 `f(start, n)` 表示骑士从数字 `start` 开始，跳了 `n - 1` 步得到不同的 `n` 位数字的个数。`f(start, n)` 可以从 `f(x, n - 1)` 转移而来，其中 `x` 是任意一个可以一步跳到 `start` 的数字。例如当 `start = 1`，时，`x` 可以为 `6` 或 `8`，因此有 `f(1, n) = f(6, n - 1) + f(8, n - 1)`。\n\n最终的答案即为 `f(0, N) + f(1, N) + ... + f(9, N)`。我们可以使用滚动数组减少空间复杂度，这是因为 `f(start, n)` 只和 `f(x, n - 1)` 有关，因此在计算 `f(start, n)` 时，所有第二维小于 `n - 1` 的 `f` 值都不必存储。也就是说，我们只要实时存储当前正在计算的所有 `f` 值（`n` 位数字）以及上一个状态的 `f` 值（`n - 1` 位数字）即可。在 `Java` 代码中，我们使用 `dp[0][start]` 和 `dp[1][start]` 交替表示当前和上一个状态的 `f` 值。在 `Python` 代码中，我们使用 `dp2` 数组计算出当前的 `f` 值后，直接覆盖存储了上一个状态的 `f` 值的 `dp` 数组。\n\n```Java [sol1]\nclass Solution {\n    public int knightDialer(int N) {\n        int MOD = 1_000_000_007;\n        int[][] moves = new int[][]{\n            {4,6},{6,8},{7,9},{4,8},{3,9,0},\n            {},{1,7,0},{2,6},{1,3},{2,4}};\n\n        int[][] dp = new int[2][10];\n        Arrays.fill(dp[0], 1);\n        for (int hops = 0; hops < N-1; ++hops) {\n            Arrays.fill(dp[~hops & 1], 0);\n            for (int node = 0; node < 10; ++node)\n                for (int nei: moves[node]) {\n                    dp[~hops & 1][nei] += dp[hops & 1][node];\n                    dp[~hops & 1][nei] %= MOD;\n                }\n        }\n\n        long ans = 0;\n        for (int x: dp[~N & 1])\n            ans += x;\n        return (int) (ans % MOD);\n    }\n}\n```\n\n```Python [sol1]\nclass Solution(object):\n    def knightDialer(self, N):\n        MOD = 10**9 + 7\n        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[],\n                     [1,7,0],[2,6],[1,3],[2,4]]\n\n        dp = [1] * 10\n        for hops in xrange(N-1):\n            dp2 = [0] * 10\n            for node, count in enumerate(dp):\n                for nei in moves[node]:\n                    dp2[nei] += count\n                    dp2[nei] %= MOD\n            dp = dp2\n        return sum(dp) % MOD\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$。\n\n* 空间复杂度：如果使用滚动数组，则空间复杂度为 $O(1)$，也可以看成 $O(10)$。否则空间复杂度为 $O(N)$。",
      "createdAt": "2019-08-06T05:50:08.314470+00:00",
      "hitCount": 7325,
      "identifier": "vZzvrA",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dong-tai-gui-hua-4xing-ji-jian-100935-qi-xu27",
        "title": "动态规划，4行极简100%（935. 骑士拨号器）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "knight-dialer"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "qi-shi-bo-hao-qi-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：动态规划\n我们用 f(start, n) 表示骑士从数字 start 开始，跳了 n - 1 步得到不同的 n 位数字的个数。f(start, n) 可以从 f(x, n - 1) 转移而来，其中 x 是任意一个可以一步跳到 start 的数字。例如当 start = 1，时，x 可以为 6 或 8，因此有",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "骑士拨号器",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 8,
        "id": 18749,
        "viewCount": 5205
      },
      "uuid": "vZzvrA",
      "videosInfo": []
    }
  }
}
