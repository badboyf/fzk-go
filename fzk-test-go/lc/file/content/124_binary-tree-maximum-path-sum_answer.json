{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![124. 二叉树中的最大路径.mp4](0fc716bb-576b-482f-8ec4-a1659b427b4f)\n\n### 📖 文字题解\n#### 方法一：递归\n\n首先，考虑实现一个简化的函数 `maxGain(node)`，该函数计算二叉树中的一个节点的最大贡献值，具体而言，就是在以该节点为根节点的子树中寻找以该节点为起点的一条路径，使得该路径上的节点值之和最大。\n\n具体而言，该函数的计算如下。\n\n- 空节点的最大贡献值等于 $0$。\n\n- 非空节点的最大贡献值等于节点值与其子节点中的最大贡献值之和（对于叶节点而言，最大贡献值等于节点值）。\n\n例如，考虑如下二叉树。\n\n```\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\n```\n\n叶节点 $9$、$15$、$7$ 的最大贡献值分别为 $9$、$15$、$7$。\n\n得到叶节点的最大贡献值之后，再计算非叶节点的最大贡献值。节点 $20$ 的最大贡献值等于 $20+\\max(15,7)=35$，节点 $-10$ 的最大贡献值等于 $-10+\\max(9,35)=25$。\n\n上述计算过程是递归的过程，因此，对根节点调用函数 `maxGain`，即可得到每个节点的最大贡献值。\n\n根据函数 `maxGain` 得到每个节点的最大贡献值之后，如何得到二叉树的最大路径和？对于二叉树中的一个节点，该节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值，如果子节点的最大贡献值为正，则计入该节点的最大路径和，否则不计入该节点的最大路径和。维护一个全局变量 `maxSum` 存储最大路径和，在递归过程中更新 `maxSum` 的值，最后得到的 `maxSum` 的值即为二叉树中的最大路径和。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/124/1.PNG),![fig2](https://assets.leetcode-cn.com/solution-static/124/2.PNG),![fig3](https://assets.leetcode-cn.com/solution-static/124/3.PNG),![fig4](https://assets.leetcode-cn.com/solution-static/124/4.PNG),![fig5](https://assets.leetcode-cn.com/solution-static/124/5.PNG),![fig6](https://assets.leetcode-cn.com/solution-static/124/6.PNG),![fig7](https://assets.leetcode-cn.com/solution-static/124/7.PNG)>\n\n```Java [sol1-Java]\nclass Solution {\n    int maxSum = Integer.MIN_VALUE;\n\n    public int maxPathSum(TreeNode root) {\n        maxGain(root);\n        return maxSum;\n    }\n\n    public int maxGain(TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n        \n        // 递归计算左右子节点的最大贡献值\n        // 只有在最大贡献值大于 0 时，才会选取对应子节点\n        int leftGain = Math.max(maxGain(node.left), 0);\n        int rightGain = Math.max(maxGain(node.right), 0);\n\n        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n        int priceNewpath = node.val + leftGain + rightGain;\n\n        // 更新答案\n        maxSum = Math.max(maxSum, priceNewpath);\n\n        // 返回节点的最大贡献值\n        return node.val + Math.max(leftGain, rightGain);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def __init__(self):\n        self.maxSum = float(\"-inf\")\n\n    def maxPathSum(self, root: TreeNode) -> int:\n        def maxGain(node):\n            if not node:\n                return 0\n\n            # 递归计算左右子节点的最大贡献值\n            # 只有在最大贡献值大于 0 时，才会选取对应子节点\n            leftGain = max(maxGain(node.left), 0)\n            rightGain = max(maxGain(node.right), 0)\n            \n            # 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n            priceNewpath = node.val + leftGain + rightGain\n            \n            # 更新答案\n            self.maxSum = max(self.maxSum, priceNewpath)\n        \n            # 返回节点的最大贡献值\n            return node.val + max(leftGain, rightGain)\n   \n        maxGain(root)\n        return self.maxSum\n```\n\n```C++ [sol1-C++]\nclass Solution {\nprivate:\n    int maxSum = INT_MIN;\n\npublic:\n    int maxGain(TreeNode* node) {\n        if (node == nullptr) {\n            return 0;\n        }\n        \n        // 递归计算左右子节点的最大贡献值\n        // 只有在最大贡献值大于 0 时，才会选取对应子节点\n        int leftGain = max(maxGain(node->left), 0);\n        int rightGain = max(maxGain(node->right), 0);\n\n        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n        int priceNewpath = node->val + leftGain + rightGain;\n\n        // 更新答案\n        maxSum = max(maxSum, priceNewpath);\n\n        // 返回节点的最大贡献值\n        return node->val + max(leftGain, rightGain);\n    }\n\n    int maxPathSum(TreeNode* root) {\n        maxGain(root);\n        return maxSum;\n    }\n};\n```\n\n```golang [sol1-Golang]\nfunc maxPathSum(root *TreeNode) int {\n    maxSum := math.MinInt32\n    var maxGain func(*TreeNode) int\n    maxGain = func(node *TreeNode) int {\n        if node == nil {\n            return 0\n        }\n\n        // 递归计算左右子节点的最大贡献值\n        // 只有在最大贡献值大于 0 时，才会选取对应子节点\n        leftGain := max(maxGain(node.Left), 0)\n        rightGain := max(maxGain(node.Right), 0)\n\n        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n        priceNewPath := node.Val + leftGain + rightGain\n\n        // 更新答案\n        maxSum = max(maxSum, priceNewPath)\n\n        // 返回节点的最大贡献值\n        return node.Val + max(leftGain, rightGain)\n    }\n    maxGain(root)\n    return maxSum\n}\n\nfunc max(x, y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```csharp [sol1-C#]\npublic class Solution \n{\n    int maxSum = int.MinValue;\n\n    public int MaxPathSum(TreeNode root) \n    {\n        MaxGain(root);\n        return maxSum;\n    }\n    \n    int MaxGain(TreeNode node) \n    {\n        if (node == null) \n        {\n            return 0;\n        }\n        \n        // 递归计算左右子节点的最大贡献值\n        // 只有在最大贡献值大于 0 时，才会选取对应子节点\n        int leftGain = Math.Max(MaxGain(node.left), 0);\n        int rightGain = Math.Max(MaxGain(node.right), 0);\n\n        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n        int priceNewpath = node.val + leftGain + rightGain;\n\n        // 更新答案\n        maxSum = Math.Max(maxSum, priceNewpath);\n\n        // 返回节点的最大贡献值\n        return node.val + Math.Max(leftGain, rightGain);\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树中的节点个数。对每个节点访问不超过 $2$ 次。\n\n* 空间复杂度：$O(N)$，其中 $N$ 是二叉树中的节点个数。空间复杂度主要取决于递归调用层数，最大层数等于二叉树的高度，最坏情况下，二叉树的高度等于二叉树中的节点个数。",
      "createdAt": "2020-06-20T13:47:08.989009+00:00",
      "hitCount": 145301,
      "identifier": "zXzD0y",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "er-cha-shu-zhong-de-zui-da-lu-jing-he-by-ikaruga",
        "title": "【二叉树中的最大路径和】递归，条理清晰"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "binary-tree-maximum-path-sum"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 157,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 21,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-cha-shu-zhong-de-zui-da-lu-jing-he-by-leetcode-",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 方法一：递归 首先，考虑实现一个简化的函数 maxGain(node)，该函数计算二叉树中的一个节点的最大贡献值，具体而言，就是在以该节点为根节点的子树中寻找以该节点为起点的一条路径，使得该路径上的节点值之和最大。 具体而言，该函数的计算如下。 空节点的最大贡献值等于 $0$。 非空节点的最",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二叉树中的最大路径和",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 203,
        "id": 297005,
        "viewCount": 94577
      },
      "uuid": "zXzD0y",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/7152A69756054C04B8D0B995C15BBAD9-6-2.png",
          "duration": 507.8827,
          "videoId": "a9cdc232f44c4b4d87bf2badb3d28b3c"
        }
      ]
    }
  }
}
