{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：按要求构建\n\n**思路与算法**\n\n我们可以构建一个与原数组 $\\textit{nums}$ 等长的新数组，同时令新数组中下标为 $i$ 的元素等于 $\\textit{nums}[\\textit{nums}[i]]$。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> buildArray(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> ans;\n        for (int i = 0; i < n; ++i){\n            ans.push_back(nums[nums[i]]);\n        }\n        return ans;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def buildArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        return [nums[nums[_]] for _ in range(n)]\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。即为构建新数组的时间复杂度。\n\n- 空间复杂度：$O(1)$，输出数组不计入空间复杂度。\n\n\n#### 方法二：原地构建\n\n**思路与算法**\n\n我们也可以直接对原数组 $\\textit{nums}$ 进行修改。\n\n为了使得构建过程可以完整进行，我们需要让 $\\textit{nums}$ 中的每个元素 $\\textit{nums}[i]$ 能够同时存储「当前值」（即 $\\textit{nums}[i]$）和「最终值」（即 $\\textit{nums}[\\textit{nums}[i]]$）。\n\n我们注意到 $\\textit{nums}$ 中元素的取值范围为 $[0, 999]$ 闭区间，这意味着 $\\textit{nums}$ 中的每个元素的「当前值」和「最终值」都在 $[0, 999]$ 闭区间内。\n\n因此，我们可以使用类似「$1000$ 进制」的思路来表示每个元素的「当前值」和「最终值」。对于每个元素，我们用它除以 $1000$ 的商数表示它的「最终值」，而用余数表示它的「当前值」。\n\n那么，我们首先遍历 $\\textit{nums}$，计算每个元素的「最终值」，并乘以 $1000$ 加在该元素上。随后，我们再次遍历数组，并将每个元素的值除以 $1000$ 保留其商数。此时 $\\textit{nums}$ 即为构建完成的数组，我们返回该数组作为答案。\n\n**细节**\n\n在计算 $\\textit{nums}[i]$ 的「最终值」并修改该元素时，我们需要计算**修改前** $\\textit{nums}[\\textit{nums}[i]]$ 的值，而 $\\textit{nums}$ 中下标为 $\\textit{nums}[i]$ 的元素可能已被修改，因此我们需要将取下标得到的值对 $1000$ 取模得到「最终值」。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> buildArray(vector<int>& nums) {\n        int n = nums.size();\n        // 第一次遍历编码最终值\n        for (int i = 0; i < n; ++i){\n            nums[i] += 1000 * (nums[nums[i]] % 1000);\n        }\n        // 第二次遍历修改为最终值\n        for (int i = 0; i < n; ++i){\n            nums[i] /= 1000;\n        }\n        return nums;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def buildArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        # 第一次遍历编码最终值\n        for i in range(n):\n            nums[i] += 1000 * (nums[nums[i]] % 1000) \n        # 第二次遍历修改为最终值\n        for i in range(n):\n            nums[i] //= 1000\n        return nums\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。我们遍历了两次 $\\textit{nums}$ 数组并进行修改，每次遍历并修改的时间复杂度均为 $O(n)$。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-07-04T06:44:20.194606+00:00",
      "hitCount": 3543,
      "identifier": "Qcgz5q",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "mapyi-xing-dai-ma-by-zhanhongzhu-9dl6",
        "title": "map一行代码"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "build-array-from-permutation"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "ji-yu-pai-lie-gou-jian-shu-zu-by-leetcod-gjcn",
      "status": "PUBLISHED",
      "summary": "方法一：按要求构建 思路与算法 我们可以构建一个与原数组 $\\textit{nums}$ 等长的新数组，同时令新数组中下标为 $i$ 的元素等于 $\\textit{nums}[\\textit{nums}[i]]$。 代码 C++ [sol1-C++] class Solution { public:     vecto",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "基于排列构建数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 9,
        "id": 858017,
        "viewCount": 2944
      },
      "uuid": "Qcgz5q",
      "videosInfo": []
    }
  }
}
