{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：贪心\n\n**分析**\n\n我们构造出所有小于等于 $k$ 的斐波那契数，随后贪心地从大到小选取即可。\n\n**正确性证明**\n\n我们只需要证明：\n\n> 对于任意给定的 $k$，存在一种最优的选择方法，其中我们选择了不超过 $k$ 的最大斐波那契数。\n\n如果我们可以证明上述结论，那么对于给定的 $k$，我们就可以选择不超过 $k$ 的最大斐波那契数。剩下的和为 $k_0$，我们继续选择不超过 $k_0$ 的最大斐波那契数。以此类推，就是我们上文「分析」中的贪心选取方法。\n\n那么我们如何证明这个结论呢？证明的过程分为三步，感兴趣的读者可以仔细阅读：\n\n- 第一步：证明 **我们不会选取连续两个斐波那契数**。\n\n    我们用 $F_i$ 表示第 $i$ 个斐波那契数。假设我们选取了 $F_x$ 和 $F_{x+1}$，根据斐波那契数的定义，有：\n\n    $$\n    F_{x+2} = F_x + F_{x+1}\n    $$\n\n    因此我们可以用第 $x+2$ 个斐波那契数替代它们，选择的数目减少一，得到了更优的答案。\n\n- 第二步：证明 **我们不会选取同一个斐波那契数超过一次**。\n\n    假设我们选取了至少两次 $F_x$。如果 $x \\leq 2$，那么我们可以用 $F_3=2$ 来替代两个 $F_x=1$；如果 $x>1$，那么我们可以用 $F_{x-2}$ 和 $F_{x+1}$ 来替代两个 $F_x$，选择的数目不变，这是因为：\n    \n    $$\n    2F_x = F_{x-2} + F_{x-1} + F_x = F_{x-2} + F_{x+1}\n    $$\n    \n    并且有更大的可能通过「第一步」得到更优的答案。\n\n- 第三步：证明我们需要的结论，即 **对于任意给定的 $k$，我们需要选择不超过 $k$ 的最大斐波那契数**。\n\n    假设不超过 $k$ 的最大斐波那契数为 $F_m$，但我们没有选择它，而是在 $F_1, F_2, \\cdots, F_{m-1}$ 中进行选择。根据我们「第一步」和「第二步」的证明，我们不会选取连续两个斐波那契数，并且同一个数只会选取最多一次。因此我们用 $F_1, F_2, \\cdots, F_{m-1}$ 能够构造出的最大数为：\n\n    $$\n    \\begin{cases}\n    x_m &=& F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_4 + F_2 &, 当 m 为偶数 \\\\\n    x_m &=& F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_3 + F_1 &, 当 m 为奇数\n    \\end{cases}\n    $$\n\n    当 $m$ 为奇数时，等式的值为：\n\n    $$\n    \\begin{aligned}\n    x_m &= F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_4 + F_2 + F_1 - F_1\\\\\n    &= F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_4 + F_3 - F_1\\\\\n    &= F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_5 - F_1\\\\\n    &= \\cdots = F_m - 1\\\\\n    &< F_m\n    \\end{aligned}\n    $$\n\n    它们无法构造出大于等于 $F_m$ 的数，也就无法构造出 $k$ 了。因此我们必须选择 $F_m$。\n\n    当 $m$ 为偶数时，等式的值为：\n\n    $$\n    \\begin{aligned}\n    x_m &= F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_3 + F_1\\\\\n    &= F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_3 + F_2\\\\\n    &= F_{m-1} + F_{m-3} + F_{m-5} + \\cdots + F_4\\\\\n    &= \\cdots = F_m\n    \\end{aligned}\n    $$\n\n    它们的和恰好等于 $F_m$。因此不如直接选择 $F_m$，这样选择的数目可以减少。\n\n    这样以来，对于任意给定的 $k$，我们选择不超过 $k$ 的最大斐波那契数 $F_m$ 总是更优的。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findMinFibonacciNumbers(int k) {\n        int a = 1, b = 1;\n        vector<int> fibo = {a, b};\n        while (a + b <= k) {\n            fibo.push_back(a + b);\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        int ans = 0;\n        for (int i = fibo.size() - 1; i >= 0; --i) {\n            if (k >= fibo[i]) {\n                ++ans;\n                k -= fibo[i];\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findMinFibonacciNumbers(int k) {\n        int a = 1, b = 1;\n        List<Integer> fibo = new ArrayList<Integer>(Arrays.asList(a, b));\n        while (a + b <= k) {\n            fibo.add(a + b);\n            int c = a + b;\n            a = b;\n            b = c;\n        }\n        int ans = 0;\n        for (int i = fibo.size() - 1; i >= 0; --i) {\n            if (k >= fibo.get(i)) {\n                ++ans;\n                k -= fibo.get(i);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findMinFibonacciNumbers(self, k: int) -> int:\n        a = b = 1\n        fibo = [a, b]\n        while a + b <= k:\n            fibo.append(a + b)\n            a, b = b, a + b\n        ans = 0\n        for num in fibo[::-1]:\n            if k >= num:\n                ans += 1\n                k -= num\n        return ans\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(44)$。不超过 $10^9$ 的斐波那契数一共有 $44$ 个。\n\n- 空间复杂度：$O(44)$。",
      "createdAt": "2020-04-21T03:41:54.158345+00:00",
      "hitCount": 6054,
      "identifier": "i7Z6qd",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "javadi-gui-13xing-ji-bai-100-by-maplesto-l5y6",
        "title": "Java递归,13行击败100%"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 25,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "he-wei-k-de-zui-shao-fei-bo-na-qi-shu-zi-shu-mu-by",
      "status": "PUBLISHED",
      "summary": "方法一：贪心 分析 我们构造出所有小于等于 $k$ 的斐波那契数，随后贪心地从大到小选取即可。 正确性证明 我们只需要证明： 对于任意给定的 $k$，存在一种最优的选择方法，其中我们选择了不超过 $k$ 的最大斐波那契数。 如果我们可以证明上述结论，那么对于给定的 $k$，我们就可以选择不超过 $k$ 的最大斐波那契数",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Greedy",
          "nameTranslated": "贪心",
          "slug": "greedy",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "和为 K 的最少斐波那契数字数目",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 23,
        "id": 212767,
        "viewCount": 4574
      },
      "uuid": "i7Z6qd",
      "videosInfo": []
    }
  }
}
