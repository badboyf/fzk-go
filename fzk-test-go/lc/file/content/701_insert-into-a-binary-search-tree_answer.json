{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路与算法**\n\n首先回顾二叉搜索树的性质：对于任意节点 $\\textit{root}$ 而言，左子树（如果存在）上所有节点的值均小于 $\\textit{root.val}$，右子树（如果存在）上所有节点的值均大于 $\\textit{root.val}$，且它们都是二叉搜索树。\n\n因此，当将 $\\textit{val}$ 插入到以 $\\textit{root}$ 为根的子树上时，根据  $\\textit{val}$ 与 $\\textit{root.val}$ 的大小关系，就可以确定要将 $\\textit{val}$ 插入到哪个子树中。\n- 如果该子树不为空，则问题转化成了将 $\\textit{val}$ 插入到对应子树上。\n- 否则，在此处新建一个以 $\\textit{val}$ 为值的节点，并链接到其父节点 $\\textit{root}$ 上。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (root == nullptr) {\n            return new TreeNode(val);\n        }\n        TreeNode* pos = root;\n        while (pos != nullptr) {\n            if (val < pos->val) {\n                if (pos->left == nullptr) {\n                    pos->left = new TreeNode(val);\n                    break;\n                } else {\n                    pos = pos->left;\n                }\n            } else {\n                if (pos->right == nullptr) {\n                    pos->right = new TreeNode(val);\n                    break;\n                } else {\n                    pos = pos->right;\n                }\n            }\n        }\n        return root;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        if (root == null) {\n            return new TreeNode(val);\n        }\n        TreeNode pos = root;\n        while (pos != null) {\n            if (val < pos.val) {\n                if (pos.left == null) {\n                    pos.left = new TreeNode(val);\n                    break;\n                } else {\n                    pos = pos.left;\n                }\n            } else {\n                if (pos.right == null) {\n                    pos.right = new TreeNode(val);\n                    break;\n                } else {\n                    pos = pos.right;\n                }\n            }\n        }\n        return root;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def insertIntoBST(self, root: TreeNode, val: int) -> TreeNode:\n        if not root:\n            return TreeNode(val)\n        \n        pos = root\n        while pos:\n            if val < pos.val:\n                if not pos.left:\n                    pos.left = TreeNode(val)\n                    break\n                else:\n                    pos = pos.left\n            else:\n                if not pos.right:\n                    pos.right = TreeNode(val)\n                    break\n                else:\n                    pos = pos.right\n        \n        return root\n```\n\n```JavaScript [sol1-JavaScript]\nvar insertIntoBST = function(root, val) {\n    if (root === null) {\n        return new TreeNode(val);\n    }\n    let pos = root;\n    while (pos !== null) {\n        if (val < pos.val) {\n            if (pos.left === null) {\n                pos.left = new TreeNode(val);\n                break;\n            } else {\n                pos = pos.left;\n            }\n        } else {\n            if (pos.right === null) {\n                pos.right = new TreeNode(val);\n                break;\n            } else {\n                pos = pos.right;\n            }\n        }\n    }\n    return root;\n};\n```\n\n```Golang [sol1-Golang]\nfunc insertIntoBST(root *TreeNode, val int) *TreeNode {\n    if root == nil {\n        return &TreeNode{Val: val}\n    }\n    p := root\n    for p != nil {\n        if val < p.Val {\n            if p.Left == nil {\n                p.Left = &TreeNode{Val: val}\n                break\n            }\n            p = p.Left\n        } else {\n            if p.Right == nil {\n                p.Right = &TreeNode{Val: val}\n                break\n            }\n            p = p.Right\n        }\n    }\n    return root\n}\n```\n\n```C [sol1-C]\nstruct TreeNode* createTreeNode(int val) {\n    struct TreeNode* ret = malloc(sizeof(struct TreeNode));\n    ret->val = val;\n    ret->left = ret->right = NULL;\n    return ret;\n}\n\nstruct TreeNode* insertIntoBST(struct TreeNode* root, int val) {\n    if (root == NULL) {\n        root = createTreeNode(val);\n        return root;\n    }\n    struct TreeNode* pos = root;\n    while (pos != NULL) {\n        if (val < pos->val) {\n            if (pos->left == NULL) {\n                pos->left = createTreeNode(val);\n                break;\n            } else {\n                pos = pos->left;\n            }\n        } else {\n            if (pos->right == NULL) {\n                pos->right = createTreeNode(val);\n                break;\n            } else {\n                pos = pos->right;\n            }\n        }\n    }\n    return root;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(N)$，其中 $N$ 为树中节点的数目。最坏情况下，我们需要将值插入到树的最深的叶子结点上，而叶子节点最深为 $O(N)$。\n\n- 空间复杂度：$O(1)$。我们只使用了常数大小的空间。",
      "createdAt": "2020-09-29T14:57:04.305800+00:00",
      "hitCount": 27393,
      "identifier": "U5OUFV",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "xiao-bai-by-zber-vgsl",
        "title": "小白"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "insert-into-a-binary-search-tree"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "er-cha-sou-suo-shu-zhong-de-cha-ru-cao-zuo-by-le-3",
      "status": "PUBLISHED",
      "summary": "方法一：模拟 思路与算法 首先回顾二叉搜索树的性质：对于任意节点 $\\textit{root}$ 而言，左子树（如果存在）上所有节点的值均小于 $\\textit{root.val}$，右子树（如果存在）上所有节点的值均大于 $\\textit{root.val}$，且它们都是二叉搜索树。 因此，当将 $\\textit{v",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search Tree",
          "nameTranslated": "二叉搜索树",
          "slug": "binary-search-tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "二叉搜索树中的插入操作",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 118,
        "id": 432223,
        "viewCount": 21761
      },
      "uuid": "U5OUFV",
      "videosInfo": []
    }
  }
}
