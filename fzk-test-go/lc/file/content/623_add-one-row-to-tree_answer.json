{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：深度优先搜索（递归）\n\n如果 `d` 的值为 `1`，我们就添加一个节点，并将整棵树作为新节点的左子树。否则我们可以使用深度优先搜索找出所有 `d` 层的节点并进行操作。在搜索时，我们需要记录当前节点的深度 `depth`，如果此时 `depth == d - 1`，那么我们需要在当前节点的左右孩子各增加一个节点。如果当前节点的左右孩子已经有节点，我们就将这些节点存储到临时变量中，在增加新节点后再把左右孩子作为新节点的左子树或右子树，并结束递归。如果 `depth != d - 1`，我们就需要对当前节点的子节点进行递归搜索。\n\n<![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide1.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide2.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide3.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide4.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide5.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide6.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide7.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide8.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide9.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide10.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide11.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide12.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide13.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide14.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide15.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_Recursion_NewSlide16.PNG)>\n\n\n```Java [sol1]\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode addOneRow(TreeNode t, int v, int d) {\n        if (d == 1) {\n            TreeNode n = new TreeNode(v);\n            n.left = t;\n            return n;\n        }\n        insert(v, t, 1, d);\n        return t;\n    }\n\n    public void insert(int val, TreeNode node, int depth, int n) {\n        if (node == null)\n            return;\n        if (depth == n - 1) {\n            TreeNode t = node.left;\n            node.left = new TreeNode(val);\n            node.left.left = t;\n            t = node.right;\n            node.right = new TreeNode(val);\n            node.right.right = t;\n        } else {\n            insert(val, node.left, depth + 1, n);\n            insert(val, node.right, depth + 1, n);\n        }\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树的节点个数。我们最多会遍历 $N$ 个节点。\n\n* 空间复杂度：$O(N)$。在最坏情况下，需要递归 $N$ 层，用到 $O(N)$ 的栈空间。\n\n#### 方法二：深度优先搜索（非递归）\n\n我们可以直接用栈来模拟递归，实现深度优先搜索的非递归版本。\n\n我们首先将根节点入栈，随后每次栈顶的元素即为当前搜索到的结点，我们取出这个节点，根据 `depth` 和 `d - 1` 的关系为当前节点增加新的子节点，或者将当前节点的子节点全部入栈，继续搜索。\n\n<![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide1.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide2.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide3.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide4.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide5.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide6.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide7.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide8.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide9.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide10.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_StackSlide11.PNG)>\n\n```Java [sol2]\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    class Node{\n        Node(TreeNode n,int d){\n            node=n;\n            depth=d;\n        }\n        TreeNode node;\n        int depth;\n    }\n    public TreeNode addOneRow(TreeNode t, int v, int d) {\n        if (d == 1) {\n            TreeNode n = new TreeNode(v);\n            n.left = t;\n            return n;\n        } \n        Stack<Node> stack=new Stack<>();\n        stack.push(new Node(t,1));\n        while(!stack.isEmpty())\n        {\n            Node n=stack.pop();\n            if(n.node==null)\n                continue;\n            if (n.depth == d - 1 ) {\n                TreeNode temp = n.node.left;\n                n.node.left = new TreeNode(v);\n                n.node.left.left = temp;\n                temp = n.node.right;\n                n.node.right = new TreeNode(v);\n                n.node.right.right = temp;\n                \n            } else{\n                stack.push(new Node(n.node.left, n.depth + 1));\n                stack.push(new Node(n.node.right, n.depth + 1));\n            }\n        }\n        return t;\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树的节点个数。我们最多会遍历 $N$ 个节点。\n\n* 空间复杂度：$O(N)$。\n\n#### 方法三：广度优先搜索\n\n我们同样可以使用广度优先搜索解决这个问题，并且广度优先搜索是最容易理解且最直观的一种方法。\n\n我们将根节点放入队列 `queue`。在每一轮搜索中，如果 `queue` 中节点的深度为 `d - 1`（显然 `queue` 中所有的节点都在同一深度），我们就退出搜索，并为 `queue` 中所有节点添加新的子节点；否则我们将 `queue` 中所有节点的子节点放入新的队列 `temp` 中，再用 `temp` 替代 `queue`。\n\n<![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide1.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide2.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide3.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide4.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide5.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide6.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide7.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide8.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide9.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide10.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide11.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide12.PNG),![1000](https://pic.leetcode-cn.com/Figures/623/623_Add_One_Row_queue_newSlide13.PNG)>\n\n```Java [sol3]\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode addOneRow(TreeNode t, int v, int d) {\n        if (d == 1) {\n            TreeNode n = new TreeNode(v);\n            n.left = t;\n            return n;\n        }\n        Queue < TreeNode > queue = new LinkedList < > ();\n        queue.add(t);\n        int depth = 1;\n        while (depth < d - 1) {\n            Queue < TreeNode > temp = new LinkedList < > ();\n            while (!queue.isEmpty()) {\n                TreeNode node = queue.remove();\n                if (node.left != null) temp.add(node.left);\n                if (node.right != null) temp.add(node.right);\n            }\n            queue = temp;\n            depth++;\n        }\n        while (!queue.isEmpty()) {\n            TreeNode node = queue.remove();\n            TreeNode temp = node.left;\n            node.left = new TreeNode(v);\n            node.left.left = temp;\n            temp = node.right;\n            node.right = new TreeNode(v);\n            node.right.right = temp;\n        }\n        return t;\n    }\n}\n```\n\n**复杂度分析s**\n\n* 时间复杂度：$O(N)$，其中 $N$ 是二叉树的节点个数。我们最多会遍历 $N$ 个节点。\n\n* 空间复杂度：$O(N)$。",
      "createdAt": "2019-10-29T06:13:21.472148+00:00",
      "hitCount": 6144,
      "identifier": "DlUstk",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dfs-he-bfs-by-zhi-ting-c8-z0ot",
        "title": "dfs 和 bfs"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "add-one-row-to-tree"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "zai-er-cha-shu-zhong-zeng-jia-yi-xing-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：深度优先搜索（递归）\n如果 d 的值为 1，我们就添加一个节点，并将整棵树作为新节点的左子树。否则我们可以使用深度优先搜索找出所有 d 层的节点并进行操作。在搜索时，我们需要记录当前节点的深度 depth，如果此时 depth == d - 1，那么我们需要在当前节点的左右孩子各增加一个节点。如果当前节点的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Depth-First Search",
          "nameTranslated": "深度优先搜索",
          "slug": "depth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Breadth-First Search",
          "nameTranslated": "广度优先搜索",
          "slug": "breadth-first-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "在二叉树中增加一行",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 20,
        "id": 38821,
        "viewCount": 4616
      },
      "uuid": "DlUstk",
      "videosInfo": []
    }
  }
}
