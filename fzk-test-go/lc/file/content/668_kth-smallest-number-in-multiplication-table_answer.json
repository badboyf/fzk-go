{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：暴力法[超过内存限制] \n\n**算法：**\n创建乘法表并对其排序，然后获取 $k^{th}$ 的元素。 \n\n```java [solution1-Java]\nclass Solution {\n    public int findKthNumber(int m, int n, int k) {\n        int[] table = new int[m*n];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                table[(i - 1) * n + j - 1] = i * j;\n            }\n        }\n        Arrays.sort(table);\n        return table[k-1];\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def findKthNumber(self, m, n, k):\n        table = [i*j for i in range(1, m+1) for j in range(1, n+1)]\n        table.sort()\n        return table[k-1]\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O\\big((mn))$ 创建表，然后 $O(mn\\log(mn))$ 对其进行排序。 \n* 空间复杂度：$O(mn)$ 存储乘法表。\n\n####  方法二：Next Heap[超过时间限制] \n**算法：**\n- 维护每行中最小的未使用的元素堆。然后，在堆上查找到下一个元素是一个 pop 操作。 \n- 我们的堆将由 $\\text{(val, root)}$ 组成，其中， $\\text{val}$ 是该行的下一个未使用的值，而 $\\text{root}$ 是该行的起始值。 \n- 我们将在表中重复查找下一个最低的元素，若有则堆做一个 pop 弹出一个元素,然后再把表中查到的元素插入堆中。 \n\n```java [solution2-Java]\nclass Solution {\n    public int findKthNumber(int m, int n, int k) {\n        PriorityQueue<Node> heap = new PriorityQueue<Node>(m,\n            Comparator.<Node> comparingInt(node -> node.val));\n\n        for (int i = 1; i <= m; i++) {\n            heap.offer(new Node(i, i));\n        }\n\n        Node node = null;\n        for (int i = 0; i < k; i++) {\n            node = heap.poll();\n            int nxt = node.val + node.root;\n            if (nxt <= node.root * n) {\n                heap.offer(new Node(nxt, node.root));\n            }\n        }\n        return node.val;\n    }\n}\n\nclass Node {\n    int val;\n    int root;\n    public Node(int v, int r) {\n        val = v;\n        root = r;\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def findKthNumber(self, m, n, k):\n        heap = [(i, i) for i in range(1, m+1)]\n        heapq.heapify(heap)\n\n        for _ in xrange(k):\n            val, root = heapq.heappop(heap)\n            nxt = val + root\n            if nxt <= root * n:\n                heapq.heappush(heap, (nxt, root))\n\n        return val\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(k * m \\log m) = O(m^2 n \\log m)$。我们最初的操作是 $O(m)$。然后，每个 pop 和 push 都是 $O(m \\log m)$ 并且我们的外循环是 $O(k) = O(mn)$\n* 空间复杂度：$O(m)$，我们的堆被实现为一个包含 $m$ 元素的数组 。\n\n####  方法三：二分搜索[通过]\n由于 $\\text{k}$ 和 $\\text{m*n}$ 最多为 $9 * 10^8$，线性解将不起作用。这将激发具有 $\\log$ 复杂性的解决方案，例如二分搜索。 \n\n**算法：**\n让我们用二分搜索答案 $\\text{A}$。 \n\n- 当且仅当乘法表中存在小于或等于 $\\text{k}$ ，`enough(x)` 才为真。通俗地说，`enough(x)` 描述了 $\\text{x}$ 是否足够大可以成为乘法表中的 $k^{th}$ 值。 \n- 然后（对于我们的答案 $\\text{A}$），每当 $\\text{x ≥ A}$，`enough(x)` 为 `True`；每当 $\\text{x < A}$，`enough(x)` 为 `False`。 \n- 在二分搜索中，循环不变量 `enough(hi) = True`。在开始时，`enough(m*n) = True`，并且每当设置 `hi`时，都将其设置为“enough”（`enough(mi) = True`）的值。这意味着 `hi` 将是二分搜索结束时的最小值。 \n- 这样我们就可以计算出有多少值小于或等于 $\\text{x}$。对于 $\\text{m}$ 行中的每一行，$i^{th}$ 行看起来像是 $\\text{[i, 2i, 3i, ..., ni]}$.。可能出现的最大的 $\\text{ki ≤ x}$ 是 $\\text{k = x // i}$。但是，如果 $\\text{x}$ 真的很大，那么可能是$\\text{k > n}$ ，那么在该行中总共有 $\\text{min(k, n) = min(x // i, n)}$ 值小于或等于 $\\text{x}$ 。 \n\n```java [solution3-Java]\nclass Solution {\n    public boolean enough(int x, int m, int n, int k) {\n        int count = 0;\n        for (int i = 1; i <= m; i++) {\n            count += Math.min(x / i, n);\n        }\n        return count >= k;\n    }\n\n    public int findKthNumber(int m, int n, int k) {\n        int lo = 1, hi = m * n;\n        while (lo < hi) {\n            int mi = lo + (hi - lo) / 2;\n            if (!enough(mi, m, n, k)) lo = mi + 1;\n            else hi = mi;\n        }\n        return lo;\n    }\n}\n```\n\n```python [solution3-Python]\nclass Solution(object):\n    def findKthNumber(self, m, n, k):\n        def enough(x):\n            count = 0\n            for i in xrange(1, m+1):\n                count += min(x // i, n)\n            return count >= k\n\n        lo, hi = 1, m * n\n        while lo < hi:\n            mi = (lo + hi) / 2\n            if not enough(mi):\n                lo = mi + 1\n            else:\n                hi = mi\n        return lo\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(m * \\log (mn))$。我们的二分搜索在每一步将间隔 $\\text{[lo, hi]}$ 分为两部分。在每个步骤中，我们都调用了 `enough`，这需要$O(m)$ 时间。 \n* 空间复杂度：$O(1)$ ,我们只在中间计算期间将整数保存在内存中。",
      "createdAt": "2019-08-13T06:42:32.412161+00:00",
      "hitCount": 10769,
      "identifier": "oBXYMQ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dai-ma-zhu-jie-by-competent-varahamihira-9wbm",
        "title": "代码注解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "kth-smallest-number-in-multiplication-table"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "cheng-fa-biao-zhong-di-kxiao-de-shu-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 方法一：暴力法[超过内存限制]\n算法：\n创建乘法表并对其排序，然后获取 k^{th} 的元素。\n复杂度分析\n\n时间复杂度：O\\big((mn)) 创建表，然后 O(mn\\log(mn)) 对其进行排序。\n空间复杂度：O(mn) 存储乘法表。\n\n 方法二：Next Heap[超过时间限制]\n算法：\n\n维护每行中最小的未",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Heap",
          "nameTranslated": "堆",
          "slug": "heap",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "乘法表中第k小的数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 27,
        "id": 20202,
        "viewCount": 7593
      },
      "uuid": "oBXYMQ",
      "videosInfo": []
    }
  }
}
