{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "## 题解\n\n---\n#### 方法一 暴力 [超过时间限制]\n\n最简单的方法是迭代给定 $nums$ 数组的所有索引。对于选择的每个索引 $i$，我们找到元素 $nums[i]$ 并为当前索引 $i$ 添加的新元素增加 $count$。由于 $nums[i]$ 必须作为新索引来查找属于与索引 $i$ 对应的集合的下一个元素，因此新索引是 $j = nums [i]$。\n\n我们持续这个索引更新过程，并保持增加 $count$，添加到对应于索引 $i$ 的集合中的新元素。现在，由于 $nums$ 中的所有元素都位于 $(0，...，N-1)$ 的范围内，因此生成的新索引永远不会超出数组大小限制。但是，我们总是遇到一种情况：当前元素等于我们开始嵌套时的元素 $nums[i]$。\n因此，在此之后，所生成的新索引将仅仅是先前生成的索引的重复，因此不会导致当前集合的大小增加。因此，当前数字的这个条件等于起始数字作为特定索引的 $count$ 增量的终止条件。\n\n我们对选择作为起始索引的每个索引执行相同的过程。最后，$count$ 的最大值给出了最大集合的大小。\n```Java [java]\npublic class Solution {\n    public int arrayNesting(int[] nums) {\n        int res = 0;\n        for (int i = 0; i < nums.length; i++) {\n            int start = nums[i], count = 0;\n            do {\n                start = nums[start];\n                count++;\n            }\n            while (start != nums[i]);\n            res = Math.max(res, count);\n\n        }\n        return res;\n    }\n}\n```\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$。在最坏的情况下，例如 - `[1,2,3,4,5,0]`，循环体将执行 $n ^ 2$ 次。\n\n* 时间复杂度：$O(1)$。常数空间。\n\n---\n#### 方法二 采用访问过的数组记录信息 [通过]\n\n**算法**\n\n在上一种方法中，我们观察到在最坏的情况下，$nums$ 数组的所有元素都被添加到对应于所有起始索引的集合中。但是，所有这些集合仅对应于同一组元素，导致冗余计算。\n\n我们考虑一个简单的例子，看看如何解决这个问题。从下图中，我们可以看到箭头所示的当前嵌套中的元素形成一个循环。因此，不管选择添加到这些标记元素的集合中的第一元素如何，相同的元素将被添加到当前集合。\n\n![Array_Nesting](https://pic.leetcode-cn.com/Figures/565/Array_Nesting.PNG){:width=500}\n{:align=center}\n\n因此，当我们向对应于任何索引的集合添加元素 $nums [j]$ 时，我们将其位置标记为在 $visited$ 数组中访问。这样做是为了在将来选择此索引作为起始索引时，我们不会进行冗余 $count$ 计算，因为我们已经考虑了与此索引链接的元素。\n\n\n通过这样做，我们确保不会一次又一次地考虑重复集。\n\n此外，我们还可以观察到索引 $i$ 和 $j$ 中的两个元素都不会导致跳转到相同的索引 $k$，因为它需要 $nums [i] = nums [j] = k$，这是不可能的，因为所有元素都是不同的。此外，由于相同的推理，任何循环外的元素都不会导致循环内的元素。因此，$visited$ 数组的使用正确。\n\n```Java [solution-]\npublic class Solution {\n    public int arrayNesting(int[] nums) {\n        boolean[] visited = new boolean[nums.length];\n        int res = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (!visited[i]) {\n                int start = nums[i], count = 0;\n                do {\n                    start = nums[start];\n                    count++;\n                    visited[start] = true;\n                }\n                while (start != nums[i]);\n                res = Math.max(res, count);\n            }\n        }\n        return res;\n    }\n}\n```\n**复杂度分析**\n\n* 时间复杂度：$O(n)$. $nums$ 数组的每个元素最多只考虑一次。\n* 空间复杂度：$O(n)$. 使用的 $visited$ 是大小为 $n$ 的数组。\n\n---\n#### 方法三 不使用额外空间 [通过]\n\n**算法**\n\n在最后一种方法中，$visited$ 数组仅用于跟踪已经访问过的数组元素。我们可以在原始数组 $nums$ 本身中标记访问过的元素，而不是使用单独的数组来跟踪它们。因为元素的范围只能在 1 到 20,000 之间，所以我们可以在访问过的位置放置一个非常大的整数值 $text{Integer.MAX_VALUE}$。遍历的其余过程与上一种方法相同。\n\n```Java [solution-]\npublic class Solution {\n    public int arrayNesting(int[] nums) {\n        int res = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] != Integer.MAX_VALUE) {\n                int start = nums[i], count = 0;\n                while (nums[start] != Integer.MAX_VALUE) {\n                    int temp = start;\n                    start = nums[start];\n                    count++;\n                    nums[temp] = Integer.MAX_VALUE;\n                }\n                res = Math.max(res, count);\n            }\n        }\n        return res;\n    }\n}\n```\n\n**空间复杂度**\n\n* 时间复杂度：$O(n)$。$nums$ 数组的每个元素最多只考虑一次。\n\n* 空间复杂度：$O(1)$。使用了常数级的额外空间\n\n---",
      "createdAt": "2019-08-23T05:20:00.453525+00:00",
      "hitCount": 10148,
      "identifier": "edw97I",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dfsqiu-mei-ge-lian-tong-fen-liang-jie-di-ua88",
        "title": "DFS求每个连通分量节点的最大数量"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "array-nesting"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "shu-zu-qian-tao-by-leetcode",
      "status": "PUBLISHED",
      "summary": "题解\n§ 方法一 暴力 [超过时间限制]\n最简单的方法是迭代给定 nums 数组的所有索引。对于选择的每个索引 i，我们找到元素 nums[i] 并为当前索引 i 添加的新元素增加 count。由于 nums[i] 必须作为新索引来查找属于与索引 i 对应的集合的下一个元素，因此新索引是 j = nums [i]。\n我",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/Figures/565/Array_Nesting.PNG",
      "title": "数组嵌套",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 19,
        "id": 22441,
        "viewCount": 7180
      },
      "uuid": "edw97I",
      "videosInfo": []
    }
  }
}
