{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解  \n![26. 删除排序数组中的重复项.mp4](539b4994-eb74-4041-ab3e-e949603c8d15)\n\n### 📖 文字题解\n\n#### 方法一：双指针\n\n这道题目的要求是：对给定的有序数组 $\\textit{nums}$ 删除重复元素，在删除重复元素之后，每个元素只出现一次，并返回新的长度，上述操作必须通过原地修改数组的方法，使用 $O(1)$ 的空间复杂度完成。\n\n由于给定的数组 $\\textit{nums}$ 是有序的，因此对于任意 $i<j$，如果 $\\textit{nums}[i]=\\textit{nums}[j]$，则对任意 $i \\le k \\le j$，必有 $\\textit{nums}[i]=\\textit{nums}[k]=\\textit{nums}[j]$，即相等的元素在数组中的下标一定是连续的。利用数组有序的特点，可以通过双指针的方法删除重复元素。\n\n如果数组 $\\textit{nums}$ 的长度为 $0$，则数组不包含任何元素，因此返回 $0$。\n\n当数组 $\\textit{nums}$ 的长度大于 $0$ 时，数组中至少包含一个元素，在删除重复元素之后也至少剩下一个元素，因此 $\\textit{nums}[0]$ 保持原状即可，从下标 $1$ 开始删除重复元素。\n\n定义两个指针 $\\textit{fast}$ 和 $\\textit{slow}$ 分别为快指针和慢指针，快指针表示遍历数组到达的下标位置，慢指针表示下一个不同元素要填入的下标位置，初始时两个指针都指向下标 $1$。\n\n假设数组 $\\textit{nums}$ 的长度为 $n$。将快指针 $\\textit{fast}$ 依次遍历从 $1$ 到 $n-1$ 的每个位置，对于每个位置，如果 $\\textit{nums}[\\textit{fast}] \\ne \\textit{nums}[\\textit{fast}-1]$，说明 $\\textit{nums}[\\textit{fast}]$ 和之前的元素都不同，因此将 $\\textit{nums}[\\textit{fast}]$ 的值复制到 $\\textit{nums}[\\textit{slow}]$，然后将 $\\textit{slow}$ 的值加 $1$，即指向下一个位置。\n\n遍历结束之后，从 $\\textit{nums}[0]$ 到 $\\textit{nums}[\\textit{slow}-1]$ 的每个元素都不相同且包含原数组中的每个不同的元素，因此新的长度即为 $\\textit{slow}$，返回 $\\textit{slow}$ 即可。\n\n<![fig1](https://assets.leetcode-cn.com/solution-static/26/1.png),![fig2](https://assets.leetcode-cn.com/solution-static/26/2.png),![fig3](https://assets.leetcode-cn.com/solution-static/26/3.png),![fig4](https://assets.leetcode-cn.com/solution-static/26/4.png),![fig5](https://assets.leetcode-cn.com/solution-static/26/5.png),![fig6](https://assets.leetcode-cn.com/solution-static/26/6.png),![fig7](https://assets.leetcode-cn.com/solution-static/26/7.png),![fig8](https://assets.leetcode-cn.com/solution-static/26/8.png),![fig9](https://assets.leetcode-cn.com/solution-static/26/9.png),![fig10](https://assets.leetcode-cn.com/solution-static/26/10.png),![fig11](https://assets.leetcode-cn.com/solution-static/26/11.png)>\n\n```Java [sol1-Java]\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int fast = 1, slow = 1;\n        while (fast < n) {\n            if (nums[fast] != nums[fast - 1]) {\n                nums[slow] = nums[fast];\n                ++slow;\n            }\n            ++fast;\n        }\n        return slow;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar removeDuplicates = function(nums) {\n    const n = nums.length;\n    if (n === 0) {\n        return 0;\n    }\n    let fast = 1, slow = 1;\n    while (fast < n) {\n        if (nums[fast] !== nums[fast - 1]) {\n            nums[slow] = nums[fast];\n            ++slow;\n        }\n        ++fast;\n    }\n    return slow;\n};\n```\n\n```go [sol1-Golang]\nfunc removeDuplicates(nums []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n    slow := 1\n    for fast := 1; fast < n; fast++ {\n        if nums[fast] != nums[fast-1] {\n            nums[slow] = nums[fast]\n            slow++\n        }\n    }\n    return slow\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        fast = slow = 1\n        while fast < n:\n            if nums[fast] != nums[fast - 1]:\n                nums[slow] = nums[fast]\n                slow += 1\n            fast += 1\n        \n        return slow\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int n = nums.size();\n        if (n == 0) {\n            return 0;\n        }\n        int fast = 1, slow = 1;\n        while (fast < n) {\n            if (nums[fast] != nums[fast - 1]) {\n                nums[slow] = nums[fast];\n                ++slow;\n            }\n            ++fast;\n        }\n        return slow;\n    }\n};\n```\n\n```C [sol1-C]\nint removeDuplicates(int* nums, int numsSize) {\n    if (numsSize == 0) {\n        return 0;\n    }\n    int fast = 1, slow = 1;\n    while (fast < numsSize) {\n        if (nums[fast] != nums[fast - 1]) {\n            nums[slow] = nums[fast];\n            ++slow;\n        }\n        ++fast;\n    }\n    return slow;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组的长度。快指针和慢指针最多各移动 $n$ 次。\n\n- 空间复杂度：$O(1)$。只需要使用常数的额外空间。",
      "createdAt": "2021-04-17T14:55:57.497582+00:00",
      "hitCount": 169661,
      "identifier": "ZSxIi7",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shuang-zhi-zhen-shan-chu-zhong-fu-xiang-dai-you-hu",
        "title": "【双指针】删除重复项-带优化思路"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "remove-duplicates-from-sorted-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 204,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "shan-chu-pai-xu-shu-zu-zhong-de-zhong-fu-tudo",
      "status": "PUBLISHED",
      "summary": "📺 视频题解\n📖 文字题解\n 方法一：双指针\n这道题目的要求是：对给定的有序数组 \\textit{nums} 删除重复元素，在删除重复元素之后，每个元素只出现一次，并返回新的长度，上述操作必须通过原地修改数组的方法，使用 O(1) 的空间复杂度完成。\n由于给定的数组 \\textit{nums} 是有序的，因此对于任",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "删除排序数组中的重复项",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 292,
        "id": 728105,
        "viewCount": 111180
      },
      "uuid": "ZSxIi7",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/8678497E8C0D41208FE76FA7EE2BC1C7-6-2.png",
          "duration": 241.28,
          "videoId": "dcbba49fed2a48f4bdcc502d892bb3ca"
        }
      ]
    }
  }
}
