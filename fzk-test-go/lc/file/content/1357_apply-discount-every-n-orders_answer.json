{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n我们将所有的物品以及它们的价格存放进哈希映射（HashMap）中。对于哈希映射中的每个键值对，键表示物品的编号，值表示物品的价格，这样我们就可以方便快速地统计每一位顾客的消费金额了。\n\n为了判断每一位顾客是否可以得到折扣，我们还需要使用一个计数器表示当前顾客的序号，如果该序号是 `n` 的倍数，我们就按照 `discount` 对顾客的消费金额进行打折。\n\n```C++ [sol1-C++]\nclass Cashier {\nprivate:\n    unordered_map<int, int> price;\n    int n, discount;\n    int custom_id;\n    \npublic:\n    Cashier(int _n, int _d, vector<int>& products, vector<int>& prices): n(_n), discount(_d), custom_id(0) {\n        for (int i = 0; i < products.size(); ++i) {\n            price[products[i]] = prices[i];\n        }\n    }\n    \n    double getBill(vector<int> product, vector<int> amount) {\n        ++custom_id;\n        double payment = 0;\n        for (int i = 0; i < product.size(); ++i) {\n            payment += price[product[i]] * amount[i];\n        }\n        if (custom_id % n == 0) {\n            payment -= payment * discount / 100;\n        }\n        return payment;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Cashier:\n    def __init__(self, n: int, discount: int, products: List[int], prices: List[int]):\n        self.price = dict()\n        for product, price in zip(products, prices):\n            self.price[product] = price\n        self.n = n\n        self.discount = discount\n        self.custom_id = 0\n\n    def getBill(self, product: List[int], amount: List[int]) -> float:\n        self.custom_id += 1\n        payment = 0.0\n        for k, v in zip(product, amount):\n            payment += self.price[k] * v\n        if self.custom_id % self.n == 0:\n            payment -= payment * self.discount / 100\n        return payment\n```\n\n**复杂度分析**\n\n- 时间复杂度：预处理（Cashier 类的构造函数）的时间复杂度为 $O(P)$，其中 $P$ 是数组 `products` 和 `prices` 的长度。`getBill()` 的时间复杂度为 $O(M)$，其中 $M$ 是数组 `product` 和 `amount` 的长度。\n\n- 空间复杂度：预处理的空间复杂度为 $O(P)$。`getBill()` 的额外（预处理的结果之外）空间复杂度为 $O(1)$。",
      "createdAt": "2020-02-24T07:03:48.729791+00:00",
      "hitCount": 1800,
      "identifier": "acQ5SI",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "1357-cchao-100de-mo-ni-jie-fa-by-ffretur-m9t1",
        "title": "1357. c++超100的模拟解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "apply-discount-every-n-orders"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "mei-ge-n-ge-gu-ke-da-zhe-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": " 方法一：模拟\n我们将所有的物品以及它们的价格存放进哈希映射（HashMap）中。对于哈希映射中的每个键值对，键表示物品的编号，值表示物品的价格，这样我们就可以方便快速地统计每一位顾客的消费金额了。\n为了判断每一位顾客是否可以得到折扣，我们还需要使用一个计数器表示当前顾客的序号，如果该序号是 n 的倍数，我们就按照 d",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "每隔 n 个顾客打折",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 2,
        "id": 108076,
        "viewCount": 1540
      },
      "uuid": "acQ5SI",
      "videosInfo": []
    }
  }
}
