{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "阿飞",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/a-fei-8/avatar_1551963640.png",
          "userSlug": "a-fei-8"
        },
        "username": "a-fei-8"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "\n> **欢迎阅读、点赞、转发、订阅，你的举手之间，我的动力源泉，欢评论区提供其他语言的版本**\n\n![flamingo-4945829_960_720.jpg](https://pic.leetcode-cn.com/1615799010-XXykji-flamingo-4945829_960_720.jpg)\n\n\n\n## [1115. 交替打印FooBar](https://leetcode-cn.com/problems/print-foobar-alternately/)\n\n\n\n### 方法1:Semaphore\n\n- `Semaphore`是一个计数信号量。\n- 从概念上将，`Semaphore`包含一组许可证。\n- 如果有需要的话，每个`acquire()`方法都会阻塞，直到获取一个可用的许可证。\n- 每个`release()`方法都会释放持有许可证的线程，并且归还`Semaphore`一个可用的许可证。\n- 然而，实际上并没有真实的许可证对象供线程使用，`Semaphore`只是对可用的数量进行管理维护\n- 总结：如果线程要访问一个资源就必须先获得信号量。如果信号量内部计数器大于0，信号量减1，然后允许共享这个资源；否则，如果信号量的计数器等于0，信号量将会把线程置入休眠直至计数器大于0.当信号量使用完时，必须释放\n\n```java\nclass FooBar {\n            private int n;\n\n            private Semaphore fooSema = new Semaphore(1);\n            private Semaphore barSema = new Semaphore(0);\n\n            public FooBar(int n) {\n                this.n = n;\n            }\n\n            public void foo(Runnable printFoo) throws InterruptedException {\n\n                for (int i = 0; i < n; i++) {\n                    fooSema.acquire();//值为1的时候，能拿到，执行下面的操作\n                    printFoo.run();\n                    barSema.release();//释放许可给barSema这个信号量 barSema 的值+1\n                }\n            }\n\n            public void bar(Runnable printBar) throws InterruptedException {\n\n                for (int i = 0; i < n; i++) {\n                    barSema.acquire();//值为1的时候，能拿到，执行下面的操作\n                    printBar.run();\n                    fooSema.release();//释放许可给fooSema这个信号量 fooSema 的值+1\n                }\n            }\n        }\n```\n\n### 方法2:CyclicBarrier\n\n#### 背景知识\n\n```java\npublic CyclicBarrier(int parties)\npublic CyclicBarrier(int parties, Runnable barrierAction)\n// -构造方法\n//parties 是参与线程的个数\n//第二个构造方法有一个 Runnable 参数，这个参数的意思是最后一个到达线程要做的任务\n  ---\npublic int await() throws InterruptedException, BrokenBarrierException\npublic int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException\n//- 函数\n//线程调用 await() 表示自己已经到达栅栏\n//BrokenBarrierException 表示栅栏已经被破坏，破坏的原因可能是其中一个线程 await() 时被中断或者超时\n//调用await方法的线程告诉CyclicBarrier自己已经到达同步点，然后当前线程被阻塞。直到parties个参与线程调用了await方法\n```\n\n#### CyclicBarrier 与 CountDownLatch 区别\n\n- CountDownLatch 是一次性的，CyclicBarrier 是可循环利用的\n- CountDownLatch 参与的线程的职责是不一样的，有的在倒计时，有的在等待倒计时结束。CyclicBarrier 参与的线程职责是一样的\n\n```java\nstatic class _5th_2 {\n\n    //input\n    public static void main(String[] args) {\n        FooBar fooBar = new FooBar(10);//打印10次foo bar\n        Runnable printFoo = () -> {\n            System.out.printf(\"%s\\n\", \"foo\");\n        };\n        Runnable printBar = () -> {\n            System.out.printf(\"%s\\n\", \"bar\");\n        };\n        Thread fooThread = new Thread(() -> {\n            try {\n                fooBar.foo(printFoo);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        Thread barThread = new Thread(() -> {\n            try {\n                fooBar.bar(printBar);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        fooThread.start();\n        barThread.start();\n\n    }\n\n    static class FooBar {\n        private int n;\n\n        private CyclicBarrier cb = new CyclicBarrier(2);\n        volatile boolean fooExec = true;\n\n        public FooBar(int n) {\n            this.n = n;\n        }\n\n        public void foo(Runnable printFoo) throws InterruptedException {\n\n            for (int i = 0; i < n; i++) {\n                while (!fooExec) {\n                    //false的时候，bar线程在执行，foo线程在这此处空转\n                }\n                printFoo.run();//打印foo\n                fooExec = false;//设置变量\n                try {\n                    cb.await();//线程foo到达同步点\n                } catch (BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        public void bar(Runnable printBar) throws InterruptedException {\n\n            for (int i = 0; i < n; i++) {\n                try {\n                    cb.await();\n                } catch (BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n                printBar.run();\n                fooExec = true;\n\n            }\n        }\n    }\n}\n```\n\n### 方法3:Thread.yield()\n\nThread.yield():使当前线程从执行状态（运行状态）变为可执行态（就绪状态）。cpu会从众多的可执行态里选择，也就是说，当前也就是刚刚的那个线程还是有可能会被再次执行到的，并不是说一定会执行其他线程而该线程在下一次中不会执行到了。\n\n```java\nclass FooBar {\n    private int n;\n\n    volatile boolean fooExec = true;//foo可以执行\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n\n        for (int i = 0; i < n; ) {\n            if (fooExec) {\n                printFoo.run();\n                fooExec = false;\n                i++;\n            } else {\n                Thread.yield();\n            }\n\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n\n        for (int i = 0; i < n; ) {\n            if (!fooExec) {\n                printBar.run();\n                fooExec = true;\n                i++;\n            } else {\n                Thread.yield();\n            }\n\n        }\n    }\n}\n```\n\n### 方法4:ReentrantLock\n\n#### 背景知识\n\n#### 实现原理\n\nReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现类似。\n\n**CAS**：Compare and Swap，比较并交换。CAS有3个操作数：内存值V、预期值A、要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。该操作是一个原子操作，被广泛的应用在Java的底层实现中。在Java中，CAS主要是由sun.misc.Unsafe这个类通过JNI调用CPU底层指令实现\n\nReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现类似。\n\nCAS：Compare and Swap，比较并交换。CAS有3个操作数：内存值V、预期值A、要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。该操作是一个原子操作，被广泛的应用在Java的底层实现中。在Java中，CAS主要是由sun.misc.Unsafe这个类通过JNI调用CPU底层指令实现\n\n#### ReentrantLock和synchronized比较\n\n- 1.ReentrantLock和synchronized都是独占锁,只允许线程互斥的访问临界区。但是实现上两者不同:synchronized加锁解锁的过程是隐式的,用户不用手动操作,优点是操作简单，但显得不够灵活。一般并发场景使用synchronized的就够了；ReentrantLock需要手动加锁和解锁,且解锁的操作尽量要放在finally代码块中,保证线程正确释放锁。ReentrantLock操作较为复杂，但是因为可以手动控制加锁和解锁过程,在复杂的并发场景中能派上用场。\n- 2.ReentrantLock和synchronized都是可重入的。synchronized因为可重入因此可以放在被递归执行的方法上,且不用担心线程最后能否正确释放锁；而ReentrantLock在重入时要却确保重复获取锁的次数必须和重复释放锁的次数一样，否则可能导致其他线程无法获得该锁\n\n\n\n- n=5的时候，已经显示TLE了\n\n```java\nclass FooBar {\n    private int n;\n    private ReentrantLock lock = new ReentrantLock(true);\n    volatile boolean fooExec = true;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i < n; ) {\n            lock.lock();\n            try {\n                if (fooExec) {\n                    printFoo.run();\n                    fooExec = false;\n                    i++;\n                }\n            } finally {\n                lock.unlock();\n            }\n\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i < n; ) {\n            lock.lock();\n            try {\n                if (!fooExec) {\n                    printBar.run();\n                    fooExec = true;\n                    i++;\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n```\n\n\n\n### 方法5:BlockingQueue\n\n#### 背景知识\n\n- SynchronousQueue： 一个不存储元素的阻塞队列，每一个put操作必须等待take操作，否则不能添加元素。支持公平锁和非公平锁。SynchronousQueue的一个使用场景是在线程池里。Executors.newCachedThreadPool()就使用了SynchronousQueue，这个线程池根据需要（新任务到来时）创建新的线程，如果有空闲线程则会重复使用，线程空闲了60秒后会被回收。\n- LinkedBlockingDeque： 一个由链表结构组成的双向阻塞队列。队列头部和尾部都可以添加和移除元素，多线程并发时，可以将锁的竞争最多降到一半\n\n-  add(obj):把obj加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续.\n\n- take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到BlockingQueue有新的数据被加入; \n\n```java\nclass FooBar {\n    private int n;\n    private BlockingQueue<Integer> fooQueue = new LinkedBlockingQueue<Integer>() {{\n        add(0);\n    }};\n    private BlockingQueue<Integer> barQueue = new LinkedBlockingQueue<>();\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n\n        for (int i = 0; i < n; i++) {\n            fooQueue.take();\n            printFoo.run();\n            barQueue.add(0);\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n\n        for (int i = 0; i < n; i++) {\n            barQueue.take();\n            printBar.run();\n            fooQueue.add(0);\n        }\n    }\n}\n```\n\n### 方法6:synchronized\n\n#### 背景知识\n\n1、wait()、notify/notifyAll() 方法是Object的本地final方法，无法被重写。\n\n2、wait()使当前线程阻塞，前提是 必须先获得锁，一般配合synchronized 关键字使用，即，一般在synchronized 同步代码块里使用 wait()、notify/notifyAll() 方法。\n\n3、 由于 wait()、notify/notifyAll() 在synchronized 代码块执行，说明当前线程一定是获取了锁的。\n\n当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态。\n\n只有当 notify/notifyAll() 被执行时候，才会唤醒一个或多个正处于等待状态的线程，然后继续往下执行，直到执行完synchronized 代码块的代码或是中途遇到wait() ，再次释放锁。\n\n也就是说，notify/notifyAll() 的执行只是唤醒沉睡的线程，而不会立即释放锁，锁的释放要看代码块的具体执行情况。所以在编程中，尽量在使用了notify/notifyAll() 后立即退出临界区，以唤醒其他线程让其获得锁\n\n4、wait() 需要被try catch包围，以便发生异常中断也可以使wait等待的线程唤醒。\n\n5、notify 和wait 的顺序不能错，如果A线程先执行notify方法，B线程在执行wait方法，那么B线程是无法被唤醒的。\n\n6、notify 和 notifyAll的区别\n\nnotify方法只唤醒一个等待（对象的）线程并使该线程开始执行。所以如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，选择哪个线程取决于操作系统对多线程管理的实现。notifyAll 会唤醒所有等待(对象的)线程，尽管哪一个线程将会第一个处理取决于操作系统的实现。如果当前情况下有多个线程需要被唤醒，推荐使用notifyAll 方法。比如在生产者-消费者里面的使用，每次都需要唤醒所有的消费者或是生产者，以判断程序是否可以继续往下执行。\n\n7、在多线程中要测试某个条件的变化，使用if 还是while？\n\n　　要注意，notify唤醒沉睡的线程后，线程会接着上次的执行继续往下执行。所以在进行条件判断时候，可以先把 wait 语句忽略不计来进行考虑；显然，要确保程序一定要执行，并且要保证程序直到满足一定的条件再执行，要使用while进行等待，直到满足条件才继续往下执行\n\n```java\nclass FooBar {\n    private int n;\n    private Object obj = new Object();\n    private volatile boolean fooExec = true;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n\n        for (int i = 0; i < n; i++) {\n            synchronized (obj) {\n                if (!fooExec) {//fooExec为false时，该线程等待，为true的时候执行下面的操作\n                    obj.wait();\n                }\n                printFoo.run();\n                fooExec = false;\n                obj.notifyAll();//唤醒其他线程\n            }\n\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n\n        for (int i = 0; i < n; i++) {\n            synchronized (obj) {\n                if (fooExec) {\n                    obj.wait();\n                }\n                printBar.run();\n                fooExec = true;\n                obj.notifyAll();\n            }\n\n        }\n    }\n}\n```\n\n### 方法7:LockSupport\n\n#### 背景知识\n\n- LockSupport类的核心方法其实就两个：`park()`和`unpark()`，其中`park()`方法用来阻塞当前调用线程，`unpark()`方法用于唤醒指定线程。\n  这其实和Object类的wait()和signal()方法有些类似，但是LockSupport的这两种方法从语意上讲比`Object`类的方法更清晰，而且可以针对指定线程进行阻塞和唤醒。\n\n> LockSupport类使用了一种名为Permit（许可）的概念来做到阻塞和唤醒线程的功能，可以把许可看成是一种(0,1)信号量（Semaphore），但与 Semaphore 不同的是，许可的累加上限是1。\n> 初始时，permit为0，当调用`unpark()`方法时，线程的permit加1，当调用`park()`方法时，如果permit为0，则调用线程进入阻塞状态。\n\n```java\nclass FooBar {\n    private int n;\n    private Map<String, Thread> map = new ConcurrentHashMap<>();\n    private volatile boolean fooExec = true;\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        map.put(\"foo\", Thread.currentThread());\n        for (int i = 0; i < n; i++) {\n            while (!fooExec) {\n                LockSupport.park();\n            }\n            printFoo.run();\n            fooExec = false;\n            LockSupport.unpark(map.get(\"bar\"));\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        map.put(\"bar\", Thread.currentThread());\n        for (int i = 0; i < n; i++) {\n            while (fooExec) {\n                LockSupport.park();\n            }\n            printBar.run();\n            fooExec = true;\n            LockSupport.unpark(map.get(\"foo\"));\n        }\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n## 更多阅读\n\n- N.O.1114->[畅游多线程之顺序打印及FollowUp](https://leetcode-cn.com/problems/print-in-order/solution/chang-you-duo-xian-cheng-zhi-zhi-shun-xu-it6f/)\n- N.O.1115->[畅游多线程之交替打印FooBar](https://leetcode-cn.com/problems/print-foobar-alternately/solution/chang-you-duo-xian-cheng-zhi-1115-by-a-f-mf5u/)\n- N.O.1116->[畅游多线程之打印零与奇偶数](https://leetcode-cn.com/problems/print-zero-even-odd/solution/chang-you-duo-xian-cheng-zhi-da-yin-ling-qy3o/)\n- N.O.1188->[畅游多线程之设计有限阻塞队列](https://blog.csdn.net/wat1r/article/details/119130292)\n- N.O.1195->[畅游多线程之交替打印字符串](https://leetcode-cn.com/problems/fizz-buzz-multithreaded/solution/chang-you-duo-xian-cheng-zhi-jiao-ti-da-eeurc/)\n- N.O.1279->[畅游多线程之红绿灯路口](https://blog.csdn.net/wat1r/article/details/119113504)\n\n\n## 番外：\n\n最近阿飞把链接做成了脑图（下图），整理起来，会做成PDF，感兴趣的同学关注下，不迷路，[个人主页【阿飞算法】](https://blog.csdn.net/wat1r/article/details/117533156) ，关注公众号会弹出资料下载地址，每个分支都可以点击链接跳转，欢迎入群交流学习。\n\n![阿飞算法.png](https://pic.leetcode-cn.com/1630892220-MyzuIE-%E9%98%BF%E9%A3%9E%E7%AE%97%E6%B3%95.png)",
      "createdAt": "2021-07-25T06:59:17.351515+00:00",
      "hitCount": 7117,
      "identifier": "Ut1fme",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-duo-fang-fa-by-zhouzihong-zdvj",
        "title": "【C++】【多方法】"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "print-foobar-alternately"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 42,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": false,
      "slug": "chang-you-duo-xian-cheng-zhi-1115-by-a-f-mf5u",
      "status": "PUBLISHED",
      "summary": "欢迎阅读、点赞、转发、订阅，你的举手之间，我的动力源泉，欢评论区提供其他语言的版本\n\n1115. 交替打印FooBar\n方法1:Semaphore\n\nSemaphore是一个计数信号量。\n从概念上将，Semaphore包含一组许可证。\n如果有需要的话，每个acquire()方法都会阻塞，直到获取一个可用的许可证。\n每",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1615799010-XXykji-flamingo-4945829_960_720.jpg",
      "title": "畅游多线程之交替打印FooBar",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 15,
        "id": 895531,
        "viewCount": 4625
      },
      "uuid": "Ut1fme",
      "videosInfo": []
    }
  }
}
