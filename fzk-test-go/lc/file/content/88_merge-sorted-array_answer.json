{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "\n### 📺 视频题解  \n![88. 合并两个有序数组.mp4](c4e23dee-0349-4f11-83d0-d476c2567f90)\n\n### 📖 文字题解\n#### 方法一：直接合并后排序\n\n**算法**\n\n最直观的方法是先将数组 $\\textit{nums}_2$ 放进数组 $\\textit{nums}_1$ 的尾部，然后直接对整个数组进行排序。\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        for (int i = 0; i != n; ++i) {\n            nums1[m + i] = nums2[i];\n        }\n        sort(nums1.begin(), nums1.end());\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        for (int i = 0; i != n; ++i) {\n            nums1[m + i] = nums2[i];\n        }\n        Arrays.sort(nums1);\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        nums1.sort()\n```\n\n```go [sol1-Golang]\nfunc merge(nums1 []int, m int, nums2 []int, _ int) {\n    copy(nums1[m:], nums2)\n    sort.Ints(nums1)\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar merge = function(nums1, m, nums2, n) {\n    nums1.splice(m, nums1.length - m, ...nums2);\n    nums1.sort((a, b) => a - b);\n};\n```\n\n```C [sol1-C]\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    for (int i = 0; i != n; ++i) {\n        nums1[m + i] = nums2[i];\n    }\n    qsort(nums1, nums1Size, sizeof(int), cmp);\n}\n```\n\n**复杂度分析**\n\n  * 时间复杂度：$O((m+n)\\log(m+n))$。\n    排序序列长度为 $m+n$，套用快速排序的时间复杂度即可，平均情况为 $O((m+n)\\log(m+n))$。\n\n  * 空间复杂度：$O(\\log(m+n))$。\n    排序序列长度为 $m+n$，套用快速排序的空间复杂度即可，平均情况为 $O(\\log(m+n))$。\n\n#### 方法二：双指针\n\n**算法**\n\n方法一没有利用数组 $\\textit{nums}_1$ 与 $\\textit{nums}_2$ 已经被排序的性质。为了利用这一性质，我们可以使用双指针方法。这一方法将两个数组看作队列，每次从两个数组头部取出比较小的数字放到结果中。如下面的动画所示：\n\n![gif1](https://assets.leetcode-cn.com/solution-static/88/1.gif){:width=540}\n\n我们为两个数组分别设置一个指针 $p_1$ 与 $p_2$ 来作为队列的头部指针。代码实现如下：\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int p1 = 0, p2 = 0;\n        int sorted[m + n];\n        int cur;\n        while (p1 < m || p2 < n) {\n            if (p1 == m) {\n                cur = nums2[p2++];\n            } else if (p2 == n) {\n                cur = nums1[p1++];\n            } else if (nums1[p1] < nums2[p2]) {\n                cur = nums1[p1++];\n            } else {\n                cur = nums2[p2++];\n            }\n            sorted[p1 + p2 - 1] = cur;\n        }\n        for (int i = 0; i != m + n; ++i) {\n            nums1[i] = sorted[i];\n        }\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int p1 = 0, p2 = 0;\n        int[] sorted = new int[m + n];\n        int cur;\n        while (p1 < m || p2 < n) {\n            if (p1 == m) {\n                cur = nums2[p2++];\n            } else if (p2 == n) {\n                cur = nums1[p1++];\n            } else if (nums1[p1] < nums2[p2]) {\n                cur = nums1[p1++];\n            } else {\n                cur = nums2[p2++];\n            }\n            sorted[p1 + p2 - 1] = cur;\n        }\n        for (int i = 0; i != m + n; ++i) {\n            nums1[i] = sorted[i];\n        }\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        sorted = []\n        p1, p2 = 0, 0\n        while p1 < m or p2 < n:\n            if p1 == m:\n                sorted.append(nums2[p2])\n                p2 += 1\n            elif p2 == n:\n                sorted.append(nums1[p1])\n                p1 += 1\n            elif nums1[p1] < nums2[p2]:\n                sorted.append(nums1[p1])\n                p1 += 1\n            else:\n                sorted.append(nums2[p2])\n                p2 += 1\n        nums1[:] = sorted\n```\n\n```go [sol2-Golang]\nfunc merge(nums1 []int, m int, nums2 []int, n int) {\n    sorted := make([]int, 0, m+n)\n    p1, p2 := 0, 0\n    for {\n        if p1 == m {\n            sorted = append(sorted, nums2[p2:]...)\n            break\n        }\n        if p2 == n {\n            sorted = append(sorted, nums1[p1:]...)\n            break\n        }\n        if nums1[p1] < nums2[p2] {\n            sorted = append(sorted, nums1[p1])\n            p1++\n        } else {\n            sorted = append(sorted, nums2[p2])\n            p2++\n        }\n    }\n    copy(nums1, sorted)\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar merge = function(nums1, m, nums2, n) {\n    let p1 = 0, p2 = 0;\n    const sorted = new Array(m + n).fill(0);\n    var cur;\n    while (p1 < m || p2 < n) {\n        if (p1 === m) {\n            cur = nums2[p2++];\n        } else if (p2 === n) {\n            cur = nums1[p1++];\n        } else if (nums1[p1] < nums2[p2]) {\n            cur = nums1[p1++];\n        } else {\n            cur = nums2[p2++];\n        }\n        sorted[p1 + p2 - 1] = cur;\n    }\n    for (let i = 0; i != m + n; ++i) {\n        nums1[i] = sorted[i];\n    }\n};\n```\n\n```C [sol2-C]\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    int p1 = 0, p2 = 0;\n    int sorted[m + n];\n    int cur;\n    while (p1 < m || p2 < n) {\n        if (p1 == m) {\n            cur = nums2[p2++];\n        } else if (p2 == n) {\n            cur = nums1[p1++];\n        } else if (nums1[p1] < nums2[p2]) {\n            cur = nums1[p1++];\n        } else {\n            cur = nums2[p2++];\n        }\n        sorted[p1 + p2 - 1] = cur;\n    }\n    for (int i = 0; i != m + n; ++i) {\n        nums1[i] = sorted[i];\n    }\n}\n```\n\n**复杂度分析**\n\n  * 时间复杂度：$O(m+n)$。\n    指针移动单调递增，最多移动 $m+n$ 次，因此时间复杂度为 $O(m+n)$。\n\n  * 空间复杂度：$O(m+n)$。\n    需要建立长度为 $m+n$ 的中间数组 $\\textit{sorted}$。\n\n#### 方法三：逆向双指针\n\n**算法**\n\n方法二中，之所以要使用临时变量，是因为如果直接合并到数组 $\\textit{nums}_1$ 中，$\\textit{nums}_1$ 中的元素可能会在取出之前被覆盖。那么如何直接避免覆盖 $\\textit{nums}_1$ 中的元素呢？观察可知，$\\textit{nums}_1$ 的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 $\\textit{nums}_1$ 的最后面。\n\n严格来说，在此遍历过程中的任意一个时刻，$\\textit{nums}_1$ 数组中有 $m-p_1-1$ 个元素被放入 $\\textit{nums}_1$ 的后半部，$\\textit{nums}_2$ 数组中有 $n-p_2-1$ 个元素被放入 $\\textit{nums}_1$ 的后半部，而在指针 $p_1$ 的后面，$\\textit{nums}_1$ 数组有 $m+n-p_1-1$ 个位置。由于\n\n$$m+n-p_1-1\\geq m-p_1-1+n-p_2-1$$\n\n等价于\n\n$$p_2\\geq -1$$\n\n永远成立，因此 $p_1$ 后面的位置永远足够容纳被插入的元素，不会产生 $p_1$ 的元素被覆盖的情况。\n\n实现代码如下：\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        int p1 = m - 1, p2 = n - 1;\n        int tail = m + n - 1;\n        int cur;\n        while (p1 >= 0 || p2 >= 0) {\n            if (p1 == -1) {\n                cur = nums2[p2--];\n            } else if (p2 == -1) {\n                cur = nums1[p1--];\n            } else if (nums1[p1] > nums2[p2]) {\n                cur = nums1[p1--];\n            } else {\n                cur = nums2[p2--];\n            }\n            nums1[tail--] = cur;\n        }\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        int p1 = m - 1, p2 = n - 1;\n        int tail = m + n - 1;\n        int cur;\n        while (p1 >= 0 || p2 >= 0) {\n            if (p1 == -1) {\n                cur = nums2[p2--];\n            } else if (p2 == -1) {\n                cur = nums1[p1--];\n            } else if (nums1[p1] > nums2[p2]) {\n                cur = nums1[p1--];\n            } else {\n                cur = nums2[p2--];\n            }\n            nums1[tail--] = cur;\n        }\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        p1, p2 = m - 1, n - 1\n        tail = m + n - 1\n        while p1 >= 0 or p2 >= 0:\n            if p1 == -1:\n                nums1[tail] = nums2[p2]\n                p2 -= 1\n            elif p2 == -1:\n                nums1[tail] = nums1[p1]\n                p1 -= 1\n            elif nums1[p1] > nums2[p2]:\n                nums1[tail] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[tail] = nums2[p2]\n                p2 -= 1\n            tail -= 1\n```\n\n```go [sol3-Golang]\nfunc merge(nums1 []int, m int, nums2 []int, n int) {\n    for p1, p2, tail := m-1, n-1, m+n-1; p1 >= 0 || p2 >= 0; tail-- {\n        var cur int\n        if p1 == -1 {\n            cur = nums2[p2]\n            p2--\n        } else if p2 == -1 {\n            cur = nums1[p1]\n            p1--\n        } else if nums1[p1] > nums2[p2] {\n            cur = nums1[p1]\n            p1--\n        } else {\n            cur = nums2[p2]\n            p2--\n        }\n        nums1[tail] = cur\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar merge = function(nums1, m, nums2, n) {\n    let p1 = m - 1, p2 = n - 1;\n    let tail = m + n - 1;\n    var cur;\n    while (p1 >= 0 || p2 >= 0) {\n        if (p1 === -1) {\n            cur = nums2[p2--];\n        } else if (p2 === -1) {\n            cur = nums1[p1--];\n        } else if (nums1[p1] > nums2[p2]) {\n            cur = nums1[p1--];\n        } else {\n            cur = nums2[p2--];\n        }\n        nums1[tail--] = cur;\n    }\n};\n```\n\n```C [sol3-C]\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n) {\n    int p1 = m - 1, p2 = n - 1;\n    int tail = m + n - 1;\n    int cur;\n    while (p1 >= 0 || p2 >= 0) {\n        if (p1 == -1) {\n            cur = nums2[p2--];\n        } else if (p2 == -1) {\n            cur = nums1[p1--];\n        } else if (nums1[p1] > nums2[p2]) {\n            cur = nums1[p1--];\n        } else {\n            cur = nums2[p2--];\n        }\n        nums1[tail--] = cur;\n    }\n}\n```\n\n**复杂度分析**\n\n  * 时间复杂度：$O(m+n)$。\n    指针移动单调递减，最多移动 $m+n$ 次，因此时间复杂度为 $O(m+n)$。\n  \n  * 空间复杂度：$O(1)$。\n    直接对数组 $\\textit{nums}_1$ 原地修改，不需要额外空间。",
      "createdAt": "2021-03-19T04:31:17.029466+00:00",
      "hitCount": 159316,
      "identifier": "laFaP9",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "88-by-ikaruga",
        "title": "【合并两个有序数组】从后面开始确定"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "merge-sorted-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 133,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "he-bing-liang-ge-you-xu-shu-zu-by-leetco-rrb0",
      "status": "PREPUBLISH",
      "summary": "📺 视频题解\n📖 文字题解\n 方法一：直接合并后排序\n算法\n最直观的方法是先将数组 \\textit{nums}_2 放进数组 \\textit{nums}_1 的尾部，然后直接对整个数组进行排序。\n复杂度分析\n\n\n时间复杂度：O((m+n)\\log(m+n))。\n排序序列长度为 m+n，套用快速排序的时间复杂度即可，",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://assets.leetcode-cn.com/solution-static/88/1.gif",
      "title": "合并两个有序数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 273,
        "id": 666608,
        "viewCount": 106201
      },
      "uuid": "laFaP9",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/BF4BED62AFD84FCEBFDC92E2D883BD59-6-2.png",
          "duration": 387.2213,
          "videoId": "5bfc454823654e85a3532c5d7df3cdec"
        }
      ]
    }
  }
}
