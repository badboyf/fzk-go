{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺 视频题解\n![55. 跳跃游戏 v2(1).mp4](faf3fd9c-dbee-4d4f-8acd-975b78a5bb35)\n\n### 📖 文字题解\n#### 方法一：贪心\n\n我们可以用贪心的方法解决这个问题。\n\n设想一下，对于数组中的任意一个位置 $y$，我们如何判断它是否可以到达？根据题目的描述，只要存在一个位置 $x$，它本身可以到达，并且它跳跃的最大长度为 $x + \\textit{nums}[x]$，这个值大于等于 $y$，即 $x + \\textit{nums}[x] \\geq y$，那么位置 $y$ 也可以到达。\n\n换句话说，对于每一个可以到达的位置 $x$，它使得 $x+1, x+2, \\cdots, x+\\textit{nums}[x]$ 这些连续的位置都可以到达。\n\n这样以来，我们依次遍历数组中的每一个位置，并实时维护 **最远可以到达的位置**。对于当前遍历到的位置 $x$，如果它在 **最远可以到达的位置** 的范围内，那么我们就可以从起点通过若干次跳跃到达该位置，因此我们可以用 $x + \\textit{nums}[x]$ 更新 **最远可以到达的位置**。\n\n在遍历的过程中，如果 **最远可以到达的位置** 大于等于数组中的最后一个位置，那就说明最后一个位置可达，我们就可以直接返回 `True` 作为答案。反之，如果在遍历结束后，最后一个位置仍然不可达，我们就返回 `False` 作为答案。\n\n以题目中的示例一\n\n```\n[2, 3, 1, 1, 4]\n```\n\n为例：\n\n- 我们一开始在位置 $0$，可以跳跃的最大长度为 $2$，因此最远可以到达的位置被更新为 $2$；\n\n- 我们遍历到位置 $1$，由于 $1 \\leq 2$，因此位置 $1$ 可达。我们用 $1$ 加上它可以跳跃的最大长度 $3$，将最远可以到达的位置更新为 $4$。由于 $4$ 大于等于最后一个位置 $4$，因此我们直接返回 `True`。\n\n我们再来看看题目中的示例二\n\n```\n[3, 2, 1, 0, 4]\n```\n\n- 我们一开始在位置 $0$，可以跳跃的最大长度为 $3$，因此最远可以到达的位置被更新为 $3$；\n\n- 我们遍历到位置 $1$，由于 $1 \\leq 3$，因此位置 $1$ 可达，加上它可以跳跃的最大长度 $2$ 得到 $3$，没有超过最远可以到达的位置；\n\n- 位置 $2$、位置 $3$ 同理，最远可以到达的位置不会被更新；\n\n- 我们遍历到位置 $4$，由于 $4 > 3$，因此位置 $4$ 不可达，我们也就不考虑它可以跳跃的最大长度了。\n\n在遍历完成之后，位置 $4$ 仍然不可达，因此我们返回 `False`。\n\n```Java [sol1-Java]\npublic class Solution {\n    public boolean canJump(int[] nums) {\n        int n = nums.length;\n        int rightmost = 0;\n        for (int i = 0; i < n; ++i) {\n            if (i <= rightmost) {\n                rightmost = Math.max(rightmost, i + nums[i]);\n                if (rightmost >= n - 1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n```\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        int n = nums.size();\n        int rightmost = 0;\n        for (int i = 0; i < n; ++i) {\n            if (i <= rightmost) {\n                rightmost = max(rightmost, i + nums[i]);\n                if (rightmost >= n - 1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n};\n```\n```Python [sol1-Python3]\nclass Solution:\n    def canJump(self, nums: List[int]) -> bool:\n        n, rightmost = len(nums), 0\n        for i in range(n):\n            if i <= rightmost:\n                rightmost = max(rightmost, i + nums[i])\n                if rightmost >= n - 1:\n                    return True\n        return False\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组的大小。只需要访问 `nums` 数组一遍，共 $n$ 个位置。\n\n- 空间复杂度：$O(1)$，不需要额外的空间开销。",
      "createdAt": "2020-04-15T06:26:50.494860+00:00",
      "hitCount": 178397,
      "identifier": "5NzQEB",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "55-by-ikaruga",
        "title": "【跳跃游戏】别想那么多，就挨着跳吧"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "jump-game"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 191,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 7,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "tiao-yue-you-xi-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺 视频题解 📖 文字题解 方法一：贪心 我们可以用贪心的方法解决这个问题。 设想一下，对于数组中的任意一个位置 $y$，我们如何判断它是否可以到达？根据题目的描述，只要存在一个位置 $x$，它本身可以到达，并且它跳跃的最大长度为 $x + \\textit{nums}[x]$，这个值大于等于 $y$，即 $x + \\t",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "跳跃游戏",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 406,
        "id": 203549,
        "viewCount": 127090
      },
      "uuid": "5NzQEB",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/AAA8C5CD6B5C4AF183C4EF1056CDED88-6-2.png",
          "duration": 539.9467,
          "videoId": "ce547e25c74e4a788f20cf6fd860512c"
        }
      ]
    }
  }
}
