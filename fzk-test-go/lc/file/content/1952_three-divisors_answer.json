{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：枚举正除数\n\n**思路与算法**\n\n为了计算整数 $n$ 的正除数数目，一种常见的思路是遍历 $[1, n]$ 闭区间内的所有正整数。但对于任意一个大于等于 $\\left\\lfloor \\sqrt{n} \\right\\rfloor$ （其中 $\\left\\lfloor \\dots \\right\\rfloor$ 为向下取整）的正除数 $x$，$n / x$ 也是 $n$ 的正除数，且一定小于等于 $\\left\\lfloor \\sqrt{n} \\right\\rfloor$。\n\n因此，我们只需遍历 $[1, \\left\\lfloor \\sqrt{n} \\right\\rfloor]$ 闭区间内的所有正整数，便可以统计出整数 $n$ 的正除数数目。如果整数 $x$ 被 $n$ 整除，那么 $x$ 与 $n / x$ 都是 $n$ 的正除数。此时我们需要根据 $x$ 与 $n / x$ 是否相等来确定新增的正除数数目：\n\n- $x = n / x$，此时新增的正除数数目为 $1$；\n\n- $x \\not = n / x$，此时新增的正除数数目为 $2$。\n\n最终，我们判断正除数总数是否等于 $3$ 并返回答案。\n\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    bool isThree(int n) {\n        int cnt = 0;\n        for (int i = 1; i * i <= n; ++i){\n            if (n % i == 0){\n                if (i != n / i){\n                    // 此时 i 与 n / i 为不同整数\n                    cnt += 2;\n                }\n                else{\n                    // 此时 i 与 n / i 相等\n                    cnt += 1;\n                }\n            }\n        }\n        return cnt == 3;\n    }\n};\n```\n\n```Python [sol1-Python3]\nfrom math import sqrt\n\nclass Solution:\n    def isThree(self, n: int) -> bool:\n        cnt = 0\n        i = 1\n        while i * i <= n:\n            if n % i == 0:\n                if i != n // i:\n                    # 此时 i 与 n / i 为不同整数\n                    cnt += 2\n                else:\n                    /# 此时 i 与 n / i 相等\n                    cnt += 1\n            i += 1\n        return cnt == 3\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\sqrt{n})$，其中 $n$ 为整数的大小。即为遍历 $[1, \\left\\lfloor \\sqrt{n} \\right\\rfloor]$ 内整数并统计正除数数量的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-08-01T04:17:11.529097+00:00",
      "hitCount": 1808,
      "identifier": "lbxZ6U",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "kai-ping-fang-gen-pan-duan-shi-fou-wei-s-thx9",
        "title": "开平方根 判断是否为素数"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "three-divisors"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "san-chu-shu-by-leetcode-solution-z1b4",
      "status": "PUBLISHED",
      "summary": "方法一：枚举正除数 思路与算法 为了计算整数 $n$ 的正除数数目，一种常见的思路是遍历 $[1, n]$ 闭区间内的所有正整数。但对于任意一个大于等于 $\\left\\lfloor \\sqrt{n} \\right\\rfloor$ （其中 $\\left\\lfloor \\dots \\right\\rfloor$ 为向下取整）",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "三除数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 9,
        "id": 908413,
        "viewCount": 1502
      },
      "uuid": "lbxZ6U",
      "videosInfo": []
    }
  }
}
