{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "可以枚举 $[1, 2, ..., n]$ 的排列，对于每一个排列，检查有多少个不同的整数，枚举全排列的时间复杂度是：$O(n!)$。注意到题目中给出的数据的范围：$1 \\le k < n \\le 10^4$，检查有多少个不同的整数还需要一次遍历，总的时间复杂度为 $O((n + 1)!)$，是不符合题目要求的。\n\n#### 方法：构造\n\n如何避免枚举 $[1, 2, ..., n]$ 的排列呢，需要我们观察一些特殊的用例：\n\n+ 顺序数组或者逆序数组：$[1, 2, 3, ..., n]$ ，呈等差数列形式，此时公差为 $1$，即 $k = 1$；\n+ 最大值和最小值交错出现： $[1, n, 2, n-1, 3, n-2, ....]$，此时相邻的两个数的差的绝对值不会出现重复，$k$ 达到最大，$k = n - 1$。大家可以用一个具体的例子验证一下。\n\n当 $n=6$ 和 $k=3$ 时，可以构造数组 $[1, 2, 3, 6, 4, 5]$ 是符合要求的，如何得到它们呢？\n\n+ 构造等差数列： $[1，2]$，此时题目中给出的差的列表为 $[1]$；\n+ 构造交错数列：$\\text{[1，4，2，3]}$，此时题目中给出的差的列表为 $[3,2,1]$，再给每个元素加 $2$，得到 $[3，6，4，5]$。\n\n代码的编写没有难度，一些加 $1$ 、减 $1$ 的地方大家如果弄不清楚的话，拿具体的例子（不要太特殊不容易发现一般规律，也不要太复杂，容易把自己绕晕）研究一下就可以了。\n\n**代码**\n\n```Java []\nclass Solution {\n\n    public int[] constructArray(int n, int k) {\n        int[] res = new int[n];\n\n        // 第 1 步：构造等差数列，把 1 到 n - k - 1 赋值结果数组的前面\n        for (int i = 0; i < n - k - 1; i++) {\n            res[i] = i + 1;\n        }\n\n        // 第 2 步：构造交错数列，下标从 n - k - 1 开始，数值从 n - k 开始\n        // 控制交错的变量\n        int j = 0;\n\n        int left = n - k;\n        int right = n;\n        for (int i = n - k - 1; i < n; i++) {\n            if (j % 2 == 0) {\n                res[i] = left;\n                left++;\n            } else {\n                res[i] = right;\n                right--;\n            }\n            j++;\n        }\n        return res;\n    }\n}\n```\n\n**复杂度分析**\n\n+ 时间复杂度：$O(n)$；\n+ 空间复杂度：\n  + 如果计算保存答案的数组的空间，空间复杂度为 $O(n)$；\n  + 如果不计算保存答案的数组的空间，空间复杂度为 $O(1)$。",
      "createdAt": "2019-10-29T06:25:56.918906+00:00",
      "hitCount": 7924,
      "identifier": "02QEmz",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "fan-zhao-xie-de-yi-ge-fang-fa-by-yuriwan-ovxb",
        "title": "反着写的一个方法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "beautiful-arrangement-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 12,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "you-mei-de-pai-lie-ii-by-leetcode",
      "status": "PUBLISHED",
      "summary": "可以枚举 [1, 2, ..., n] 的排列，对于每一个排列，检查有多少个不同的整数，枚举全排列的时间复杂度是：O(n!)。注意到题目中给出的数据的范围：1 \\le k < n \\le 10^4，检查有多少个不同的整数还需要一次遍历，总的时间复杂度为 O((n + 1)!)，是不符合题目要求的。\n 方法：构造\n如何避",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "优美的排列 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 16,
        "id": 38857,
        "viewCount": 5936
      },
      "uuid": "02QEmz",
      "videosInfo": []
    }
  }
}
