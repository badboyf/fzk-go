{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "####  方法一：记录存在的字母\n**算法：**\n- 我们可以扫描 `letters` 记录字母是否存在。我们可以用大小为 26 的数组或者 `Set` 来实现。\n- 然后，从下一个字母（从比目标大一个的字母开始）开始检查一下是否存在。如果有的话则是答案。\n\n```Python [ ]\nclass Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        seen = set(letters)\n        for i in xrange(1, 26):\n            cand = chr((ord(target) - ord('a') + i) % 26 + ord('a'))\n            if cand in seen:\n                return cand\n```\n\n```Java [ ]\nclass Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        boolean[] seen = new boolean[26];\n        for (char c: letters)\n            seen[c - 'a'] = true;\n\n        while (true) {\n            target++;\n            if (target > 'z') target = 'a';\n            if (seen[target - 'a']) return target;\n        }\n    }\n}\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$。$N$ 指的是 `letters` 的长度，我们扫描数组的每个元素。\n* 空间复杂度：$O(1)$。`seen` 最大的空间为 26。\n\n\n####  方法二：线性扫描\n**算法：**\n由于 `letters` 已经有序，当我们从左往右扫描找到比目标字母大字母则该字母就是答案。否则(`letters` 不为空)答案将是 `letters[0]`。\n\n```Python [ ]\nclass Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        for c in letters:\n            if c > target:\n                return c\n        return letters[0]\n```\n\n```Java [ ]\nclass Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        for (char c: letters)\n            if (c > target) return c;\n        return letters[0];\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(N)$。$N$ 指的是 `letters` 的长度，我们扫描数组的每个元素。\n* 空间复杂度：$O(1)$。只使用了指针。\n\n\n####  方法三：二分查找\n**算法：**\n- 如方法二一样，我们想要在有序数组中查找比目标字母大的最小字母，可以使用二分查找：让我们找到最右边的位置将 `target` 插入 `letters` 中，以便它保持排序。\n- 二分查找分几轮进行，在每一轮中我们保持循环始终在区间 `[lo，hi]`。让 `mi = (lo + hi) / 2`。若 `letters[mi] <= target`，则我们修改查找区间为 `[mi + 1, hi]`，否则，我们修改为 `[lo, mi]`\n- 最后，如果插入位置是最后一个位置 `letters.length`，则返回 `letters[0]`。这就是模运算的运用。\n\n```Python [ ]\nclass Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        index = bisect.bisect(letters, target)\n        return letters[index % len(letters)]\n```\n\n```Java [ ]\nclass Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        int lo = 0, hi = letters.length;\n        while (lo < hi) {\n            int mi = lo + (hi - lo) / 2;\n            if (letters[mi] <= target) lo = mi + 1;\n            else hi = mi;\n        }\n        return letters[lo % letters.length];\n    }\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log N)$。$N$ 指的是 `letters` 的长度，我们只查看数组中的 $\\log n$ 个元素。\n* 空间复杂度：$O(1)$。只使用了指针。",
      "createdAt": "2019-10-29T04:15:50.962014+00:00",
      "hitCount": 15767,
      "identifier": "8L9yHf",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "er-fen-zhi-xun-zhao-bi-mu-biao-zi-mu-da-xczre",
        "title": "二分之寻找比目标字母大的最小字母"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-smallest-letter-greater-than-target"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 14,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "xun-zhao-bi-mu-biao-zi-mu-da-de-zui-xiao-zi-mu-by-",
      "status": "PUBLISHED",
      "summary": "§ 方法一：记录存在的字母\n算法：\n\n我们可以扫描 letters 记录字母是否存在。我们可以用大小为 26 的数组或者 Set 来实现。\n然后，从下一个字母（从比目标大一个的字母开始）开始检查一下是否存在。如果有的话则是答案。\n\n复杂度分析\n\n时间复杂度：O(N)。N 指的是 letters 的长度，我们扫描数组的每",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "寻找比目标字母大的最小字母",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 35,
        "id": 38783,
        "viewCount": 12398
      },
      "uuid": "8L9yHf",
      "videosInfo": []
    }
  }
}
