{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：寻找最大值\n\n**思路与算法**\n\n由于题目保证了 $\\textit{nums}[i] \\neq \\textit{nums}[i+1]$，那么数组 $\\textit{nums}$ 中最大值两侧的元素一定严格小于最大值本身。因此，最大值所在的位置就是一个可行的峰值位置。\n\n我们对数组 $\\textit{nums}$ 进行一次遍历，找到最大值对应的位置即可。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        return max_element(nums.begin(), nums.end()) - nums.begin();\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findPeakElement(int[] nums) {\n        int idx = 0;\n        for (int i = 1; i < nums.length; ++i) {\n            if (nums[i] > nums[idx]) {\n                idx = i;\n            }\n        }\n        return idx;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindPeakElement(int[] nums) {\n        int idx = 0;\n        for (int i = 1; i < nums.Length; ++i) {\n            if (nums[i] > nums[idx]) {\n                idx = i;\n            }\n        }\n        return idx;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        idx = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[idx]:\n                idx = i\n        return idx\n```\n\n```go [sol1-Golang]\nfunc findPeakElement(nums []int) (idx int) {\n    for i, v := range nums {\n        if v > nums[idx] {\n            idx = i\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar findPeakElement = function(nums) {\n    let idx = 0;\n    for (let i = 1; i < nums.length; ++i) {\n        if (nums[i] > nums[idx]) {\n            idx = i;\n        }\n    }\n    return idx;\n};\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：迭代爬坡\n\n**思路与算法**\n\n俗话说「人往高处走，水往低处流」。如果我们从一个位置开始，不断地向高处走，那么最终一定可以到达一个峰值位置。\n\n因此，我们首先在 $[0, n)$ 的范围内随机一个初始位置 $i$，随后根据 $\\textit{nums}[i-1], \\textit{nums}[i], \\textit{nums}[i+1]$ 三者的关系决定向哪个方向走：\n\n- 如果 $\\textit{nums}[i-1] < \\textit{nums}[i] > \\textit{nums}[i+1]$，那么位置 $i$ 就是峰值位置，我们可以直接返回 $i$ 作为答案；\n\n- 如果 $\\textit{nums}[i-1] < \\textit{nums}[i] < \\textit{nums}[i+1]$，那么位置 $i$ 处于上坡，我们需要往右走，即 $i \\leftarrow i+1$；\n\n- 如果 $\\textit{nums}[i-1] > \\textit{nums}[i] > \\textit{nums}[i+1]$，那么位置 $i$ 处于下坡，我们需要往左走，即 $i \\leftarrow i-1$；\n\n- 如果 $\\textit{nums}[i-1] > \\textit{nums}[i] < \\textit{nums}[i+1]$，那么位置 $i$ 位于山谷，两侧都是上坡，我们可以朝任意方向走。\n\n如果我们规定对于最后一种情况往右走，那么当位置 $i$ 不是峰值位置时：\n\n- 如果 $\\textit{nums}[i] < \\textit{nums}[i+1]$，那么我们往右走；\n\n- 如果 $\\textit{nums}[i] > \\textit{nums}[i+1]$，那么我们往左走。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int n = nums.size();\n        int idx = rand() % n;\n\n        // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n        // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n        auto get = [&](int i) -> pair<int, int> {\n            if (i == -1 || i == n) {\n                return {0, 0};\n            }\n            return {1, nums[i]};\n        };\n\n        while (!(get(idx - 1) < get(idx) && get(idx) > get(idx + 1))) {\n            if (get(idx) < get(idx + 1)) {\n                idx += 1;\n            }\n            else {\n                idx -= 1;\n            }\n        }\n        \n        return idx;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int findPeakElement(int[] nums) {\n        int n = nums.length;\n        int idx = (int) (Math.random() * n);\n\n        while (!(compare(nums, idx - 1, idx) < 0 && compare(nums, idx, idx + 1) > 0)) {\n            if (compare(nums, idx, idx + 1) < 0) {\n                idx += 1;\n            } else {\n                idx -= 1;\n            }\n        }\n        \n        return idx;\n    }\n\n    // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n    // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n    public int[] get(int[] nums, int idx) {\n        if (idx == -1 || idx == nums.length) {\n            return new int[]{0, 0};\n        }\n        return new int[]{1, nums[idx]};\n    }\n\n    public int compare(int[] nums, int idx1, int idx2) {\n        int[] num1 = get(nums, idx1);\n        int[] num2 = get(nums, idx2);\n        if (num1[0] != num2[0]) {\n            return num1[0] > num2[0] ? 1 : -1;\n        }\n        if (num1[1] == num2[1]) {\n            return 0;\n        }\n        return num1[1] > num2[1] ? 1 : -1;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindPeakElement(int[] nums) {\n        int n = nums.Length;\n        int idx = new Random().Next(n);\n\n        while (!(Compare(nums, idx - 1, idx) < 0 && Compare(nums, idx, idx + 1) > 0)) {\n            if (Compare(nums, idx, idx + 1) < 0) {\n                idx += 1;\n            } else {\n                idx -= 1;\n            }\n        }\n        \n        return idx;\n    }\n\n    // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n    // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n    public int[] Get(int[] nums, int idx) {\n        if (idx == -1 || idx == nums.Length) {\n            return new int[]{0, 0};\n        }\n        return new int[]{1, nums[idx]};\n    }\n\n    public int Compare(int[] nums, int idx1, int idx2) {\n        int[] num1 = Get(nums, idx1);\n        int[] num2 = Get(nums, idx2);\n        if (num1[0] != num2[0]) {\n            return num1[0] > num2[0] ? 1 : -1;\n        }\n        if (num1[1] == num2[1]) {\n            return 0;\n        }\n        return num1[1] > num2[1] ? 1 : -1;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        n = len(nums)\n        idx = random.randint(0, n - 1)\n\n        # 辅助函数，输入下标 i，返回 nums[i] 的值\n        # 方便处理 nums[-1] 以及 nums[n] 的边界情况\n        def get(i: int) -> int:\n            if i == -1 or i == n:\n                return float('-inf')\n            return nums[i]\n        \n        while not (get(idx - 1) < get(idx) > get(idx + 1)):\n            if get(idx) < get(idx + 1):\n                idx += 1\n            else:\n                idx -= 1\n        \n        return idx\n```\n\n```go [sol2-Golang]\nfunc findPeakElement(nums []int) int {\n    n := len(nums)\n    idx := rand.Intn(n)\n\n    // 辅助函数，输入下标 i，返回 nums[i] 的值\n    // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n    get := func(i int) int {\n        if i == -1 || i == n {\n            return math.MinInt64\n        }\n        return nums[i]\n    }\n\n    for !(get(idx-1) < get(idx) && get(idx) > get(idx+1)) {\n        if get(idx) < get(idx+1) {\n            idx++\n        } else {\n            idx--\n        }\n    }\n\n    return idx\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar findPeakElement = function(nums) {\n    const n = nums.length;\n    let idx = parseInt(Math.random() * n);\n\n    while (!(compare(nums, idx - 1, idx) < 0 && compare(nums, idx, idx + 1) > 0)) {\n        if (compare(nums, idx, idx + 1) < 0) {\n            idx += 1;\n        } else {\n            idx -= 1;\n        }\n    }\n    \n    return idx;\n}\n\n// 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n// 方便处理 nums[-1] 以及 nums[n] 的边界情况\nconst get = (nums, idx) => {\n    if (idx === -1 || idx === nums.length) {\n        return [0, 0];\n    }\n    return [1, nums[idx]];\n}\n\nconst compare = (nums, idx1, idx2) => {\n    const num1 = get(nums, idx1);\n    const num2 = get(nums, idx2);\n    if (num1[0] !== num2[0]) {\n        return num1[0] > num2[0] ? 1 : -1;\n    }\n    if (num1[1] === num2[1]) {\n        return 0;\n    }\n    return num1[1] > num2[1] ? 1 : -1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。在最坏情况下，数组 $\\textit{nums}$ 单调递增，并且我们随机到位置 $0$，这样就需要向右走到数组 $\\textit{nums}$ 的最后一个位置。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法三：方法二的二分查找优化\n\n**思路与算法**\n\n我们可以发现，如果 $\\textit{nums}[i] < \\textit{nums}[i+1]$，并且我们从位置 $i$ 向右走到了位置 $i+1$，那么位置 $i$ 左侧的所有位置是不可能在后续的迭代中走到的。\n\n> 这是因为我们每次向左或向右移动**一个**位置，要想「折返」到位置 $i$ 以及其左侧的位置，我们首先需要在位置 $i+1$ 向左走到位置 $i$，但这是不可能的。\n\n并且根据方法二，我们知道位置 $i+1$ 以及其右侧的位置中一定有一个峰值，因此我们可以设计出如下的一个算法：\n\n- 对于当前可行的下标范围 $[l, r]$，我们随机一个下标 $i$；\n\n- 如果下标 $i$ 是峰值，我们返回 $i$ 作为答案；\n\n- 如果 $\\textit{nums}[i] < \\textit{nums}[i+1]$，那么我们抛弃 $[l, i]$ 的范围，在剩余 $[i+1, r]$ 的范围内继续随机选取下标；\n\n- 如果 $\\textit{nums}[i] > \\textit{nums}[i+1]$，那么我们抛弃 $[i, r]$ 的范围，在剩余 $[l, i-1]$ 的范围内继续随机选取下标。\n\n在上述算法中，如果我们固定选取 $i$ 为 $[l, r]$ 的中点，那么每次可行的下标范围会减少一半，成为一个类似二分查找的方法，时间复杂度为 $O(\\log n)$。\n\n**代码**\n\n```C++ [sol3-C++]\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int n = nums.size();\n\n        // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n        // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n        auto get = [&](int i) -> pair<int, int> {\n            if (i == -1 || i == n) {\n                return {0, 0};\n            }\n            return {1, nums[i]};\n        };\n\n        int left = 0, right = n - 1, ans = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (get(mid - 1) < get(mid) && get(mid) > get(mid + 1)) {\n                ans = mid;\n                break;\n            }\n            if (get(mid) < get(mid + 1)) {\n                left = mid + 1;\n            }\n            else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol3-Java]\nclass Solution {\n    public int findPeakElement(int[] nums) {\n        int n = nums.length;\n        int left = 0, right = n - 1, ans = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (compare(nums, mid - 1, mid) < 0 && compare(nums, mid, mid + 1) > 0) {\n                ans = mid;\n                break;\n            }\n            if (compare(nums, mid, mid + 1) < 0) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n    // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n    public int[] get(int[] nums, int idx) {\n        if (idx == -1 || idx == nums.length) {\n            return new int[]{0, 0};\n        }\n        return new int[]{1, nums[idx]};\n    }\n\n    public int compare(int[] nums, int idx1, int idx2) {\n        int[] num1 = get(nums, idx1);\n        int[] num2 = get(nums, idx2);\n        if (num1[0] != num2[0]) {\n            return num1[0] > num2[0] ? 1 : -1;\n        }\n        if (num1[1] == num2[1]) {\n            return 0;\n        }\n        return num1[1] > num2[1] ? 1 : -1;\n    }\n}\n```\n\n```C# [sol3-C#]\npublic class Solution {\n    public int FindPeakElement(int[] nums) {\n        int n = nums.Length;\n        int left = 0, right = n - 1, ans = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (Compare(nums, mid - 1, mid) < 0 && Compare(nums, mid, mid + 1) > 0) {\n                ans = mid;\n                break;\n            }\n            if (Compare(nums, mid, mid + 1) < 0) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n    // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n    public int[] Get(int[] nums, int idx) {\n        if (idx == -1 || idx == nums.Length) {\n            return new int[]{0, 0};\n        }\n        return new int[]{1, nums[idx]};\n    }\n\n    public int Compare(int[] nums, int idx1, int idx2) {\n        int[] num1 = Get(nums, idx1);\n        int[] num2 = Get(nums, idx2);\n        if (num1[0] != num2[0]) {\n            return num1[0] > num2[0] ? 1 : -1;\n        }\n        if (num1[1] == num2[1]) {\n            return 0;\n        }\n        return num1[1] > num2[1] ? 1 : -1;\n    }\n}\n```\n\n```Python [sol3-Python3]\nclass Solution:\n    def findPeakElement(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        # 辅助函数，输入下标 i，返回 nums[i] 的值\n        # 方便处理 nums[-1] 以及 nums[n] 的边界情况\n        def get(i: int) -> int:\n            if i == -1 or i == n:\n                return float('-inf')\n            return nums[i]\n        \n        left, right, ans = 0, n - 1, -1\n        while left <= right:\n            mid = (left + right) // 2\n            if get(mid - 1) < get(mid) > get(mid + 1):\n                ans = mid\n                break\n            if get(mid) < get(mid + 1):\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return ans\n```\n\n```go [sol3-Golang]\nfunc findPeakElement(nums []int) int {\n    n := len(nums)\n\n    // 辅助函数，输入下标 i，返回 nums[i] 的值\n    // 方便处理 nums[-1] 以及 nums[n] 的边界情况\n    get := func(i int) int {\n        if i == -1 || i == n {\n            return math.MinInt64\n        }\n        return nums[i]\n    }\n\n    left, right := 0, n-1\n    for {\n        mid := (left + right) / 2\n        if get(mid-1) < get(mid) && get(mid) > get(mid+1) {\n            return mid\n        }\n        if get(mid) < get(mid+1) {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n}\n```\n\n```JavaScript [sol3-JavaScript]\nvar findPeakElement = function(nums) {\n    const n = nums.length;\n    let left = 0, right = n - 1, ans = -1;\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n        if (compare(nums, mid - 1, mid) < 0 && compare(nums, mid, mid + 1) > 0) {\n            ans = mid;\n            break;\n        }\n        if (compare(nums, mid, mid + 1) < 0) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return ans;\n}\n\n// 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i])\n// 方便处理 nums[-1] 以及 nums[n] 的边界情况\nconst get = (nums, idx) => {\n    if (idx === -1 || idx === nums.length) {\n        return [0, 0];\n    }\n    return [1, nums[idx]];\n}\n\nconst compare = (nums, idx1, idx2) => {\n    const num1 = get(nums, idx1);\n    const num2 = get(nums, idx2);\n    if (num1[0] !== num2[0]) {\n        return num1[0] > num2[0] ? 1 : -1;\n    }\n    if (num1[1] === num2[1]) {\n        return 0;\n    }\n    return num1[1] > num2[1] ? 1 : -1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(\\log n)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-09-14T15:35:47.929666+00:00",
      "hitCount": 41063,
      "identifier": "vTbese",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hua-jie-suan-fa-162-xun-zhao-feng-zhi-by-guanpengc",
        "title": "画解算法：162. 寻找峰值"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-peak-element"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 57,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "xun-zhao-feng-zhi-by-leetcode-solution-96sj",
      "status": "PREPUBLISH",
      "summary": "方法一：寻找最大值 思路与算法 由于题目保证了 $\\textit{nums}[i] \\neq \\textit{nums}[i+1]$，那么数组 $\\textit{nums}$ 中最大值两侧的元素一定严格小于最大值本身。因此，最大值所在的位置就是一个可行的峰值位置。 我们对数组 $\\textit{nums}$ 进行一次遍",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Enumeration",
          "nameTranslated": "枚举",
          "slug": "enumeration",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "寻找峰值",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 129,
        "id": 998152,
        "viewCount": 28213
      },
      "uuid": "vTbese",
      "videosInfo": []
    }
  }
}
