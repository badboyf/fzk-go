{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：使用 `CASE`【通过】\n\n**算法**\n\n对于所有座位 id 是奇数的学生，修改其 id 为 id+1，如果最后一个座位 id 也是奇数，则最后一个座位 id 不修改。对于所有座位 id 是偶数的学生，修改其 id 为 id-1。\n\n首先查询座位的数量。\n\n```mysql [snippet1-MySQL]\nSELECT\n    COUNT(*) AS counts\nFROM\n    seat\n```\n\n然后使用 `CASE` 条件和 `MOD` 函数修改每个学生的座位 id。\n\n**MySQL**\n\n```mysql [solution1-MySQL]\nSELECT\n    (CASE\n        WHEN MOD(id, 2) != 0 AND counts != id THEN id + 1\n        WHEN MOD(id, 2) != 0 AND counts = id THEN id\n        ELSE id - 1\n    END) AS id,\n    student\nFROM\n    seat,\n    (SELECT\n        COUNT(*) AS counts\n    FROM\n        seat) AS seat_counts\nORDER BY id ASC;\n```\n\n\n#### 方法二：使用位操作和 `COALESCE()`【通过】\n\n**算法**\n\n使用 `(id+1)^1-1` 计算交换后每个学生的座位 id。\n\n```mysql [snippet2-MySQL]\nSELECT id, (id+1)^1-1, student FROM seat;\n```\n\n```\n| id | (id+1)^1-1 | student |\n|----|------------|---------|\n| 1  | 2          | Abbot   |\n| 2  | 1          | Doris   |\n| 3  | 4          | Emerson |\n| 4  | 3          | Green   |\n| 5  | 6          | Jeames  |\n```\n\n然后连接原来的座位表和更新 id 后的座位表。\n\n```mysql [snippet3-MySQL]\nSELECT\n    *\nFROM\n    seat s1\n        LEFT JOIN\n    seat s2 ON (s1.id+1)^1-1 = s2.id\nORDER BY s1.id;\n```\n\n```\n| id | student | id | student |\n|----|---------|----|---------|\n| 1  | Abbot   | 2  | Doris   |\n| 2  | Doris   | 1  | Abbot   |\n| 3  | Emerson | 4  | Green   |\n| 4  | Green   | 3  | Emerson |\n| 5  | Jeames  |    |         |\n```\n\n>注：前两列来自表 s1，后两列来自表 s2。\n\n最后输出 s1.id 和 s2.student。但是 id=5 的学生，s1.student 正确，s2.student 为 NULL。因此使用 [`COALESCE()`](https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#function_coalesce) 函数为最后一行记录生成正确的输出。\n\n**MySQL**\n\n```mysql [solution2-MySQL]\nSELECT\n    s1.id, COALESCE(s2.student, s1.student) AS student\nFROM\n    seat s1\n        LEFT JOIN\n    seat s2 ON ((s1.id + 1) ^ 1) - 1 = s2.id\nORDER BY s1.id;\n```",
      "createdAt": "2019-12-05T08:25:08.560281+00:00",
      "hitCount": 43296,
      "identifier": "Q7xPYD",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "qi-shi-shi-yi-dao-zhong-xue-shu-xue-ti-b-iqmy",
        "title": "其实是一道中学数学题"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "exchange-seats"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 48,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "huan-zuo-wei-by-leetcode",
      "status": "PUBLISHED",
      "summary": " 方法一：使用 CASE【通过】\n算法\n对于所有座位 id 是奇数的学生，修改其 id 为 id+1，如果最后一个座位 id 也是奇数，则最后一个座位 id 不修改。对于所有座位 id 是偶数的学生，修改其 id 为 id-1。\n首先查询座位的数量。\n然后使用 CASE 条件和 MOD 函数修改每个学生的座位 id。\n",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "MySQL",
          "nameTranslated": "",
          "slug": "mysql",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "换座位",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 65,
        "id": 50432,
        "viewCount": 28916
      },
      "uuid": "Q7xPYD",
      "videosInfo": []
    }
  }
}
