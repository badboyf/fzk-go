{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：递归\n\n**思路**\n\n令 `trim(node)` 作为该节点上的子树的理想答案。我们可以递归地构建该答案。\n\n**算法**\n\n当 $\\text{node.val > R}$，那么修剪后的二叉树必定出现在节点的左边。\n\n类似地，当 $\\text{node.val < L}$，那么修剪后的二叉树出现在节点的右边。否则，我们将会修剪树的两边。\n\n```java [GoXj8r6W-Java]\nclass Solution {\n    public TreeNode trimBST(TreeNode root, int L, int R) {\n        if (root == null) return root;\n        if (root.val > R) return trimBST(root.left, L, R);\n        if (root.val < L) return trimBST(root.right, L, R);\n\n        root.left = trimBST(root.left, L, R);\n        root.right = trimBST(root.right, L, R);\n        return root;\n    }\n}\n```\n```python [GoXj8r6W-Python]\nclass Solution(object):\n    def trimBST(self, root, L, R):\n        def trim(node):\n            if not node:\n                return None\n            elif node.val > R:\n                return trim(node.left)\n            elif node.val < L:\n                return trim(node.right)\n            else:\n                node.left = trim(node.left)\n                node.right = trim(node.right)\n                return node\n\n        return trim(root)\n```\n\n\n**复杂度分析** \n\n* 时间复杂度：$O(N)$，其中 $N$ 是给定的树的全部节点。我们最多访问每个节点一次。\n\n* 空间复杂度：$O(N)$，即使我们没有明确使用任何额外的内存，在最糟糕的情况下，我们递归调用的栈可能与节点数一样大。",
      "createdAt": "2019-01-07T16:11:24.914585+00:00",
      "hitCount": 21857,
      "identifier": "NfqOWV",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "lindi-gui-by-linniu-bxsh",
        "title": "[Lin]递归"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "trim-a-binary-search-tree"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 44,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "xiu-jian-er-cha-sou-suo-shu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "思路\n令 trim(node) 作为该节点上的子树的理想答案。我们可以递归地构建该答案。\n算法\n当 \\text{node.val > R}，那么修剪后的二叉树必定出现在节点的左边。\n类似地，当 \\text{node.val < L}，那么修剪后的二叉树出现在节点的右边。否则，我们将会修剪树的两边。\n复杂度分析",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "修剪二叉搜索树",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 81,
        "id": 3577,
        "viewCount": 16028
      },
      "uuid": "NfqOWV",
      "videosInfo": []
    }
  }
}
