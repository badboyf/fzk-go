{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：动态规划 + 哈希表\n\n我们首先考虑至少有两个元素的等差子序列，下文将其称作**弱等差子序列**。\n\n由于尾项和公差可以确定一个等差数列，因此我们定义状态 $f[i][d]$ 表示尾项为 $\\textit{nums}[i]$，公差为 $d$ 的弱等差子序列的个数。\n\n我们用一个二重循环去遍历 $\\textit{nums}$ 中的所有元素对 $(\\textit{nums}[i],\\textit{nums}[j])$，其中 $j<i$。将 $\\textit{nums}[i]$ 和 $\\textit{nums}[j]$ 分别当作等差数列的尾项和倒数第二项，则该等差数列的公差 $d=\\textit{nums}[i]-\\textit{nums}[j]$。由于公差相同，我们可以将 $\\textit{nums}[i]$ 加到以 $\\textit{nums}[j]$ 为尾项，公差为 $d$ 的弱等差子序列的末尾，这对应着状态转移 $f[i][d] += f[j][d]$。同时，$(\\textit{nums}[i],\\textit{nums}[j])$ 这一对元素也可以当作一个弱等差子序列，故有状态转移\n\n$$\nf[i][d] += f[j][d] + 1\n$$\n\n由于题目要统计的等差子序列至少有三个元素，我们回顾上述二重循环，其中「将 $\\textit{nums}[i]$ 加到以 $\\textit{nums}[j]$ 为尾项，公差为 $d$ 的弱等差子序列的末尾」这一操作，实际上就构成了一个至少有三个元素的等差子序列，因此我们将循环中的 $f[j][d]$ 累加，即为答案。\n\n代码实现时，由于 $\\textit{nums}[i]$ 的范围很大，所以计算出的公差的范围也很大，我们可以将状态转移数组 $f$ 的第二维用哈希表代替。\n\n```Python [sol1-Python3]\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        ans = 0\n        f = [defaultdict(int) for _ in nums]\n        for i, x in enumerate(nums):\n            for j in range(i):\n                d = x - nums[j]\n                cnt = f[j][d]\n                ans += cnt\n                f[i][d] += cnt + 1\n        return ans\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int numberOfArithmeticSlices(vector<int> &nums) {\n        int ans = 0;\n        int n = nums.size();\n        vector<unordered_map<long long, int>> f(n);\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                long long d = 1LL * nums[i] - nums[j];\n                auto it = f[j].find(d);\n                int cnt = it == f[j].end() ? 0 : it->second;\n                ans += cnt;\n                f[i][d] += cnt + 1;\n            }\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int numberOfArithmeticSlices(int[] nums) {\n        int ans = 0;\n        int n = nums.length;\n        Map<Long, Integer>[] f = new Map[n];\n        for (int i = 0; i < n; ++i) {\n            f[i] = new HashMap<Long, Integer>();\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                long d = 1L * nums[i] - nums[j];\n                int cnt = f[j].getOrDefault(d, 0);\n                ans += cnt;\n                f[i].put(d, f[i].getOrDefault(d, 0) + cnt + 1);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int NumberOfArithmeticSlices(int[] nums) {\n        int ans = 0;\n        int n = nums.Length;\n        Dictionary<long, int>[] f = new Dictionary<long, int>[n];\n        for (int i = 0; i < n; ++i) {\n            f[i] = new Dictionary<long, int>();\n        }\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                long d = 1L * nums[i] - nums[j];\n                int cnt = f[j].ContainsKey(d) ? f[j][d] : 0;\n                ans += cnt;\n                if (f[i].ContainsKey(d)) {\n                    f[i][d] += cnt + 1;\n                } else {\n                    f[i].Add(d, cnt + 1);\n                }\n            }\n        }\n        return ans;\n    }\n}\n```\n\n```go [sol1-Golang]\nfunc numberOfArithmeticSlices(nums []int) (ans int) {\n    f := make([]map[int]int, len(nums))\n    for i, x := range nums {\n        f[i] = map[int]int{}\n        for j, y := range nums[:i] {\n            d := x - y\n            cnt := f[j][d]\n            ans += cnt\n            f[i][d] += cnt + 1\n        }\n    }\n    return\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar numberOfArithmeticSlices = function(nums) {\n    let ans = 0;\n    const n = nums.length;\n    const f = new Map();\n    for (let i = 0; i < n; ++i) {\n        f[i] = new Map();\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < i; ++j) {\n            const d = nums[i] - nums[j];\n            const cnt = f[j].get(d) || 0;\n            ans += cnt;\n            f[i].set(d, (f[i].get(d) || 0) + cnt + 1);\n        }\n    }\n    return ans;\n};\n```\n\n```C [sol1-C]\n#define HASH_FIND_LONG(head, findint, out) HASH_FIND(hh, head, findint, sizeof(long), out)\n#define HASH_ADD_LONG(head, intfield, add) HASH_ADD(hh, head, intfield, sizeof(long), add)\n\nstruct HashTable {\n    long key;\n    int val;\n    UT_hash_handle hh;\n};\n\nint query(struct HashTable** HashTable, long ikey) {\n    struct HashTable* tmp;\n    HASH_FIND_LONG(*HashTable, &ikey, tmp);\n    return tmp == NULL ? 0 : tmp->val;\n}\n\nvoid add(struct HashTable** HashTable, long ikey, int ival) {\n    struct HashTable* tmp;\n    HASH_FIND_LONG(*HashTable, &ikey, tmp);\n    if (tmp == NULL) {\n        tmp = malloc(sizeof(struct HashTable));\n        tmp->key = ikey, tmp->val = ival;\n        HASH_ADD_LONG(*HashTable, key, tmp);\n    } else {\n        tmp->val += ival;\n    }\n}\n\nint numberOfArithmeticSlices(int* nums, int numsSize) {\n    int ans = 0;\n    struct HashTable* hashTable[numsSize];\n    memset(hashTable, 0, sizeof(hashTable));\n    for (int i = 0; i < numsSize; ++i) {\n        for (int j = 0; j < i; ++j) {\n            long long d = 1LL * nums[i] - nums[j];\n            int cnt = query(&hashTable[j], d);\n            ans += cnt;\n            add(&hashTable[i], d, cnt + 1);\n        }\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n^2)$，其中 $n$ 是数组 $\\textit{nums}$ 的长度。\n\n- 空间复杂度：$O(n^2)$。",
      "createdAt": "2021-08-10T15:38:57.714733+00:00",
      "hitCount": 29310,
      "identifier": "1jLjo1",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "gong-shui-san-xie-xiang-jie-ru-he-fen-xi-ykvk",
        "title": "【宫水三叶】详解如何分析「序列 DP」问题（附序列 DP 问题目录）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "arithmetic-slices-ii-subsequence"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 53,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "deng-chai-shu-lie-hua-fen-ii-zi-xu-lie-b-77pl",
      "status": "PUBLISHED",
      "summary": "方法一：动态规划 + 哈希表 我们首先考虑至少有两个元素的等差子序列，下文将其称作弱等差子序列。 由于尾项和公差可以确定一个等差数列，因此我们定义状态 $f[i][d]$ 表示尾项为 $\\textit{nums}[i]$，公差为 $d$ 的弱等差子序列的个数。 我们用一个二重循环去遍历 $\\textit{nums}$ ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "java",
          "nameTranslated": "",
          "slug": "java-11",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "等差数列划分 II - 子序列",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 133,
        "id": 928378,
        "viewCount": 18416
      },
      "uuid": "1jLjo1",
      "videosInfo": []
    }
  }
}
