{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：分数类\n\n**思路**\n\n因为给定的两个数字都表示一个分数，所以我们需要一个分数类去处理这两个分数。它应该能帮助我们将两个分数加起来，并且保证答案为最简形式。\n\n**算法**\n\n我们需要理解给定的两个分数，最困难的问题是如何表示它们。\n\n比如说我们有一个字符串 `S = \"0.(12)\"`。它代表（定义 $r = \\frac{1}{100}$）：\n\n$$\nS = \\frac{12}{100} + \\frac{12}{10000} + \\frac{12}{10^6} + \\frac{12}{10^8} + \\frac{12}{10^{10}} + \\cdots\n$$\n\n$$\nS = 12 * (r + r^2 + r^3 + \\cdots)\n$$\n\n$$\nS = 12 * \\frac{r}{1-r}\n$$\n\n其中 $(r + r^2 + r^3 + \\cdots)$ 是一个等比数列求和问题。\n\n总而言之，对于长度为 $k$ 的重复部分 $x$，会对答案有 $\\frac{xr}{1-r}$ 的贡献，其中 $r = 10^{-k}$。\n\n另外两部分就更容易计算了，因为它们仅仅是对数值的简单翻译。\n\n```java [QFRcSJ8K-Java]\nclass Solution {\n    public boolean isRationalEqual(String S, String T) {\n        Fraction f1 = convert(S);\n        Fraction f2 = convert(T);\n        return f1.n == f2.n && f1.d == f2.d;\n    }\n\n    public Fraction convert(String S) {\n        int state = 0; //whole, decimal, repeating\n        Fraction ans = new Fraction(0, 1);\n        int decimal_size = 0;\n\n        for (String part: S.split(\"[.()]\")) {\n            state++;\n            if (part.isEmpty()) continue;\n            long x = Long.valueOf(part);\n            int sz = part.length();\n\n            if (state == 1) { // whole\n                 ans.iadd(new Fraction(x, 1));\n            } else if (state == 2) { // decimal\n                 ans.iadd(new Fraction(x, (long) Math.pow(10, sz)));\n                 decimal_size = sz;\n            } else { // repeating\n                 long denom = (long) Math.pow(10, decimal_size);\n                 denom *= (long) (Math.pow(10, sz) - 1);\n                 ans.iadd(new Fraction(x, denom));\n            }\n        }\n        return ans;\n    }\n}\n\nclass Fraction {\n    long n, d;\n    Fraction(long n, long d) {\n        long g = gcd(n, d);\n        this.n = n / g;\n        this.d = d / g;\n    }\n\n    public void iadd(Fraction other) {\n        long numerator = this.n * other.d + this.d * other.n;\n        long denominator = this.d * other.d;\n        long g = Fraction.gcd(numerator, denominator);\n        this.n = numerator / g;\n        this.d = denominator / g;\n    }\n\n    static long gcd(long x, long y) {\n        return x != 0 ? gcd(y % x, x) : y;\n    }\n}\n```\n```python [QFRcSJ8K-Python]\nfrom fractions import Fraction\n\nclass Solution(object):\n    def isRationalEqual(self, S, T):\n        def convert(S):\n            if '.' not in S:\n                return Fraction(int(S), 1)\n            i = S.index('.')\n            ans = Fraction(int(S[:i]), 1)\n            S = S[i+1:]\n            if '(' not in S:\n                if S:\n                    ans += Fraction(int(S), 10 ** len(S))\n                return ans\n\n            i = S.index('(')\n            if i:\n                ans += Fraction(int(S[:i]), 10 ** i)\n            S = S[i+1:-1]\n            j = len(S)\n            ans += Fraction(int(S), 10**i * (10**j - 1))\n            return ans\n\n        return convert(S) == convert(T)\n```\n\n\n**复杂度分析**\n\n* 时间复杂度：$O(1)$，因为字符串 $S, T$ 的长度可以看作是 $O(1)$ 级别的。\n\n* 空间复杂度：$O(1)$。\n\n\n\n",
      "createdAt": "2019-01-11T12:57:11.369021+00:00",
      "hitCount": 2339,
      "identifier": "DXQLxr",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "972-cchao-100de-shu-xue-jie-fa-by-ffretu-zepv",
        "title": "972. c++超100的数学解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "equal-rational-numbers"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 5,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "xiang-deng-de-you-li-shu-by-leetcode",
      "status": "PUBLISHED",
      "summary": "思路\n因为给定的两个数字都表示一个分数，所以我们需要一个分数类去处理这两个分数。它应该能帮助我们将两个分数加起来，并且保证答案为最简形式。\n算法\n我们需要理解给定的两个分数，最困难的问题是如何表示它们。\n比如说我们有一个字符串 S = \"0.(12)\"。它代表（定义 r = \\frac{1}{100}）：\nS = \\f",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Math",
          "nameTranslated": "数学",
          "slug": "math",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "相等的有理数",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 3,
        "id": 3582,
        "viewCount": 1461
      },
      "uuid": "DXQLxr",
      "videosInfo": []
    }
  }
}
