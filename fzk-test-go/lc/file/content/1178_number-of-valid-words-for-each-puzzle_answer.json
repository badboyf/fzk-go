{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 前言\n\n我们首先需要理解清楚题目中的字谜规则：\n\n> 对于单词 $\\textit{word}$ 以及谜面 $\\textit{puzzle}$，设 $S_w$ 表示 $\\textit{word}$ 中出现的字母组成的「不重复」集合，$S_p$ 表示 $\\textit{puzzle}$ 中出现的字母组成的集合（由于题目中规定了 $\\textit{puzzle}$ 中出现的字母是不重复的，因此这个集合本身也是「不重复」的）。\n>\n> 如果存在 $S_p$ 的一个子集 $S'_p$，并且 $S'_p$ 包含 $\\textit{puzzle}$ 中的首字母，使得 $S_w = S'_p$，那么 $\\textit{word}$ 就是 $\\textit{puzzle}$ 的谜底。\n\n因此，我们可以设计出解决该字谜问题的一个算法流程：\n\n- 首先我们计算出每一个 $\\textit{word}$ 对应的集合 $S_w$，存放在某一「数据结构」中，便于后续操作中的快速查找；\n\n- 随后我们依次枚举每一个 $\\textit{puzzle}$，计算出其对应的集合 $S_p$，并枚举满足要求的子集 $S'_p$。对于每一个 $S'_p$，我们在「数据结构」中查找其出现的次数，那么所有的 $S'_p$ 出现次数之和就是 $\\textit{puzzle}$ 对应的谜底个数。\n\n存放 $S_w$ 对应的「数据结构」可以有多种选择，本篇题解中会介绍较为常用的两种。\n\n#### 方法一：二进制状态压缩\n\n**思路与算法**\n\n由于题目中规定 $\\textit{word}$ 和 $\\textit{puzzle}$ 均只包含小写字母，因此 $S_w$ 和 $S_p$ 的大小最多为 $26$，我们可以考虑使用一个长度为 $26$ 的二进制数 $b_w$ 或 $b_p$ 来表示这一集合。\n\n> 对于 $b_w$ 从低到高的第 $i$ 个二进制位（$i$ 从 $0$ 开始编号），如果 $S_w$ 中包含第 $i$ 个小写字母，那么对应的二进制位为 $1$，否则为 $0$。 \n\n因此我们可以使用一个哈希映射来表示需要的「数据结构」：对于哈希映射中的每一个键值对，其中的键表示一个长度为 $26$ 的二进制数，值表示其出现的次数，即数组 $\\textit{words}$ 中多少个 $\\textit{word}$ 压缩成的二进制数等于键。构造哈希映射的过程也很简单：我们只需要遍历每一个 $\\textit{word}$，并遍历 $\\textit{word}$ 中的每一个字母，将对应位置的二进制位标记为 $1$，这样就计算出了 $\\textit{word}$ 对应的二进制表示，将其在哈希映射中作为键对应的值增加 $1$ 即可。\n\n对于 $\\textit{puzzle}$ 对应的 $b_p$，我们可以通过相同的方法求出，那么接下来就需要枚举 $b_p$ 的子集 $b'_p$ 了。枚举一个二进制数的子集也有多种方法，这里介绍常用的两种：\n\n- 第一种：由于题目中规定 $\\textit{puzzle}$ 的长度恰好为 $7$，因此我们可以枚举所有 $6$ 位的二进制数（因为 $\\textit{puzzle}$ 中的首字母必须要出现，因此最高位必须是 $1$，我们只需要枚举剩余的 $6$ 位就行了）。对于每个枚举出的 $6$ 位二进制数，我们遍历 $\\textit{puzzle}$ 中除了首字母以外的其余 $6$ 个字母，只有当二进制位为 $1$ 时，我们才将 $\\textit{puzzle}$ 中的字母在二进制表示中的二进制位标记位 $1$。这样我们就得到了每一个 $b'_p$ 对应的二进制表示。\n\n- 第二种：我们也可以使用通用的「枚举二进制子集」的方法，下面给出伪代码：\n\n    ```\n    function get_subset(bitmask)\n        subset = bitmask\n        answer = [bitmask]\n        while subset != 0\n            subset = (subset - 1) & bitmask\n            put subset into the answer list\n        end while\n        return answer\n    end function\n    ```\n\n    其中 $\\texttt{bitmask}$ 表示一个二进制数，$\\texttt{subset}$ 会遍历所有 $\\texttt{bitmask}$ 的子集，并将所有的子集放入 $\\texttt{answer}$ 中。需要注意的是，$\\texttt{bitmask}$ 本身也是 $\\texttt{bitmask}$ 的一个子集，因此 $\\texttt{answer}$ 在初始时就包含 $\\texttt{bitmask}$ 本身。\n\n    与第一种方法类似，我们需要保证 $\\textit{puzzle}$ 中的首字母必须要出现，因此在使用第二种方法枚举子集时，我们先将首字母对应的二进制位标记为 $0$，每枚举到一个子集，就将首字母对应的二进制位标记为 $1$，这样得到的子集都是满足要求的。\n\n在得到了 $b_p$ 的子集 $b'_p$ 后，我们将 $b'_p$ 在哈希映射中对应的值累计入答案，这样 $b_p$ 的所有子集的累加和就是其作为谜面的谜底数量。\n\n**细节**\n\n在遍历 $\\textit{word}$ 时，如果 $b_w$ 中包含的 $1$ 的数量大于 $7$，那么它一定无法作为谜底，因此我们无需将其加入哈希映射中。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {\n        unordered_map<int, int> frequency;\n\n        for (const string& word: words) {\n            int mask = 0;\n            for (char ch: word) {\n                mask |= (1 << (ch - 'a'));\n            }\n            if (__builtin_popcount(mask) <= 7) {\n                ++frequency[mask];\n            }\n        }\n\n        vector<int> ans;\n        for (const string& puzzle: puzzles) {\n            int total = 0;\n\n            // 枚举子集方法一\n            // for (int choose = 0; choose < (1 << 6); ++choose) {\n            //     int mask = 0;\n            //     for (int i = 0; i < 6; ++i) {\n            //         if (choose & (1 << i)) {\n            //             mask |= (1 << (puzzle[i + 1] - 'a'));\n            //         }\n            //     }\n            //     mask |= (1 << (puzzle[0] - 'a'));\n            //     if (frequency.count(mask)) {\n            //         total += frequency[mask];\n            //     }\n            // }\n\n            // 枚举子集方法二\n            int mask = 0;\n            for (int i = 1; i < 7; ++i) {\n                mask |= (1 << (puzzle[i] - 'a'));\n            }\n            int subset = mask;\n            do {\n                int s = subset | (1 << (puzzle[0] - 'a'));\n                if (frequency.count(s)) {\n                    total += frequency[s];\n                }\n                subset = (subset - 1) & mask;\n            } while (subset != mask);\n            \n            ans.push_back(total);\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public List<Integer> findNumOfValidWords(String[] words, String[] puzzles) {\n        Map<Integer, Integer> frequency = new HashMap<Integer, Integer>();\n\n        for (String word : words) {\n            int mask = 0;\n            for (int i = 0; i < word.length(); ++i) {\n                char ch = word.charAt(i);\n                mask |= (1 << (ch - 'a'));\n            }\n            if (Integer.bitCount(mask) <= 7) {\n                frequency.put(mask, frequency.getOrDefault(mask, 0) + 1);\n            }\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        for (String puzzle : puzzles) {\n            int total = 0;\n\n            // 枚举子集方法一\n            // for (int choose = 0; choose < (1 << 6); ++choose) {\n            //     int mask = 0;\n            //     for (int i = 0; i < 6; ++i) {\n            //         if ((choose & (1 << i)) != 0) {\n            //             mask |= (1 << (puzzle.charAt(i + 1) - 'a'));\n            //         }\n            //     }\n            //     mask |= (1 << (puzzle.charAt(0) - 'a'));\n            //     if (frequency.containsKey(mask)) {\n            //         total += frequency.get(mask);\n            //     }\n            // }\n\n            // 枚举子集方法二\n            int mask = 0;\n            for (int i = 1; i < 7; ++i) {\n                mask |= (1 << (puzzle.charAt(i) - 'a'));\n            }\n            int subset = mask;\n            do {\n                int s = subset | (1 << (puzzle.charAt(0) - 'a'));\n                if (frequency.containsKey(s)) {\n                    total += frequency.get(s);\n                }\n                subset = (subset - 1) & mask;\n            } while (subset != mask);\n            \n            ans.add(total);\n        }\n        return ans;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        frequency = collections.Counter()\n\n        for word in words:\n            mask = 0\n            for ch in word:\n                mask |= (1 << (ord(ch) - ord(\"a\")))\n            if str(bin(mask)).count(\"1\") <= 7:\n                frequency[mask] += 1\n        \n        ans = list()\n        for puzzle in puzzles:\n            total = 0\n\n            # 枚举子集方法一\n            # for choose in range(1 << 6):\n            #     mask = 0\n            #     for i in range(6):\n            #         if choose & (1 << i):\n            #             mask |= (1 << (ord(puzzle[i + 1]) - ord(\"a\")))\n            #     mask |= (1 << (ord(puzzle[0]) - ord(\"a\")))\n            #     if mask in frequency:\n            #         total += frequency[mask]\n\n            # 枚举子集方法二\n            mask = 0\n            for i in range(1, 7):\n                mask |= (1 << (ord(puzzle[i]) - ord(\"a\")))\n            \n            subset = mask\n            while subset:\n                s = subset | (1 << (ord(puzzle[0]) - ord(\"a\")))\n                if s in frequency:\n                    total += frequency[s]\n                subset = (subset - 1) & mask\n            \n            # 在枚举子集的过程中，要么会漏掉全集 mask，要么会漏掉空集\n            # 这里会漏掉空集，因此需要额外判断空集\n            if (1 << (ord(puzzle[0]) - ord(\"a\"))) in frequency:\n                total += frequency[1 << (ord(puzzle[0]) - ord(\"a\"))]\n\n            ans.append(total)\n        \n        return ans\n```\n\n```JavaScript [sol1-JavaScript]\nvar findNumOfValidWords = function(words, puzzles) {\n    const frequency = new Map();\n\n    for (const word of words) {\n        let mask = 0;\n        for (const ch of word) {\n            mask |= (1 << (ch.charCodeAt() - 'a'.charCodeAt()));\n        }\n        if (CountOne(mask) <= 7) {\n            frequency.set(mask, (frequency.get(mask) || 0) + 1);\n        }\n    }\n\n    const ans = [];\n    for (const puzzle of puzzles) {\n        let total = 0;\n\n        // 枚举子集方法一\n        // for (let choose = 0; choose < (1 << 6); ++choose) {\n        //     let mask = 0;\n        //     for (let i = 0; i < 6; ++i) {\n        //         if (choose & (1 << i)) {\n        //             mask |= (1 << (puzzle[i + 1].charCodeAt() - 'a'.charCodeAt()));\n        //         }\n        //     }\n        //     mask |= (1 << (puzzle[0].charCodeAt() - 'a'.charCodeAt()));\n        //     if (frequency.has(mask)) {\n        //         total += frequency.get(mask);\n        //     }\n        // }\n        // 枚举子集方法二\n        let mask = 0;\n        for (let i = 1; i < 7; ++i) {\n            mask |= (1 << (puzzle[i].charCodeAt() - 'a'.charCodeAt()));\n        }\n        let subset = mask;\n        while (subset) {\n            let s = subset | (1 << (puzzle[0].charCodeAt() - 'a'.charCodeAt()));\n            if (frequency.has(s)) {\n                total += frequency.get(s);\n            }\n            subset = (subset - 1) & mask;\n        }\n        // 在枚举子集的过程中，要么会漏掉全集 mask，要么会漏掉空集\n        // 这里会漏掉空集，因此需要额外判断空集\n        if (frequency.has(1 << (puzzle[0].charCodeAt() - 'a'.charCodeAt()))) {\n            total += frequency.get(1 << (puzzle[0].charCodeAt() - 'a'.charCodeAt()));\n        }\n        ans.push(total);\n    }\n    return ans;\n};\n\nfunction CountOne(n) {\n    const str = n.toString(2);\n    let count = 0;\n    for (const ch of str) {\n        if (parseInt(ch) === 1) {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\n```go [sol1-Golang]\nfunc findNumOfValidWords(words []string, puzzles []string) []int {\n    const puzzleLength = 7\n    cnt := map[int]int{}\n    for _, s := range words {\n        mask := 0\n        for _, ch := range s {\n            mask |= 1 << (ch - 'a')\n        }\n        if bits.OnesCount(uint(mask)) <= puzzleLength {\n            cnt[mask]++\n        }\n    }\n\n    ans := make([]int, len(puzzles))\n    for i, s := range puzzles {\n        first := 1 << (s[0] - 'a')\n\n        // 枚举子集方法一\n        //for choose := 0; choose < 1<<(puzzleLength-1); choose++ {\n        //    mask := 0\n        //    for j := 0; j < puzzleLength-1; j++ {\n        //        if choose>>j&1 == 1 {\n        //            mask |= 1 << (s[j+1] - 'a')\n        //        }\n        //    }\n        //    ans[i] += cnt[mask|first]\n        //}\n\n        // 枚举子集方法二\n        mask := 0\n        for _, ch := range s[1:] {\n            mask |= 1 << (ch - 'a')\n        }\n        subset := mask\n        for {\n            ans[i] += cnt[subset|first]\n            subset = (subset - 1) & mask\n            if subset == mask {\n                break\n            }\n        }\n    }\n    return ans\n}\n```\n\n```C [sol1-C]\nstruct unordered_map {\n    int key, val;\n    UT_hash_handle hh;\n};\n\nint* findNumOfValidWords(char** words, int wordsSize, char** puzzles, int puzzlesSize, int* returnSize) {\n    struct unordered_map* frequency = NULL;\n\n    for (int i = 0; i < wordsSize; i++) {\n        int n = strlen(words[i]);\n        int mask = 0;\n        for (int j = 0; j < n; j++) {\n            mask |= (1 << (words[i][j] - 'a'));\n        }\n        if (__builtin_popcount(mask) <= 7) {\n            struct unordered_map* tmp;\n            HASH_FIND_INT(frequency, &mask, tmp);\n            if (tmp == NULL) {\n                tmp = malloc(sizeof(struct unordered_map));\n                tmp->key = mask;\n                tmp->val = 1;\n                HASH_ADD_INT(frequency, key, tmp);\n            } else {\n                tmp->val++;\n            }\n        }\n    }\n\n    int* ans = malloc(sizeof(int) * puzzlesSize);\n    *returnSize = 0;\n\n    for (int i = 0; i < puzzlesSize; i++) {\n        int total = 0;\n\n        // 枚举子集方法一\n        // for (int choose = 0; choose < (1 << 6); ++choose) {\n        //     int mask = 0;\n        //     for (int j = 0; j < 6; ++j) {\n        //         if (choose & (1 << j)) {\n        //             mask |= (1 << (puzzles[i][j + 1] - 'a'));\n        //         }\n        //     }\n        //     mask |= (1 << (puzzles[i][0] - 'a'));\n        //     struct unordered_map* tmp;\n        //     HASH_FIND_INT(frequency, &mask, tmp);\n        //     if (tmp != NULL) {\n        //         total += tmp->val;\n        //     }\n        // }\n\n        // 枚举子集方法二\n        int mask = 0;\n        for (int j = 1; j < 7; ++j) {\n            mask |= (1 << (puzzles[i][j] - 'a'));\n        }\n        int subset = mask;\n        do {\n            int s = subset | (1 << (puzzles[i][0] - 'a'));\n            struct unordered_map* tmp;\n            HASH_FIND_INT(frequency, &s, tmp);\n            if (tmp != NULL) {\n                total += tmp->val;\n            }\n            subset = (subset - 1) & mask;\n        } while (subset != mask);\n        ans[(*returnSize)++] = total;\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m|w| + n2^{|p|})$，其中 $m$ 和 $n$ 分别是数组 $\\textit{words}$ 和 $\\textit{puzzles}$ 的长度，$|w|$ 是 $\\textit{word}$ 的最大长度 $50$，$|p|$ 是 $\\textit{puzzle}$ 的最大长度 $7$。时间复杂度分为三部分：\n\n    - 计算所有 $\\textit{word}$ 对应的二进制表示的时间复杂度为 $O(m|w|)$；\n\n    - 计算所有 $\\textit{puzzle}$ 对应的二进制表示的时间复杂度为 $O(n|p|)$；\n\n    - 枚举 $\\textit{puzzle}$ 的子集的时间复杂度为 $O(n2^{|p|-1})$，这里为使用第二种方法的时间复杂度，如果使用第一种方法，那么时间复杂度略高，为 $O(n(|p|-1)2^{|p|-1})$。\n\n    由于 $|p|-1$ 与 $|p|$ 同阶，因此写成 $O(|p|)$ 更加简洁。并且由于第三部分的时间复杂度在渐进意义下严格大于第二部分，因此总时间复杂度即为第一部分与第三部分之和 $O(m|w| + n2^{|p|})$。\n\n- 空间复杂度：$O(m)$，即为哈希映射需要使用的空间，其中最多只包含 $m$ 个键值对。\n\n#### 方法二：字典树\n\n**思路与算法**\n\n由于题目中规定 $\\textit{word}$ 和 $\\textit{puzzle}$ 均只包含小写字母，我们也可以考虑使用字典树来表示需要的「数据结构」。由于方法一中已经详细介绍了每一步的做法，因此方法二中只介绍与方法一不同的地方。\n\n对于每一个 $\\textit{word}$ 对应的集合 $S_w$，我们将 $S_w$ 中的的字母按照字典序进行排序，组成一个字符串，加入字典树中。与方法一中的哈希映射类似，我们需要统计每个字符串在字典树中的出现次数。\n\n对于每一个 $\\textit{puzzle}$ 对应的集合 $S_p$，我们枚举 $S_p$ 的子集，并将子集中的字母按照字典序进行排序，组成一个字符串，在字典树中查询得到其出现次数。需要注意的是，由于 $S_p$ 只是一个普通的集合，而不是二进制表示，因此我们可以使用回溯的方法，在枚举子集的同时维护可以在字典树上进行查询的指针。详细的实现可以见下面的代码。\n\n**细节**\n\n在实际的实现中，我们无需显式地构造出加入字典树以及在字典树中查询需要的字符串，可以考虑使用一些等价的简单数据结构（例如列表）表示字符串。\n\n**代码**\n\n下面给出的 $\\texttt{C++}$ 代码中并未析构字典树申请的堆空间。\n\n```C++ [sol2-C++]\nstruct TrieNode {\n    int frequency = 0;\n    TrieNode* child[26];\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            child[i] = nullptr;\n        }\n    }\n};\n\nclass Solution {\nprivate:\n    TrieNode* root;\n\npublic:\n    vector<int> findNumOfValidWords(vector<string>& words, vector<string>& puzzles) {\n        root = new TrieNode();\n\n        auto add = [&](const string& word) {\n            TrieNode* cur = root;\n            for (char ch: word) {\n                if (!cur->child[ch - 'a']) {\n                    cur->child[ch - 'a'] = new TrieNode();\n                }\n                cur = cur->child[ch - 'a'];\n            }\n            ++cur->frequency;\n        };\n\n        // 在回溯的过程中枚举 puzzle 的所有子集并统计答案\n        // find(puzzle, required, cur, pos) 表示 puzzle 的首字母为 required, 当前搜索到字典树上的 cur 节点，并且准备枚举 puzzle 的第 pos 个字母是否选择（放入子集中）\n        // find 函数的返回值即为谜底的数量\n        function<int(const string&, char, TrieNode*, int)> find = [&](const string& puzzle, char required, TrieNode* cur, int pos) {\n            // 搜索到空节点，不合法，返回 0\n            if (!cur) {\n                return 0;\n            }\n            // 整个 puzzle 搜索完毕，返回谜底的数量\n            if (pos == 7) {\n                return cur->frequency;\n            }\n            \n            // 选择第 pos 个字母\n            int ret = find(puzzle, required, cur->child[puzzle[pos] - 'a'], pos + 1);\n\n            // 当 puzzle[pos] 不为首字母时，可以不选择第 pos 个字母\n            if (puzzle[pos] != required) {\n                ret += find(puzzle, required, cur, pos + 1);\n            }\n            \n            return ret;\n        };\n        \n        for (string word: words) {\n            // 将 word 中的字母按照字典序排序并去重\n            sort(word.begin(), word.end());\n            word.erase(unique(word.begin(), word.end()), word.end());\n            // 加入字典树中\n            add(word);\n        }\n\n        vector<int> ans;\n        for (string puzzle: puzzles) {\n            char required = puzzle[0];\n            sort(puzzle.begin(), puzzle.end());\n            ans.push_back(find(puzzle, required, root, 0));\n        }\n        return ans;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    TrieNode root;\n\n    public List<Integer> findNumOfValidWords(String[] words, String[] puzzles) {\n        root = new TrieNode();\n        \n        for (String word : words) {\n            // 将 word 中的字母按照字典序排序并去重\n            char[] arr = word.toCharArray();\n            Arrays.sort(arr);\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < arr.length; ++i) {\n                if (i == 0 || arr[i] != arr[i - 1]) {\n                    sb.append(arr[i]);\n                }\n            }\n            // 加入字典树中\n            add(root, sb.toString());\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        for (String puzzle : puzzles) {\n            char required = puzzle.charAt(0);\n            char[] arr = puzzle.toCharArray();\n            Arrays.sort(arr);\n            ans.add(find(new String(arr), required, root, 0));\n        }\n        return ans;\n    }\n\n    public void add(TrieNode root, String word) {\n        TrieNode cur = root;\n        for (int i = 0; i < word.length(); ++i) {\n            char ch = word.charAt(i);\n            if (cur.child[ch - 'a'] == null) {\n                cur.child[ch - 'a'] = new TrieNode();\n            }\n            cur = cur.child[ch - 'a'];\n        }\n        ++cur.frequency;\n    }\n\n    // 在回溯的过程中枚举 puzzle 的所有子集并统计答案\n    // find(puzzle, required, cur, pos) 表示 puzzle 的首字母为 required, 当前搜索到字典树上的 cur 节点，并且准备枚举 puzzle 的第 pos 个字母是否选择（放入子集中）\n    // find 函数的返回值即为谜底的数量\n    public int find(String puzzle, char required, TrieNode cur, int pos) {\n        // 搜索到空节点，不合法，返回 0\n        if (cur == null) {\n            return 0;\n        }\n        // 整个 puzzle 搜索完毕，返回谜底的数量\n        if (pos == 7) {\n            return cur.frequency;\n        }\n\n        // 选择第 pos 个字母\n        int ret = find(puzzle, required, cur.child[puzzle.charAt(pos) - 'a'], pos + 1);\n\n        // 当 puzzle.charAt(pos) 不为首字母时，可以不选择第 pos 个字母\n        if (puzzle.charAt(pos) != required) {\n            ret += find(puzzle, required, cur, pos + 1);\n        }\n\n        return ret;\n    }\n}\n\nclass TrieNode {\n    int frequency;\n    TrieNode[] child;\n\n    public TrieNode() {\n        frequency = 0;\n        child = new TrieNode[26];\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass TrieNode:\n    def __init__(self):\n        self.frequency = 0\n        self.child = dict()\n\nclass Solution:\n    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:\n        root = TrieNode()\n\n        def add(word: List[str]):\n            cur = root\n            for ch in word:\n                idx = ord(ch) - ord(\"a\")\n                if idx not in cur.child:\n                    cur.child[idx] = TrieNode()\n                cur = cur.child[idx]\n            cur.frequency += 1\n\n        # 在回溯的过程中枚举 puzzle 的所有子集并统计答案\n        # find(puzzle, required, cur, pos) 表示 puzzle 的首字母为 required, 当前搜索到字典树上的 cur 节点，并且准备枚举 puzzle 的第 pos 个字母是否选择（放入子集中）\n        # find 函数的返回值即为谜底的数量\n        def find(puzzle: List[str], required: str, cur: TrieNode, pos: int) -> int:\n            # 搜索到空节点，不合法，返回 0\n            if not cur:\n                return 0\n            # 整个 puzzle 搜索完毕，返回谜底的数量\n            if pos == 7:\n                return cur.frequency\n            \n            ret = 0\n            # 选择第 pos 个字母\n            if (idx := ord(puzzle[pos]) - ord(\"a\")) in cur.child:\n                ret += find(puzzle, required, cur.child[idx], pos + 1)\n\n            # 当 puzzle[pos] 不为首字母时，可以不选择第 pos 个字母\n            if puzzle[pos] != required:\n                ret += find(puzzle, required, cur, pos + 1)\n            \n            return ret\n        \n        for word in words:\n            # 将 word 中的字母按照字典序排序并去重\n            word = sorted(set(word))\n            # 加入字典树中\n            add(word)\n\n        ans = list()\n        for puzzle in puzzles:\n            required = puzzle[0]\n            puzzle = sorted(puzzle)\n            ans.append(find(puzzle, required, root, 0))\n        \n        return ans\n```\n\n```go [sol2-Golang]\ntype trieNode struct {\n    son [26]*trieNode\n    cnt int\n}\n\nfunc findNumOfValidWords(words []string, puzzles []string) []int {\n    root := &trieNode{}\n    for _, word := range words {\n        // 将 word 中的字母按照字典序排序并去重\n        w := []byte(word)\n        sort.Slice(w, func(i, j int) bool { return w[i] < w[j] })\n        i := 0\n        for _, ch := range w[1:] {\n            if w[i] != ch {\n                i++\n                w[i] = ch\n            }\n        }\n        w = w[:i+1]\n\n        // 加入字典树中\n        cur := root\n        for _, ch := range w {\n            ch -= 'a'\n            if cur.son[ch] == nil {\n                cur.son[ch] = &trieNode{}\n            }\n            cur = cur.son[ch]\n        }\n        cur.cnt++\n    }\n\n    ans := make([]int, len(puzzles))\n    for i, puzzle := range puzzles {\n        pz := []byte(puzzle)\n        first := pz[0]\n        sort.Slice(pz, func(i, j int) bool { return pz[i] < pz[j] })\n\n        // 在回溯的过程中枚举 pz 的所有子集并统计答案\n        var find func(int, *trieNode) int\n        find = func(pos int, cur *trieNode) int {\n            // 搜索到空节点，不合法，返回 0\n            if cur == nil {\n                return 0\n            }\n\n            // 整个 pz 搜索完毕，返回谜底的数量\n            if pos == len(pz) {\n                return cur.cnt\n            }\n\n            // 选择第 pos 个字母\n            res := find(pos+1, cur.son[pz[pos]-'a'])\n\n            // 当 pz[pos] 不为首字母时，可以不选择第 pos 个字母\n            if pz[pos] != first {\n                res += find(pos+1, cur)\n            }\n\n            return res\n        }\n\n        ans[i] = find(0, root)\n    }\n\n    return ans\n}\n```\n\n```C [sol2-C]\nstruct TrieNode {\n    int frequency;\n    struct TrieNode* child[26];\n};\n\nvoid init(struct TrieNode* obj) {\n    obj->frequency = 0;\n    for (int i = 0; i < 26; ++i) {\n        obj->child[i] = NULL;\n    }\n}\n\n// 在回溯的过程中枚举 puzzle 的所有子集并统计答案\n// find(puzzle, required, cur, pos) 表示 puzzle 的首字母为 required, 当前搜索到字典树上的 cur 节点，并且准备枚举 puzzle 的第 pos\n// 个字母是否选择（放入子集中） find 函数的返回值即为谜底的数量\nvoid add(struct TrieNode** root, char* word, int wordSize) {\n    struct TrieNode* cur = *root;\n    for (int i = 0; i < wordSize; ++i) {\n        if (!cur->child[word[i] - 'a']) {\n            cur->child[word[i] - 'a'] = malloc(sizeof(struct TrieNode));\n            init(cur->child[word[i] - 'a']);\n        }\n        cur = cur->child[word[i] - 'a'];\n    }\n    ++cur->frequency;\n}\n\nint find(char* puzzle, char required, struct TrieNode* cur, int pos) {\n    // 搜索到空节点，不合法，返回 0\n    if (!cur) {\n        return 0;\n    }\n    // 整个 puzzle 搜索完毕，返回谜底的数量\n    if (pos == 7) {\n        return cur->frequency;\n    }\n\n    // 选择第 pos 个字母\n    int ret = find(puzzle, required, cur->child[puzzle[pos] - 'a'], pos + 1);\n\n    // 当 puzzle[pos] 不为首字母时，可以不选择第 pos 个字母\n    if (puzzle[pos] != required) {\n        ret += find(puzzle, required, cur, pos + 1);\n    }\n\n    return ret;\n};\n\nint cmp(char* a, char* b) {\n    return *a - *b;\n}\n\nint* findNumOfValidWords(char** words, int wordsSize, char** puzzles, int puzzlesSize, int* returnSize) {\n    struct TrieNode* root = malloc(sizeof(struct TrieNode));\n    init(root);\n\n    for (int i = 0; i < wordsSize; i++) {\n        // 将 word 中的字母按照字典序排序并去重\n        int len = strlen(words[i]);\n        char* word = malloc(sizeof(char) * (len + 1));\n        strcpy(word, words[i]);\n        qsort(word, len, sizeof(char), cmp);\n        int wordSize = 1;\n        for (int j = 1; j < len; j++) {\n            if (word[wordSize - 1] != word[j]) {\n                word[wordSize++] = word[j];\n            }\n        }\n\n        // 加入字典树中\n        add(&root, word, wordSize);\n    }\n\n    int* ans = malloc(sizeof(int) * puzzlesSize);\n    *returnSize = 0;\n\n    for (int i = 0; i < puzzlesSize; i++) {\n        int len = strlen(puzzles[i]);\n        char* puzzle = malloc(sizeof(char) * (len + 1));\n        strcpy(puzzle, puzzles[i]);\n        char required = puzzle[0];\n        qsort(puzzle, len, sizeof(char), cmp);\n        ans[(*returnSize)++] = find(puzzle, required, root, 0);\n    }\n    return ans;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(m|w|\\log|w| + n2^{|p|})$，其中 $m$ 和 $n$ 分别是数组 $\\textit{words}$ 和 $\\textit{puzzles}$ 的长度，$|w|$ 是 $\\textit{word}$ 的最大长度 $50$，$|p|$ 是 $\\textit{puzzle}$ 的最大长度 $7$。时间复杂度分为四部分：\n\n    - 计算所有 $\\textit{word}$ 对应的集合，进行排序的时间复杂度为 $O(m|w|\\log|w|)$；\n\n    - 将第一部分加入字典树的时间复杂度为 $O(m|w|)$；\n\n    - 计算所有 $\\textit{puzzle}$ 对应的集合，进行排序的时间复杂度为 $O(n|p|\\log|p|)$；\n\n    - 枚举 $\\textit{puzzle}$ 的子集并在字典树中查询子集的复杂度为 $O(n2^{|p|-1})$。\n\n    由于 $|p|-1$ 与 $|p|$ 同阶，因此写成 $O(|p|)$ 更加简洁。并且由于第一部分的时间复杂度在渐进意义下严格大于第二部分，第四部分的时间复杂度在渐进意义下严格大于第三部分，因此总时间复杂度即为第一部分与第四部分之和 $O(m|w|\\log|w| + n2^{|p|})$。\n\n- 空间复杂度：$O(m|w| + |p|)$。字典树需要使用的空间为 $O(m|w|)$，将 $\\textit{word}$ 加入字典树时，需要用 $O(|w|)$ 的空间存储 $\\textit{word}$ 按照字典序排序后的结果，其在渐进意义下严格小于 $O(m|w|)$ 可忽略。在使用回溯的方法在字典树中查询 $\\textit{puzzle}$ 的子集时，需要使用 $O(|p|)$ 的空间存储 $\\textit{puzzle}$ 按照字典序排序后的结果，并且需要 $O(|p|)$ 的栈空间，因此总空间复杂度为 $O(m|w| + |p|)$。",
      "createdAt": "2021-02-25T13:19:34.647871+00:00",
      "hitCount": 34493,
      "identifier": "ureu61",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zhuang-tai-ya-suo-zi-ji-ti-jie-yi-dong-c-bdx8",
        "title": "状态压缩+子集，题解易懂才是最重要的"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "number-of-valid-words-for-each-puzzle"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 51,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 17,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "cai-zi-mi-by-leetcode-solution-345u",
      "status": "PREPUBLISH",
      "summary": "前言 我们首先需要理解清楚题目中的字谜规则： 对于单词 $\\textit{word}$ 以及谜面 $\\textit{puzzle}$，设 $S_w$ 表示 $\\textit{word}$ 中出现的字母组成的「不重复」集合，$S_p$ 表示 $\\textit{puzzle}$ 中出现的字母组成的集合（由于题目中规定了 $",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Bit Manipulation",
          "nameTranslated": "位运算",
          "slug": "bit-manipulation",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Trie",
          "nameTranslated": "字典树",
          "slug": "trie",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "猜字谜",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 230,
        "id": 622145,
        "viewCount": 20374
      },
      "uuid": "ureu61",
      "videosInfo": []
    }
  }
}
