{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n**思路与算法**\n\n我们遍历字符串 $\\textit{word}$ 来模拟键入单词的过程。在键入每个字符时，我们首先需要将指针移动至该字符，然后键入相应的字符。\n\n移动的过程中，为了使得耗时最短，我们应当将指针始终往相同方向移动，直至到目标字符。那么该过程的最短耗时即为顺时针或逆时针移动耗时的最小值。\n\n为了计算方便，我们可以将字符按照字典序映射到 $0$ 与 $25$ 之间的整数，上述两种移动方式可以按照指针是否跨过 $0$ 与 $25$ 的**边界线**进行分类。我们设当前字符对应整数为 $\\textit{prev}$，目标字符对应整数为 $\\textit{curr}$，那么两种移动方式对应的耗时即为（其中 $|\\dots|$ 表示绝对值）：\n\n- 不跨过边界线，耗时为 $|\\textit{curr} - \\textit{prev}|$;\n\n- 跨过边界线，耗时为 $26 - |\\textit{curr} - \\textit{prev}|$。\n\n那么移动耗时即为上述两者的最小值，键入字符的总耗时即为移动耗时加上键入耗时 $1$。\n\n在遍历字符串时，我们维护当前字符对应的整数 $\\textit{prev}$（初值为 $0$），并统计键入每个字符的最小耗时总和。最终，我们返回该总和作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int minTimeToType(string word) {\n        int res = 0;\n        int prev = 0;   // 当前位置\n        for (char ch : word){\n            // 计算键入每个字符的最小耗时并更新当前位置\n            int curr = ch - 'a';\n            res += 1 + min(abs(curr - prev), 26 - abs(curr - prev));\n            prev = curr;\n        }\n        return res;\n    }\n};\n```\n\n\n```Python [sol1-Python3]\nclass Solution:\n    def minTimeToType(self, word: str) -> int:\n        prev = 0\n        res = 0   # 当前位置\n        for ch in word:\n            # 计算键入每个字符的最小耗时并更新当前位置\n            curr = ord(ch) - ord('a')\n            res += 1 + min(abs(curr - prev), 26 - abs(curr - prev))\n            prev = curr\n        return res\n```\n\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{word}$ 的长度。即为遍历 $\\textit{word}$ 计算最小总耗时的时间复杂度。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2021-08-22T09:10:42.948829+00:00",
      "hitCount": 795,
      "identifier": "8WyKwb",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "shi-yong-te-shu-da-zi-ji-jian-ru-dan-ci-rcoh5",
        "title": "使用特殊打字机键入单词的最少时间 - 模拟"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "minimum-time-to-type-word-using-special-typewriter"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "shi-yong-te-shu-da-zi-ji-jian-ru-dan-ci-54xfk",
      "status": "PREPUBLISH",
      "summary": "方法一：模拟 思路与算法 我们遍历字符串 $\\textit{word}$ 来模拟键入单词的过程。在键入每个字符时，我们首先需要将指针移动至该字符，然后键入相应的字符。 移动的过程中，为了使得耗时最短，我们应当将指针始终往相同方向移动，直至到目标字符。那么该过程的最短耗时即为顺时针或逆时针移动耗时的最小值。 为了计算方便",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "使用特殊打字机键入单词的最少时间",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 4,
        "id": 951893,
        "viewCount": 657
      },
      "uuid": "8WyKwb",
      "videosInfo": []
    }
  }
}
