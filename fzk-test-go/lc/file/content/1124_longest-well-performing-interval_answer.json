{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "刘岳",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/user8664p/avatar_1534396547.png",
          "userSlug": "smoon1989"
        },
        "username": "smoon1989"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "**思路：**\r\n\r\n本题有多种方法，暴力的方法时间复杂度是 $O(N^2)$，用二分法可以将时间复杂度降为 $O(NlogN)$ ，下面介绍用单调栈可以实现 $O(N)$ 时间复杂度的方法。其实本题变形后与 [962. 最大宽度坡](https://leetcode-cn.com/problems/maximum-width-ramp/) 类似。\r\n\r\n以输入样例 `hours = [9,9,6,0,6,6,9]` 为例，我们将大于 $8$ 小时的一天记为 $1$ 分，小于等于 $8$ 小时的一天记为 $-1$ 分。那么处理后，我们得到 `score = [1, 1, -1, -1, -1, -1, 1]`，然后我们对得分数组计算前缀和 `presum = [0, 1, 2, 1, 0, -1, -2, -1]`。题目要求返回表现良好时间段的最大长度，即求最长的一段中，得分 $1$ 的个数大于得分 $-1$ 的个数，也就是求 `score` 数组中最长的一段子数组，其和大于 $0$，那么也就是找出前缀和数组 `presum` 中两个索引 `i` 和 `j`，使 `j - i` 最大，且保证 `presum[j] - presum[i]` 大于 $0$。到此，我们就将这道题转化为，求 `presum` 数组中的一个最长的上坡，可以用单调栈实现。我们维护一个单调栈，其中存储 `presum` 中的元素索引，栈中索引指向的元素严格单调递减，由 `presum` 数组求得单调栈为 `stack = [0, 5, 6]`， 其表示元素为 `[0, -1, -2]`。然后我们从后往前遍历 `presum` 数组，与栈顶索引指向元素比较，如果相减结果大于 $0$，则一直出栈，直到不大于 $0$ 为止，然后更新当前最大宽度。\r\n\r\n**图解：**\r\n\r\n![图解](https://pic.leetcode-cn.com/5baaaa25c9b0158663cd3757f59e28c516ed6f867a3acc5a73abb509cc8a422f-1124-1.gif){:width=600}\r\n{:align=center}\r\n\r\n**代码：**\r\n```python [-Python]\r\nclass Solution:\r\n    def longestWPI(self, hours: List[int]) -> int:\r\n        n = len(hours)\r\n        # 大于8小时计1分 小于等于8小时计-1分\r\n        score = [0] * n\r\n        for i in range(n):\r\n            if hours[i] > 8:\r\n                score[i] = 1\r\n            else:\r\n                score[i] = -1\r\n        # 前缀和\r\n        presum = [0] * (n + 1)\r\n        for i in range(1, n + 1):\r\n            presum[i] = presum[i - 1] + score[i - 1]\r\n        ans = 0\r\n        stack = []\r\n        # 顺序生成单调栈，栈中元素从第一个元素开始严格单调递减，最后一个元素肯定是数组中的最小元素所在位置\r\n        for i in range(n + 1):\r\n            if not stack or presum[stack[-1]] > presum[i]:\r\n                stack.append(i)\r\n        # 倒序扫描数组，求最大长度坡\r\n        i = n\r\n        while i > ans:\r\n            while stack and presum[stack[-1]] < presum[i]:\r\n                ans = max(ans, i - stack[-1])\r\n                stack.pop()\r\n            i -= 1\r\n        return ans\r\n```",
      "createdAt": "2019-07-16T05:26:15.210877+00:00",
      "hitCount": 25898,
      "identifier": "YtzY7y",
      "isEditorsPick": true,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "qian-zhui-he-tan-xin-dan-diao-zhan-by-20-ru9i",
        "title": "前缀和 + 贪心 + 单调栈"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "longest-well-performing-interval"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 61,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "THUMBS_DOWN"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "qian-zhui-he-dan-diao-zhan-python3-by-smoon1989",
      "status": "PUBLISHED",
      "summary": "思路：\n本题有多种方法，暴力的方法时间复杂度是 $O(N^2)$，用二分法可以将时间复杂度降为 $O(NlogN)$ ，下面介绍用单调栈可以实现 $O(N)$ 时间复杂度的方法。其实本题变形后与 962. 最大宽度坡 类似。\n以输入样例 hours = [9,9,6,0,6,6,9] 为例，我们将大于 $8$ 小时的一",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/5baaaa25c9b0158663cd3757f59e28c516ed6f867a3acc5a73abb509cc8a422f-1124-1.gif",
      "title": "前缀和+单调栈 Python3",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 32,
        "id": 14638,
        "viewCount": 14868
      },
      "uuid": "YtzY7y",
      "videosInfo": []
    }
  }
}
