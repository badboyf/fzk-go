{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法：递归\n\n由于递归实现 `N` 叉树的后序遍历较为简单，因此我们只讲解如何使用迭代的方法得到 `N` 叉树的后序遍历。\n\n在后序遍历中，我们会先遍历一个节点的所有子节点，再遍历这个节点本身。\n\n例如：当前的节点为 `u`，它的子节点为 `v1, v2, v3` 时，那么后序遍历的结果为 \n\n```\n[children of v1], v1, [children of v2], v2, [children of v3], v3, u\n```\n\n其中 `[children of vk]` 表示以 `vk` 为根节点的子树的后序遍历结果（不包括 `vk`）。\n\n**将结果反转**，得到 \n\n```\nu, v3, [children of v3]', v2, [children of v2]', v1, [children of v1]'\n```\n\n其中 `[a]'` 表示 `[a]` 的反转。\n\n此时我们发现，结果和前序遍历非常类似，只不过前序遍历中对子节点的遍历顺序是 `v1, v2, v3`，而这里是 `v3, v2, v1`。\n\n因此我们可以使用和 [N叉树的前序遍历](https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/) 相同的方法，使用一个栈来得到后序遍历。我们首先把根节点入栈。\n\n**算法**\n\n当每次我们从栈顶取出一个节点 `u` 时，就把 `u` 的所有子节点顺序推入栈中。例如 `u` 的子节点从左到右为 `v1, v2, v3`，那么推入栈的顺序应当为 `v1, v2, v3`，这样就保证了下一个遍历到的节点（即 `u` 的第一个子节点 `v3`）出现在栈顶的位置。在遍历结束之后，我们把遍历结果反转，就可以得到后序遍历。\n\n```Java [sol1]\nclass Solution {\n    public List<Integer> postorder(Node root) {\n        LinkedList<Integer> res = new LinkedList<>();\n        if (root == null) {\n            return res;\n        }\n\n        Deque<Node> stack = new ArrayDeque<>();\n        stack.addLast(root);\n        while (!stack.isEmpty()) {\n            Node node = stack.removeLast();\n            res.addFirst(node.val);\n            for (int i = 0; i < node.children.size(); i++) {\n                stack.addLast(node.children.get(i));\n            }\n        }\n        return res;\n    }\n}\n```\n```Python [sol1]\nclass Solution(object):\n    def postorder(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: List[int]\n        \"\"\"\n        if root is None:\n            return []\n        \n        stack, output = [root, ], []\n        while stack:\n            root = stack.pop()\n            if root is not None:\n                output.append(root.val)\n            for c in root.children:\n                stack.append(c)\n                \n        return output[::-1]\n```\n\n\n\n**复杂度分析**\n\n* 时间复杂度：时间复杂度：$O(M)$，其中 $M$ 是 `N` 叉树中的节点个数。每个节点只会入栈和出栈各一次。\n\n* 空间复杂度：$O(M)$。在最坏的情况下，这棵 `N` 叉树只有 `2` 层，所有第 `2` 层的节点都是根节点的孩子。将根节点推出栈后，需要将这些节点都放入栈，共有 $M - 1$ 个节点，因此栈的大小为 $O(M)$。",
      "createdAt": "2019-10-29T06:09:25.573457+00:00",
      "hitCount": 29773,
      "identifier": "E4EEyT",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "che-di-chi-tou-shu-de-qian-zhong-hou-xu-di-gui-fa-",
        "title": "「代码随想录」彻底吃透树的前中后序递归法（递归三部曲）和迭代法（不统一写法与统一写法）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "n-ary-tree-postorder-traversal"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 20,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "ncha-shu-de-hou-xu-bian-li-by-leetcode",
      "status": "PUBLISHED",
      "summary": "方法：递归\n由于递归实现 N 叉树的后序遍历较为简单，因此我们只讲解如何使用迭代的方法得到 N 叉树的后序遍历。\n在后序遍历中，我们会先遍历一个节点的所有子节点，再遍历这个节点本身。\n例如：当前的节点为 u，它的子节点为 v1, v2, v3 时，那么后序遍历的结果为\n其中 [children of vk] 表示以",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Tree",
          "nameTranslated": "树",
          "slug": "tree",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "N叉树的后序遍历",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 51,
        "id": 38806,
        "viewCount": 22241
      },
      "uuid": "E4EEyT",
      "videosInfo": []
    }
  }
}
