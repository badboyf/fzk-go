{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：回溯\n\n拆分给定的字符串，要求拆分后的每个子字符串唯一，求子字符串的最大数目，可以通过回溯算法实现。\n\n对于长度为 $n$ 的字符串，有 $n-1$ 个拆分点。从左到右遍历字符串，对于每个拆分点，如果在此拆分之后，新得到的一个非空子字符串（即拆分点左侧的最后一个被拆分出的非空子字符串）与之前拆分出的非空子字符串都不相同，则当前的拆分点可以进行拆分，然后继续对剩下的部分（即拆分点右侧的部分）进行拆分。\n\n判断拆分出的非空子字符串是否有重复时，可以使用哈希表。\n\n当整个字符串拆分完毕时，计算拆分得到的非空子字符串的数目，并更新最大数目。\n\n```Java [sol1-Java]\nclass Solution {\n    int maxSplit = 1;\n\n    public int maxUniqueSplit(String s) {\n        Set<String> set = new HashSet<String>();\n        backtrack(0, 0, s, set);\n        return maxSplit;\n    }\n\n    public void backtrack(int index, int split, String s, Set<String> set) {\n        int length = s.length();\n        if (index >= length) {\n            maxSplit = Math.max(maxSplit, split);\n        } else {\n            for (int i = index; i < length; i++) {\n                String substr = s.substring(index, i + 1);\n                if (set.add(substr)) {\n                    backtrack(i + 1, split + 1, s, set);\n                    set.remove(substr);\n                }\n            }\n        }\n    }\n}\n```\n\n```cpp [sol1-C++]\nclass Solution {\npublic:\n    int maxSplit;\n\n    void backtrack(int index, int split, string &s, unordered_set<string> &us) {\n        int length = s.size();\n        if (index >= length) {\n            maxSplit = max(maxSplit, split);\n        } else {\n            for (int i = index; i < length; i++) {\n                string substr = s.substr(index, i - index + 1);\n                if (us.find(substr) == us.end()) {\n                    us.insert(substr);\n                    backtrack(i + 1, split + 1, s, us);\n                    us.erase(substr);\n                }\n            }\n        }\n    }\n\n    int maxUniqueSplit(string s) {\n        maxSplit = 1;\n        unordered_set<string> us;\n        backtrack(0, 0, s, us);\n        return maxSplit;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def maxUniqueSplit(self, s: str) -> int:\n        def backtrack(index: int, split: int):\n            if index >= length:\n                nonlocal maxSplit\n                maxSplit = max(maxSplit, split)\n            else:\n                for i in range(index, length):\n                    substr = s[index:i+1]\n                    if substr not in seen:\n                        seen.add(substr)\n                        backtrack(i + 1, split + 1)\n                        seen.remove(substr)\n\n        length = len(s)\n        seen = set()\n        maxSplit = 1\n        backtrack(0, 0)\n        return maxSplit\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(2^n \\times n)$，其中 $n$ 是字符串的长度。\n  回溯过程会遍历所有可能的拆分方案，长度为 $n$ 的字符串有 $n-1$ 个拆分点，每个拆分点都可以选择拆分或者不拆分，因此共有 $2^{n-1}$ 种拆分方案。\n  对于每种拆分方案，都需要判断拆分出的非空子字符串是否有重复，时间复杂度是 $O(n)$。\n  因此总时间复杂度是 $O(2^n \\times n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 是字符串的长度。空间复杂度取决于集合的大小以及回溯过程中的递归调用层数。集合中的元素个数不会超过 $n$，递归调用层数不会超过 $n$。",
      "createdAt": "2020-10-09T15:19:26.907797+00:00",
      "hitCount": 2933,
      "identifier": "j9HXgk",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "split-a-string-by-ikaruga",
        "title": "【拆分字符串使唯一子字符串的数目最大】回溯"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "split-a-string-into-the-max-number-of-unique-substrings"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "chai-fen-zi-fu-chuan-shi-wei-yi-zi-zi-fu-chuan-de-",
      "status": "PUBLISHED",
      "summary": "方法一：回溯 拆分给定的字符串，要求拆分后的每个子字符串唯一，求子字符串的最大数目，可以通过回溯算法实现。 对于长度为 $n$ 的字符串，有 $n-1$ 个拆分点。从左到右遍历字符串，对于每个拆分点，如果在此拆分之后，新得到的一个非空子字符串（即拆分点左侧的最后一个被拆分出的非空子字符串）与之前拆分出的非空子字符串都不",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Recursion",
          "nameTranslated": "递归",
          "slug": "recursion",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Hash Table",
          "nameTranslated": "哈希表",
          "slug": "hash-table",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Backtracking",
          "nameTranslated": "回溯",
          "slug": "backtracking",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "拆分字符串使唯一子字符串的数目最大",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 3,
        "id": 441191,
        "viewCount": 2099
      },
      "uuid": "j9HXgk",
      "videosInfo": []
    }
  }
}
