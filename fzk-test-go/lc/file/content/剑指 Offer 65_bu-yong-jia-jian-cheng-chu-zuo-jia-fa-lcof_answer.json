{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\r\n\r\n本题考察对位运算的灵活使用，即使用位运算实现加法。\r\n设两数字的二进制形式 $a, b$ ，其求和 $s = a + b$ ，$a(i)$ 代表 $a$ 的二进制第 $i$ 位，则分为以下四种情况：\r\n\r\n| $a(i)$ | $b(i)$ | 无进位和 $n(i)$ | 进位 $c(i+1)$ |\r\n| :----: | :----: | :-------------: | :-----------: |\r\n|  $0$   |  $0$   |       $0$       |      $0$      |\r\n|  $0$   |  $1$   |       $1$       |      $0$      |\r\n|  $1$   |  $0$   |       $1$       |      $0$      |\r\n|  $1$   |  $1$   |       $0$       |      $1$      |\r\n\r\n观察发现，**无进位和** 与 **异或运算** 规律相同，**进位** 和 **与运算** 规律相同（并需左移一位）。因此，无进位和 $n$ 与进位 $c$ 的计算公式如下；\r\n\r\n$$\r\n\\begin{cases}\r\nn = a \\oplus b & 非进位和：异或运算 \\\\\r\nc = a \\& b << 1 & 进位：与运算 + 左移一位\r\n\\end{cases}\r\n$$\r\n\r\n（和 $s$ ）$=$（非进位和 $n$ ）$+$（进位 $c$ ）。即可将 $s = a + b$ 转化为：\r\n\r\n$$\r\ns = a + b \\Rightarrow s = n + c\r\n$$\r\n\r\n循环求 $n$ 和 $c$ ，直至进位 $c = 0$ ；此时 $s = n$ ，返回 $n$ 即可。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/56d56524d8d2b1318f78e209fffe0e266f97631178f6bfd627db85fcd2503205-Picture1.png){:width=500}\r\n\r\n> **Q ：** 若数字 $a$ 和 $b$ 中有负数，则变成了减法，如何处理？\r\n> **A ：** 在计算机系统中，数值一律用 **补码** 来表示和存储。**补码的优势：** 加法、减法可以统一处理（CPU只有加法器）。因此，以上方法 **同时适用于正数和负数的加法** 。\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(1)$ ：** 最差情况下（例如 $a =$ 0x7fffffff , $b = 1$ 时），需循环 32 次，使用 $O(1)$ 时间；每轮中的常数次位操作使用 $O(1)$ 时间。\r\n- **空间复杂度 $O(1)$ ：** 使用常数大小的额外空间。\r\n\r\n<![Picture2.png](https://pic.leetcode-cn.com/d8f7b12858886ecc73165f0f4b07849e264bdc3c662835d845d14ccbff42a28f-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/7b793038c4ef2263888c8caf763328db667438959674a89003fed68c56c5dbac-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/b67b0ebd864c44a0240b4933eed7247705650bd6f353f541432db023b98a438f-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/d07919f47d9da7550711882da75c9701c0a49bdbee55e7f8f712fafdb84b9464-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/bf214dcad3e25f92477ab46c7904f5104942ec934732a439e82c394529f12f54-Picture6.png)>\r\n\r\n#### 代码：\r\n\r\n```java []\r\nclass Solution {\r\n    public int add(int a, int b) {\r\n        while(b != 0) { // 当进位为 0 时跳出\r\n            int c = (a & b) << 1;  // c = 进位\r\n            a ^= b; // a = 非进位和\r\n            b = c; // b = 进位\r\n        }\r\n        return a;\r\n    }\r\n}\r\n```\r\n\r\n```python []\r\nclass Solution:\r\n    def add(self, a: int, b: int) -> int:\r\n        x = 0xffffffff\r\n        a, b = a & x, b & x\r\n        while b != 0:\r\n            a, b = (a ^ b), (a & b) << 1 & x\r\n        return a if a <= 0x7fffffff else ~(a ^ x)\r\n```\r\n\r\n> 由于 Python 的数字存储特点，需要做特殊考虑，以下详细介绍。\r\n\r\n##### Python 负数的存储：\r\n\r\nPython，Java 等语言中的数字都是以 **补码** 形式存储的。但 Python 没有 `int` , `long` 等不同长度变量，即在编程时无变量位数的概念。\r\n**获取负数的补码：** 需要将数字与十六进制数 `0xffffffff` 相与。可理解为舍去此数字 32 位以上的数字（将 32 位以上都变为 $0$ ），从无限长度变为一个 32 位整数。\r\n**返回前数字还原：** 若补码 $a$ 为负数（ `0x7fffffff` 是最大的正数的补码 ），需执行 `~(a ^ x)` 操作，将补码还原至 Python 的存储格式。 `a ^ x` 运算将 1 至 32 位按位取反； `~` 运算是将整个数字取反；因此， `~(a ^ x)` 是将 32 位以上的位取反，1 至 32 位不变。\r\n\r\n```python\r\nprint(hex(1)) # = 0x1 补码\r\nprint(hex(-1)) # = -0x1 负号 + 原码 （ Python 特色，Java 会直接输出补码）\r\n\r\nprint(hex(1 & 0xffffffff)) # = 0x1 正数补码\r\nprint(hex(-1 & 0xffffffff)) # = 0xffffffff 负数补码\r\n\r\nprint(-1 & 0xffffffff) # = 4294967295 （ Python 将其认为正数）\r\n```",
      "createdAt": "2020-04-19T19:13:36.865070+00:00",
      "hitCount": 112908,
      "identifier": "bHMNUh",
      "isEditorsPick": true,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "dian-zan-yao-wo-zhi-dao-ni-xiang-kan-dia-ovxy",
        "title": "点赞么?我知道你想看点不一样的题解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 404,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 24,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-65-bu-yong-jia-jian-cheng-chu-zuo-ji-7",
      "status": "PUBLISHED",
      "summary": "解题思路：\n本题考察对位运算的灵活使用，即使用位运算实现加法。\n设两数字的二进制形式 a, b ，其求和 s = a + b ，a(i) 代表 a 的二进制第 i 位，则分为以下四种情况：\n\n\n\na(i)\nb(i)\n无进位和 n(i)\n进位 c(i+1)\n\n\n\n\n0\n0\n0\n0\n\n\n0\n1\n1\n0\n\n\n1\n0\n1\n0",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Bit Manipulation",
          "nameTranslated": "位运算",
          "slug": "bit-manipulation",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/56d56524d8d2b1318f78e209fffe0e266f97631178f6bfd627db85fcd2503205-Picture1.png",
      "title": "面试题65. 不用加减乘除做加法（位运算，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 307,
        "id": 210882,
        "viewCount": 77063
      },
      "uuid": "bHMNUh",
      "videosInfo": []
    }
  }
}
