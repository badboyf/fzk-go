{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "TheDesAlizes",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/thedesalizes/avatar_1593052872.png",
          "userSlug": "thedesalizes"
        },
        "username": "thedesalizes"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "# 解题思路\n\n维护一个单调栈，从左到右遍历数组。\n1. 如果当前元素比队尾元素小，下来判断剩余数组长度（len - i）和目标栈还需要元素个数（k - stack.size() + 1）大小。\n1.1 如果前者小于或等于后者，则说明不能再出栈了，否则剩余数组全加进栈也不够将栈填到k+1长度。（需要k+1而不是k是因为一开始就填进了-1，但这个-1是不会被返回的）\n1.2 如果前者大于后者，就将队尾元素出栈，并重复第一步\n\n2. 如果栈长度不够，不用判断，直接将当前元素进栈即可。\n\n# 代码\n\n```\nclass Solution {\n     public int[] mostCompetitive(int[] nums, int k) {\n\n        Stack<Integer> stack = new Stack<>();\n        stack.add(-1);\n        int len = nums.length;\n\n        for (int i = 0; i < len; i++) {\n            //当前元素比队尾元素小，将队尾元素出栈\n            //此处需要另外判断数组剩余长度够不够填满栈，不然最后答案长度可能会小于k\n            while (nums[i] < stack.peek() && k - stack.size() + 1 < len - i) {\n                stack.pop();\n            }\n            if (stack.size() < k + 1) {\n                stack.add(nums[i]);\n            }\n        }\n\n        int[] ret = new int[k];\n\n        while (k > 0) {\n            ret[--k] = stack.pop();\n        }\n\n        return ret;\n    }\n}\n```\n",
      "createdAt": "2020-11-29T04:09:58.919201+00:00",
      "hitCount": 4987,
      "identifier": "arGpQN",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zhan-java-by-liweiwei1419-rkac",
        "title": "栈（Java）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "find-the-most-competitive-subsequence"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 21,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "java-dan-diao-zhan-by-thedesalizes",
      "status": "PUBLISHED",
      "summary": "解题思路\n维护一个单调栈，从左到右遍历数组。\n\n\n如果当前元素比队尾元素小，下来判断剩余数组长度（len - i）和目标栈还需要元素个数（k - stack.size() + 1）大小。\n1.1 如果前者小于或等于后者，则说明不能再出栈了，否则剩余数组全加进栈也不够将栈填到k+1长度。（需要k+1而不是k是因为一开始就",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Monotonic Stack",
          "nameTranslated": "单调栈",
          "slug": "monotonic-stack",
          "tagType": "TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "java 单调栈",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 10,
        "id": 502368,
        "viewCount": 3575
      },
      "uuid": "arGpQN",
      "videosInfo": []
    }
  }
}
