{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：排序\n\n**思路与算法**\n\n假设 $\\textit{nums}$ 的长度为 $n$，由于 $\\textit{nums}$ 中不含有数值相同的元素，因此我们一定可以将 $\\textit{nums}$ 分成长度为 $m = \\lfloor (n + 1) / 2 \\rfloor$ 与长度为 $n - m$ 的两部分，其中第一部分的任何一个元素一定**小于**第二部分的任意一个元素。这也意味着，第一部分任意两个元素的平均值一定不会等于第二部分的任意一个元素，反之亦然。\n\n那么，我们可以将数值较小的第一部分的元素放入重排数组的**偶数**下标（包含 $0$），并将数值较大的第二部分的元素放入重排数组的**奇数**下标，这样重排后的数组一定满足题目的要求。\n\n本文中，我们将 $\\textit{nums}$ 升序排序，然后依次将第一部分和第二部分的元素放入重排数组中，最终返回重排后的数组作为答案。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> rearrangeArray(vector<int>& nums) {\n        // 将数组排序\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        int m = (n + 1) / 2;\n        vector<int> res;\n        for (int i = 0; i < m; ++i){\n            // 放入数值较小的第一部分元素\n            res.push_back(nums[i]);\n            if (i + m < n){\n                // （如果有）放入数值较大的第二部分元素\n                res.push_back(nums[i + m]);\n            }\n        }\n        return res;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n        # 将数组排序\n        nums.sort()\n        n = len(nums)\n        m = (n + 1) // 2\n        res = []\n        for i in range(m):\n            # 放入数值较小的第一部分元素\n            res.append(nums[i])\n            if i + m < n:\n                # （如果有）放入数值较大的第二部分元素\n                res.append(nums[i + m])\n        return res\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n\\log n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。即为排序数组的时间复杂度。\n\n- 空间复杂度：$O(1)$，输出数组不计入空间复杂度。",
      "createdAt": "2021-08-15T04:17:45.702024+00:00",
      "hitCount": 2571,
      "identifier": "xJjSQ5",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "hui-su-by-xiaowufeixia-65yp",
        "title": "回溯"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "array-with-elements-not-equal-to-average-of-neighbors"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "gou-zao-yuan-su-bu-deng-yu-liang-xiang-l-u6vz",
      "status": "PUBLISHED",
      "summary": "方法一：排序 思路与算法 假设 $\\textit{nums}$ 的长度为 $n$，由于 $\\textit{nums}$ 中不含有数值相同的元素，因此我们一定可以将 $\\textit{nums}$ 分成长度为 $m = \\lfloor (n + 1) / 2 \\rfloor$ 与长度为 $n - m$ 的两部分，其中第一",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "String",
          "nameTranslated": "字符串",
          "slug": "string",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "构造元素不等于两相邻元素平均值的数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 17,
        "id": 936697,
        "viewCount": 1948
      },
      "uuid": "xJjSQ5",
      "videosInfo": []
    }
  }
}
