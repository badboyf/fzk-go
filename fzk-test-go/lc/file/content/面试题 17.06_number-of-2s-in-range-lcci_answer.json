{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "sunrise",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/sunrise-z/avatar_1587290389.png",
          "userSlug": "sunrise-z"
        },
        "username": "sunrise-z"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路\n\n这道题看了很多高人的写法，基本都看不太懂...... 最后看到了书[编程之美]第132页1的数目的解法，这才豁然开朗。\n代码是采用python的解法，充分利用切片性质，将当前位拆分为左右两部分，避免绕来绕去的数学整除和求余计算。\n算法核心思想是分别统计每位（个、十、百、千位等等）出现待查数（比如这道题的2）的次数，然后求和，实现O(n)复杂度\n\n比如我们要统计下面三个数百位上出现2的次数，无非就三种情况，大于2，小于2，等于2\n\n1. 情况1（百位大于2），如：12313 \n        要想百位出现2，由于当前百位是3，那么最终的次数只依赖于更高位\n        00200-00299  100个数\n        01200-01299  100个数\n        ...\n        12200-12299  100个数\n所有百位出现2的总个数为从0到12 共13个100，即13*100=1300\n即百位3的左侧那部分12加上1共13个百位为1的总数，从0到12共13个数，从200到299共100个数\n        `结论1：当前位大于2=（当前位的左边部分+1）*10**当前位的右半部分的长度 ，这里就是（12+1）*10**len('13')\n        那要是左半边为空即开头呢，如345百位是3也大于2，左边为空呢，为空就是0，直接就是(0+1)*10**len('45')， 也就是200-299`\n\n2. 情况2（百位小于2），如12113\n        要想百位出现2，由于当前位是1，那么最终的次数同样依赖于更高位，只不过会比上面的情况少最后一种\n        00200-00299  100个数\n        01200-01299  100个数\n        ...\n        11200-11299  100个数\n那么加起来就是（12）*10**len('13')\n        `结论2：当前位小于2=（当前位的左边部分）*10**当前位的右半部分的长度，这里就是 12*10**len('13')`\n\n3. 情况3（百位2等于2），如12213\n        这种情况稍微复杂那么一丢丢，百位出现2的情况不仅依赖于左半边，还依赖于右半边，不过想通了也就不难了\n        我们可以将这个数分成两部分：\n        首先我们取前三位不大于121的所有情况，就是上面的结论2\n        00200-00299  100个数\n        01200-01299  100个数\n        ...\n        11200-11299  100个数，还是12*100个数，（12咋来的？从0到11共12个数哇，100咋来的？从0到99共100个数哇）\n        其次我们取前三位是122的情况，\n        12200-12213 这一共是14个数，总的加起来就是百位是2的所有情况了\n       ` 结论三：当前位等于2=（当前位的左边部分）*10**当前位的右半部分的长度+当前位的右半部分+1 ，这里就是 12*10**len('13')+13+1\n        13+1就是从0到13共几个数`\n\n最后整理成代码逻辑就是：    \n```\n    sum=0\n    依次遍历字符串（正好从高位到低位遍历一遍）：\n        case(当前位大于带查找数)：\n            sum +=（当前位的左边部分+1）*10**当前位的右半部分的长度\n        case(当前位小于带查找数):\n            sum +=（当前位的左边部分）*10**当前位的右半部分的长度\n        case(当前位等于带查找数)：\n            sum +=（当前位的左边部分）*10**当前位的右半部分的长度+当前位的右半部分+1 \n```\n![image.png](https://pic.leetcode-cn.com/2f8f300a06088a9d627377ecadcdd0d783f49de74d8792143da5bf2eedcd69e7-image.png)\n\n### 代码\n\n```python3\nclass Solution:\n    def numberOf2sInRange(self, n: int) -> int:\n        s= str(n) \n        x= 2\n        count = 0\n        for i in range(len(s)):\n            current = int(s[i])\n            high = 0 if s[:i]=='' else int(s[:i])\n            low =0 if s[i+1:]=='' else int(s[i+1:])\n            if current>x:\n                count+=(high+1)*(10**len(s[i+1:]))\n            elif current<x:\n                count += (high) * (10 ** len(s[i + 1:]))\n            else:\n                count +=(high) * (10 ** len(s[i + 1:]))+low+1\n        return count\n```",
      "createdAt": "2020-04-29T03:14:54.579470+00:00",
      "hitCount": 5628,
      "identifier": "Q72nLz",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "javajie-fa-shu-wei-dp-shuang-100-by-sagacioushugo",
        "title": "Java解法 数位dp 双100%"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "number-of-2s-in-range-lcci"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 34,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "xiao-xue-sheng-du-neng-kan-dong-de-zhao-gui-lu-fa-",
      "status": "PUBLISHED",
      "summary": "解题思路\n这道题看了很多高人的写法，基本都看不太懂...... 最后看到了书[编程之美]第132页1的数目的解法，这才豁然开朗。\n代码是采用python的解法，充分利用切片性质，将当前位拆分为左右两部分，避免绕来绕去的数学整除和求余计算。\n算法核心思想是分别统计每位（个、十、百、千位等等）出现待查数（比如这道题的2）的",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/2f8f300a06088a9d627377ecadcdd0d783f49de74d8792143da5bf2eedcd69e7-image.png",
      "title": "编程之美_规律法",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 8,
        "id": 224698,
        "viewCount": 4419
      },
      "uuid": "Q72nLz",
      "videosInfo": []
    }
  }
}
