{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺视频题解\n![167. 两数之和II.mp4](8febaf4f-44bf-4d97-99ca-915e705b8564)\n\n### 📖 文字题解\n#### 前言\n\n这道题可以使用「[1. 两数之和](https://leetcode-cn.com/problems/two-sum/)」的解法，使用 $O(n^2)$ 的时间复杂度和 $O(1)$ 的空间复杂度暴力求解，或者借助哈希表使用 $O(n)$ 的时间复杂度和 $O(n)$ 的空间复杂度求解。但是这两种解法都是针对无序数组的，没有利用到输入数组有序的性质。利用输入数组有序的性质，可以得到时间复杂度和空间复杂度更优的解法。\n\n#### 方法一：二分查找\n\n在数组中找到两个数，使得它们的和等于目标值，可以首先固定第一个数，然后寻找第二个数，第二个数等于目标值减去第一个数的差。利用数组的有序性质，可以通过二分查找的方法寻找第二个数。为了避免重复寻找，在寻找第二个数时，只在第一个数的右侧寻找。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        for (int i = 0; i < numbers.length; ++i) {\n            int low = i + 1, high = numbers.length - 1;\n            while (low <= high) {\n                int mid = (high - low) / 2 + low;\n                if (numbers[mid] == target - numbers[i]) {\n                    return new int[]{i + 1, mid + 1};\n                } else if (numbers[mid] > target - numbers[i]) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return new int[]{-1, -1};\n    }\n}\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        for (int i = 0; i < numbers.size(); ++i) {\n            int low = i + 1, high = numbers.size() - 1;\n            while (low <= high) {\n                int mid = (high - low) / 2 + low;\n                if (numbers[mid] == target - numbers[i]) {\n                    return {i + 1, mid + 1};\n                } else if (numbers[mid] > target - numbers[i]) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n        return {-1, -1};\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        n = len(numbers)\n        for i in range(n):\n            low, high = i + 1, n - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if numbers[mid] == target - numbers[i]:\n                    return [i + 1, mid + 1]\n                elif numbers[mid] > target - numbers[i]:\n                    high = mid - 1\n                else:\n                    low = mid + 1\n        \n        return [-1, -1]\n```\n\n```golang [sol1-Golang]\nfunc twoSum(numbers []int, target int) []int {\n    for i := 0; i < len(numbers); i++ {\n        low, high := i + 1, len(numbers) - 1\n        for low <= high {\n            mid := (high - low) / 2 + low\n            if numbers[mid] == target - numbers[i] {\n                return []int{i + 1, mid + 1}\n            } else if numbers[mid] > target - numbers[i] {\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n    }\n    return []int{-1, -1}\n}\n```\n\n```C [sol1-C]\nint* twoSum(int* numbers, int numbersSize, int target, int* returnSize) {\n    int* ret = (int*)malloc(sizeof(int) * 2);\n    *returnSize = 2;\n\n    for (int i = 0; i < numbersSize; ++i) {\n        int low = i + 1, high = numbersSize - 1;\n        while (low <= high) {\n            int mid = (high - low) / 2 + low;\n            if (numbers[mid] == target - numbers[i]) {\n                ret[0] = i + 1, ret[1] = mid + 1;\n                return ret;\n            } else if (numbers[mid] > target - numbers[i]) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n    }\n    ret[0] = -1, ret[1] = -1;\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 是数组的长度。需要遍历数组一次确定第一个数，时间复杂度是 $O(n)$，寻找第二个数使用二分查找，时间复杂度是 $O(\\log n)$，因此总时间复杂度是 $O(n \\log n)$。\n\n- 空间复杂度：$O(1)$。\n\n#### 方法二：双指针\n\n初始时两个指针分别指向第一个元素位置和最后一个元素的位置。每次计算两个指针指向的两个元素之和，并和目标值比较。如果两个元素之和等于目标值，则发现了唯一解。如果两个元素之和小于目标值，则将左侧指针右移一位。如果两个元素之和大于目标值，则将右侧指针左移一位。移动指针之后，重复上述操作，直到找到答案。\n\n使用双指针的实质是缩小查找范围。那么会不会把可能的解过滤掉？答案是不会。假设 $\\textit{numbers}[i]+\\textit{numbers}[j]=\\textit{target}$ 是唯一解，其中 $0 \\leq i<j \\leq \\textit{numbers}.\\textit{length}-1$。初始时两个指针分别指向下标 $0$ 和下标 $\\textit{numbers}.\\textit{length}-1$，左指针指向的下标小于或等于 $i$，右指针指向的下标大于或等于 $j$。除非初始时左指针和右指针已经位于下标 $i$ 和 $j$，否则一定是左指针先到达下标 $i$ 的位置或者右指针先到达下标 $j$ 的位置。\n\n如果左指针先到达下标 $i$ 的位置，此时右指针还在下标 $j$ 的右侧，$\\textit{sum}>\\textit{target}$，因此一定是右指针左移，左指针不可能移到 $i$ 的右侧。\n\n如果右指针先到达下标 $j$ 的位置，此时左指针还在下标 $i$ 的左侧，$\\textit{sum}<\\textit{target}$，因此一定是左指针右移，右指针不可能移到 $j$ 的左侧。\n\n由此可见，在整个移动过程中，左指针不可能移到 $i$ 的右侧，右指针不可能移到 $j$ 的左侧，因此不会把可能的解过滤掉。由于题目确保有唯一的答案，因此使用双指针一定可以找到答案。\n\n```Java [sol2-Java]\nclass Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int low = 0, high = numbers.length - 1;\n        while (low < high) {\n            int sum = numbers[low] + numbers[high];\n            if (sum == target) {\n                return new int[]{low + 1, high + 1};\n            } else if (sum < target) {\n                ++low;\n            } else {\n                --high;\n            }\n        }\n        return new int[]{-1, -1};\n    }\n}\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& numbers, int target) {\n        int low = 0, high = numbers.size() - 1;\n        while (low < high) {\n            int sum = numbers[low] + numbers[high];\n            if (sum == target) {\n                return {low + 1, high + 1};\n            } else if (sum < target) {\n                ++low;\n            } else {\n                --high;\n            }\n        }\n        return {-1, -1};\n    }\n};\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def twoSum(self, numbers: List[int], target: int) -> List[int]:\n        low, high = 0, len(numbers) - 1\n        while low < high:\n            total = numbers[low] + numbers[high]\n            if total == target:\n                return [low + 1, high + 1]\n            elif total < target:\n                low += 1\n            else:\n                high -= 1\n\n        return [-1, -1]\n```\n\n```golang [sol2-Golang]\nfunc twoSum(numbers []int, target int) []int {\n    low, high := 0, len(numbers) - 1\n    for low < high {\n        sum := numbers[low] + numbers[high]\n        if sum == target {\n            return []int{low + 1, high + 1}\n        } else if sum < target {\n            low++\n        } else {\n            high--\n        }\n    }\n    return []int{-1, -1}\n}\n```\n\n```C [sol2-C]\nint* twoSum(int* numbers, int numbersSize, int target, int* returnSize) {\n    int* ret = (int*)malloc(sizeof(int) * 2);\n    *returnSize = 2;\n\n    int low = 0, high = numbersSize - 1;\n    while (low < high) {\n        int sum = numbers[low] + numbers[high];\n        if (sum == target) {\n            ret[0] = low + 1, ret[1] = high + 1;\n            return ret;\n        } else if (sum < target) {\n            ++low;\n        } else {\n            --high;\n        }\n    }\n    ret[0] = -1, ret[1] = -1;\n    return ret;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是数组的长度。两个指针移动的总次数最多为 $n$ 次。\n\n- 空间复杂度：$O(1)$。",
      "createdAt": "2020-07-19T06:05:51.357573+00:00",
      "hitCount": 107673,
      "identifier": "hnukiV",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "yi-zhang-tu-gao-su-ni-on-de-shuang-zhi-zhen-jie-fa",
        "title": "一张图告诉你 O(n) 的双指针解法的本质原理（C++/Java）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "two-sum-ii-input-array-is-sorted"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 88,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 10,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "liang-shu-zhi-he-ii-shu-ru-you-xu-shu-zu-by-leet-2",
      "status": "PUBLISHED",
      "summary": "📺视频题解 📖 文字题解 前言 这道题可以使用「1. 两数之和」的解法，使用 $O(n^2)$ 的时间复杂度和 $O(1)$ 的空间复杂度暴力求解，或者借助哈希表使用 $O(n)$ 的时间复杂度和 $O(n)$ 的空间复杂度求解。但是这两种解法都是针对无序数组的，没有利用到输入数组有序的性质。利用输入数组有序的性质，可",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Two Pointers",
          "nameTranslated": "双指针",
          "slug": "two-pointers",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Binary Search",
          "nameTranslated": "二分查找",
          "slug": "binary-search",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "两数之和 II - 输入有序数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 173,
        "id": 337156,
        "viewCount": 76903
      },
      "uuid": "hnukiV",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/A1173ABBE384449B97BA3F20B59416A2-6-2.png",
          "duration": 574.4427,
          "videoId": "294970a6e3484e818b76aa0432a61a08"
        }
      ]
    }
  }
}
