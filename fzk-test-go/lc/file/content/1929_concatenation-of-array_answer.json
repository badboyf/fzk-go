{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：按要求串联\n\n**思路与算法**\n\n我们顺序遍历**修改前** $\\textit{nums}$ 数组的元素，并按顺序添加至 $\\textit{nums}$ 数组的尾部。最终，**修改后**的 $\\textit{nums}$ 数组即为串联形成的数组，我们返回该数组作为答案。\n\n对于 $\\texttt{Python}$ 语言，我们可以直接使用 $\\texttt{list}$ 的 $\\textit{extend}()$ 方法实现串联操作。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<int> getConcatenation(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i){\n            nums.push_back(nums[i]);\n        }\n        return nums;\n    }\n};\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def getConcatenation(self, nums: List[int]) -> List[int]:\n        nums.extend(nums)\n        return nums\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 为 $\\textit{nums}$ 的长度。即为遍历与串联的时间复杂度。\n\n- 空间复杂度：$O(1)$，输出数组不计入空间复杂度。",
      "createdAt": "2021-07-11T07:02:38.528733+00:00",
      "hitCount": 3942,
      "identifier": "3mD5hq",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "pin-jie-by-xian-yu-ben-yu-k-ojsq",
        "title": "拼接"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "concatenation-of-array"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "shu-zu-chuan-lian-by-leetcode-solution-wejh",
      "status": "PUBLISHED",
      "summary": "方法一：按要求串联 思路与算法 我们顺序遍历修改前 $\\textit{nums}$ 数组的元素，并按顺序添加至 $\\textit{nums}$ 数组的尾部。最终，修改后的 $\\textit{nums}$ 数组即为串联形成的数组，我们返回该数组作为答案。 对于 $\\texttt{Python}$ 语言，我们可以直接使用 ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "数组串联",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 6,
        "id": 870018,
        "viewCount": 3383
      },
      "uuid": "3mD5hq",
      "videosInfo": []
    }
  }
}
