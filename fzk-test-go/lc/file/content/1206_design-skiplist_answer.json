{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "风向决定发型",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/feng-xiang-jue-ding-fa-xing-2a/avatar_1616376433.png",
          "userSlug": "feng-xiang-jue-ding-fa-xing-2a"
        },
        "username": "feng-xiang-jue-ding-fa-xing-2a"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路\n跳表实现的主要难度在于插入(add)算法。只要把add方法搞明白之后，一切都迎刃而解了。\n\n关于跳表的插入，一张图即可描述出来，\n![skiplist_insertions.png](https://pic.leetcode-cn.com/1612247342-QjALhY-skiplist_insertions.png)\n\n> 图片来自 [http://zhangtielei.com/posts/blog-redis-skiplist.html](http://zhangtielei.com/posts/blog-redis-skiplist.html)\n\n通过这张图，可以先确定跳表中每个节点的数据结构：\n```java\nclass Node{\n    Integer value; //节点值\n    Node[] next; // 节点在不同层的下一个节点\n\n    public Node(Integer value,int size) { // 用size表示当前节点在跳表中索引几层\n        this.value = value;\n        this.next = new Node[size];\n    }\n}\n```\n\n然后就需要考虑：我插入一个节点Node，它到底应该是索引到第几层呢？\n\n一开始我还想着如何准确的维护上一层是下一层的1/2，发现越想越复杂；然后通过相关资料，发现人家早就给出一个解决方案：随机出来一个层数。\n\n这里有一个疑惑：就凭随机出来的一个层数，能保证查询与插入性能吗？\n\n> 在分析之前，我们还需要着重指出的是，执行插入操作时计算随机数的过程，是一个很关键的过程，它对skiplist的统计特性有着很重要的影响。这并不是一个普通的服从均匀分布的随机数，它的计算过程如下：\n> 首先，每个节点肯定都有第1层指针（每个节点都在第1层链表里）。\n>如果一个节点有第i层(i>=1)指针（即节点已经在第1层到第i层链表中），那么它有第(i+1)层指针的概率为p。\n>节点最大的层数不允许超过一个最大值，记为MaxLevel。\n>这个计算随机层数的伪码如下所示：\n```java\nint randomLevel()\n    int level = 1;\n    while (Math.random()<p && level<MaxLevel){\n        level ++ ;\n    }\n    return level;\n```\n> randomLevel()的伪码中包含两个参数，一个是p，一个是MaxLevel。在Redis的skiplist实现中，这两个参数的取值为：\n```\np = 1/4\nMaxLevel = 32\n```\n> from : [http://zhangtielei.com/posts/blog-redis-skiplist.html](http://zhangtielei.com/posts/blog-redis-skiplist.html)\n\n知道了层数，这下就好办了。思路如下：\n1. 先随机出来一个层数，new要插入的节点，先叫做插入节点newNode；\n\n2. 根据跳表实际的总层数从上往下分析，要插入一个节点newNode时，先找到节点在该层的位置：因为是链表，所以需要一个节点node，满足插入插入节点newNode的值刚好不大于node的下一个节点值，当然，如果node的下个节点为空，那么也是满足的。\n\n我们先把找节点在某一层位置的方法封装起来：\n```java\n/**\n* 找到level层 value 刚好不小于node 的节点\n* @param node 从哪个节点开始找\n* @param levelIndex 所在层\n* @param value 要插入的节点值\n* @return\n*/\nprivate Node findClosest(Node node,int levelIndex,int value){\n    while ((node.next[levelIndex])!=null && value >node.next[levelIndex].value){\n        node = node.next[levelIndex];\n    }\n    return node;\n}\n```\n\n3. 确定插入节点newNode在该层的位置后，先判断下newNode的随机层数是否小于当前跳表的总层数，如果是，则用链表的插入方法将newNode插入即可。\n\n4. 如此循环，直到最底层插入newNode完毕。\n\n5. 循环完毕后，还需要判断下newNode随机出来的层数是否比跳表的实际层数还要大，如果是，直接将超过实际层数的跳表的头节点指向newNode即可，该跳表的实际层数也就变为newNode的随机层数了。\n\n以上就是插入的算法。\n\n理解了插入算法后，查找跟删除就简单多了。\n\n不管是插入、查找还是删除，均是从跳表上层往下层分析，复用上面的findClosest方法，找到要查询的值 在该层closest的节点。比如查询，只需要判断findClosest出来的节点值是否等于该查询值即可，是就返回，不是则继续往下层判断。删除方法思想也是一致的。\n\n\n### 代码\n\n```java\nclass Skiplist {\n        /**\n         * 最大层数\n         */\n        private static int DEFAULT_MAX_LEVEL = 32;\n        /**\n         * 随机层数概率，也就是随机出的层数，在 第1层以上(不包括第一层)的概率，层数不超过maxLevel，层数的起始号为1\n         */\n        private static double DEFAULT_P_FACTOR = 0.25;\n\n        Node head = new Node(null,DEFAULT_MAX_LEVEL); //头节点\n\n        int currentLevel = 1; //表示当前nodes的实际层数，它从1开始\n\n\n        public Skiplist() {\n        }\n\n        public boolean search(int target) {\n            Node searchNode = head;\n            for (int i = currentLevel-1; i >=0; i--) {\n                searchNode = findClosest(searchNode, i, target);\n                if (searchNode.next[i]!=null && searchNode.next[i].value == target){\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         *\n         * @param num\n         */\n        public void add(int num) {\n            int level = randomLevel();\n            Node updateNode = head;\n            Node newNode = new Node(num,level);\n            // 计算出当前num 索引的实际层数，从该层开始添加索引\n            for (int i = currentLevel-1; i>=0; i--) {\n                //找到本层最近离num最近的list\n                updateNode = findClosest(updateNode,i,num);\n                if (i<level){\n                    if (updateNode.next[i]==null){\n                        updateNode.next[i] = newNode;\n                    }else{\n                        Node temp = updateNode.next[i];\n                        updateNode.next[i] = newNode;\n                        newNode.next[i] = temp;\n                    }\n                }\n            }\n            if (level > currentLevel){ //如果随机出来的层数比当前的层数还大，那么超过currentLevel的head 直接指向newNode\n                for (int i = currentLevel; i < level; i++) {\n                    head.next[i] = newNode;\n                }\n                currentLevel = level;\n            }\n\n        }\n\n        public boolean erase(int num) {\n            boolean flag = false;\n            Node searchNode = head;\n            for (int i = currentLevel-1; i >=0; i--) {\n                searchNode = findClosest(searchNode, i, num);\n                if (searchNode.next[i]!=null && searchNode.next[i].value == num){\n                    //找到该层中该节点\n                    searchNode.next[i] = searchNode.next[i].next[i];\n                    flag = true;\n                    continue;\n                }\n            }\n            return flag;\n        }\n\n        /**\n         * 找到level层 value 大于node 的节点\n         * @param node\n         * @param levelIndex\n         * @param value\n         * @return\n         */\n        private Node findClosest(Node node,int levelIndex,int value){\n            while ((node.next[levelIndex])!=null && value >node.next[levelIndex].value){\n                node = node.next[levelIndex];\n            }\n            return node;\n        }\n\n\n        /**\n         * 随机一个层数\n         */\n        private static int randomLevel(){\n            int level = 1;\n            while (Math.random()<DEFAULT_P_FACTOR && level<DEFAULT_MAX_LEVEL){\n                level ++ ;\n            }\n            return level;\n        }\n\n\n        class Node{\n            Integer value;\n            Node[] next;\n\n            public Node(Integer value,int size) {\n                this.value = value;\n                this.next = new Node[size];\n            }\n\n            @Override\n            public String toString() {\n                return String.valueOf(value);\n            }\n        }\n\n    }\n```",
      "createdAt": "2021-02-02T07:09:19.376665+00:00",
      "hitCount": 3367,
      "identifier": "EQiogZ",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "li-yong-shu-zu-listarraynumberwan-cheng-52phs",
        "title": "利用数组list:Array<number>完成需求"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "design-skiplist"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 25,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "javashou-xie-shi-xian-tiao-biao-by-feng-omdm0",
      "status": "PREPUBLISH",
      "summary": "解题思路\n跳表实现的主要难度在于插入(add)算法。只要把add方法搞明白之后，一切都迎刃而解了。\n关于跳表的插入，一张图即可描述出来，\n\n\n图片来自 http://zhangtielei.com/posts/blog-redis-skiplist.html\n\n通过这张图，可以先确定跳表中每个节点的数据结构：\n然后就需",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/1612247342-QjALhY-skiplist_insertions.png",
      "title": "Java手写实现跳表",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 587798,
        "viewCount": 2220
      },
      "uuid": "EQiogZ",
      "videosInfo": []
    }
  }
}
