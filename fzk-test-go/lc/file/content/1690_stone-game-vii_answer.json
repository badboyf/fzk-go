{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "cyber_8086",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/spacex-1/avatar_1607074144.png",
          "userSlug": "cyber-space"
        },
        "username": "Cyber-Space"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 解题思路：\r\n数据范围：1000 考虑 $n^2 DP$\r\n之前做过类似一道题，[石子游戏877](https://leetcode-cn.com/problems/stone-game/)，`dp[i][j]` 表示轮到这一个人（无论是 A 或者 B）选时，他能得到与另一个人最大的得分差；\r\n无论是 B 想要缩短得分差，或者 A 想要扩大得分差，其本质就是这次操作能得到与对手最大的得分差。\r\n\r\n**如何理解这个得分差？**\r\n\r\n比如说，有 2，3，4 这三个数。\r\n轮到 A 删了，A 删的是 2，得到得分是 7，然后 B 删 3 得到得分是 4，那么 A 与 B 的得分差就是 3；\r\n若 A 删的是 4，得到得分是 5，然后 B 删 2 得到得分是 3，那么得分差 。\r\n所以这里最大轮到 A 删时，A 能得到的最大得分差是 3。\r\n所以 **最大得分差** 可以理解为此次操作之后，**A 所收获的价值 - 下次B 比A的得分差的最大值**。\r\n如果是 B 操作，那么就是 **B 所收获的价值 - 下次A比B得分差的最大值**\r\n所以这次 `DP` 也用类似的状态。\r\n\r\n又因为每次删掉之后的得分是区间累加和，所以又涉及到区间和，所以需要维护\r\n**`sum[i][j]`：表示从 `i` 到 `j` 的石头价值总和**\r\n**`dp[i][j]`：表示剩下的石头堆为 i 到 j 时，当前玩家与另一个玩家得分差的最大值，当前玩家不一定是先手Alice**\r\n\r\n接下来来推 **状态转移方程**：\r\n1. 最初始的时候：`i == j` ，`dp[i][j] = 0`，因为删了之后没得取\r\n2. 当 `j - i == 1` 时，`dp[i][j] = max(stones[i]`, `stones[j]`)，因为我要利益最大化，我肯定删掉一个较小的石头，取最大得分，反正下一个人是没分的\r\n3. 当 `j - i > 1` 时， `dp[i][j] = max(sum[i + 1][j] - dp[i + 1][j], sum[i][j - 1] - dp[i][j - 1])`\r\n本次删除，A能从左端删或者从右端删，\r\n从左端删，在剩下的石头中（不考虑前面的），B将比A得分多dp[i + 1][j]\r\n从右端删，在剩下的石头中（不考虑前面的），B将比A得分多dp[i][j - 1]\r\n所以A考虑本次操作拉开与对手得分差距，那么应该是A从左右两种方案中，本次删掉石头后的得分 - 对手下次比我多的得分的较大方案者。\r\n当B来删除时，也是如此，两者都是为了扩大与对手的得分差\r\n所以转移方程为： `dp[i][j] = max(sum[i + 1][j] - dp[i + 1][j], sum[i][j - 1] - dp[i][j - 1])`\r\n\r\n最后返回 `dp[0][n - 1]` 即为我们所需的答案，表示剩下的石头为 0 到 `n - 1`，Alice 能取得的比Bob得分差的最大值\r\n### 代码及注释如下：\r\n```C++ []\r\nclass Solution {\r\npublic:\r\n    int stoneGameVII(vector<int>& stones) {\r\n\t\tint n = stones.size();\r\n\t\tvector<vector<int>> sum(n, vector<int>(n, 0));\r\n\t\tfor(int i = 0; i < n; i++){\r\n\t\t\tfor(int j = i; j < n; j++){\r\n\t\t\t\tif(i == j) sum[i][j] = stones[i]; //记录区间和\r\n\t\t\t\telse sum[i][j] = stones[j] + sum[i][j - 1];\r\n\t\t\t}\r\n\t\t}\r\n\t\tvector<vector<int>> dp(n, vector<int>(n, 0));\r\n\t\tfor(int i = n - 1; i >= 0; i--){\r\n\t\t\tfor(int j = i + 1; j < n; j++){\r\n\t\t\t\tdp[i][j] = max(sum[i + 1][j] - dp[i + 1][j], sum[i][j - 1] - dp[i][j - 1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dp[0][n - 1]; //返回A能取的最大和\r\n    }\r\n};\r\n```\r\n",
      "createdAt": "2020-12-13T04:11:12.262687+00:00",
      "hitCount": 6804,
      "identifier": "egaJv6",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "cbo-yi-si-lu-xiang-jie-by-jiang-xian-sen-j2tj",
        "title": "C++博弈思路详解"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "stone-game-vii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 33,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 4,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "c-qu-jian-dp-si-lu-zheng-li-guo-cheng-by-3h0l",
      "status": "PREPUBLISH",
      "summary": "解题思路：\n数据范围：1000 考虑 n^2 DP\n之前做过类似一道题，石子游戏877，dp[i][j] 表示轮到这一个人（无论是 A 或者 B）选时，他能得到与另一个人最大的得分差；\n无论是 B 想要缩短得分差，或者 A 想要扩大得分差，其本质就是这次操作能得到与对手最大的得分差。\n如何理解这个得分差？\n比如说，有",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "C++ && 博弈DP && 思路整理过程",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 26,
        "id": 519583,
        "viewCount": 4570
      },
      "uuid": "egaJv6",
      "videosInfo": []
    }
  }
}
