{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：排序\n\n**思路与算法**\n\n我们将给定的数组 $\\textit{nums}$ 表示为三段子数组拼接的形式，分别记作 $\\textit{nums}_A$，$\\textit{nums}_B$，$\\textit{nums}_C$。当我们对 $\\textit{nums}_B$ 进行排序，整个数组将变为有序。换而言之，当我们对整个序列进行排序，$\\textit{nums}_A$ 和 $\\textit{nums}_C$ 都不会改变。\n\n本题要求我们找到最短的 $\\textit{nums}_B$，即找到最大的 $\\textit{nums}_A$ 和 $\\textit{nums}_C$ 的长度之和。因此我们将原数组 $\\textit{nums}$ 排序与原数组进行比较，取最长的相同的前缀为 $\\textit{nums}_A$，取最长的相同的后缀为 $\\textit{nums}_C$，这样我们就可以取到最短的 $\\textit{nums}_B$。\n\n具体地，我们创建数组 $\\textit{nums}$ 的拷贝，记作数组 $\\textit{numsSorted}$，并对该数组进行排序，然后我们从左向右找到第一个两数组不同的位置，即为 $\\textit{nums}_B$ 的左边界。同理也可以找到 $\\textit{nums}_B$ 右边界。最后我们输出 $\\textit{nums}_B$ 的长度即可。\n\n特别地，当原数组有序时，$\\textit{nums}_B$ 的长度为 $0$，我们可以直接返回结果。\n\n**代码**\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        if (is_sorted(nums.begin(), nums.end())) {\n            return 0;\n        }\n        vector<int> numsSorted(nums);\n        sort(numsSorted.begin(), numsSorted.end());\n        int left = 0;\n        while (nums[left] == numsSorted[left]) {\n            left++;\n        }\n        int right = nums.size() - 1;\n        while (nums[right] == numsSorted[right]) {\n            right--;\n        }\n        return right - left + 1;\n    }\n};\n```\n\n```Java [sol1-Java]\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        if (isSorted(nums)) {\n            return 0;\n        }\n        int[] numsSorted = new int[nums.length];\n        System.arraycopy(nums, 0, numsSorted, 0, nums.length);\n        Arrays.sort(numsSorted);\n        int left = 0;\n        while (nums[left] == numsSorted[left]) {\n            left++;\n        }\n        int right = nums.length - 1;\n        while (nums[right] == numsSorted[right]) {\n            right--;\n        }\n        return right - left + 1;\n    }\n\n    public boolean isSorted(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] < nums[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```C# [sol1-C#]\npublic class Solution {\n    public int FindUnsortedSubarray(int[] nums) {\n        if (IsSorted(nums)) {\n            return 0;\n        }\n        int[] numsSorted = new int[nums.Length];\n        Array.Copy(nums, numsSorted, nums.Length);\n        Array.Sort(numsSorted);\n        int left = 0;\n        while (nums[left] == numsSorted[left]) {\n            left++;\n        }\n        int right = nums.Length - 1;\n        while (nums[right] == numsSorted[right]) {\n            right--;\n        }\n        return right - left + 1;\n    }\n\n    public bool IsSorted(int[] nums) {\n        for (int i = 1; i < nums.Length; i++) {\n            if (nums[i] < nums[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        def isSorted() -> bool:\n            for i in range(1, n):\n                if nums[i - 1] > nums[i]:\n                    return False\n            return True\n        \n        if isSorted():\n            return 0\n        \n        numsSorted = sorted(nums)\n        left = 0\n        while nums[left] == numsSorted[left]:\n            left += 1\n\n        right = n - 1\n        while nums[right] == numsSorted[right]:\n            right -= 1\n        \n        return right - left + 1\n```\n\n```JavaScript [sol1-JavaScript]\nvar findUnsortedSubarray = function(nums) {\n    if (isSorted(nums)) {\n        return 0;\n    }\n    const numsSorted = [...nums].sort((a, b) => a - b);\n    let left = 0;\n    while (nums[left] === numsSorted[left]) {\n        left++;\n    }\n    let right = nums.length - 1;\n    while (nums[right] == numsSorted[right]) {\n        right--;\n    }\n    return right - left + 1;\n};\n\nconst isSorted = (nums) => {\n    for (let i = 1; i < nums.length; i++) {\n        if (nums[i] < nums[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n```\n\n```go [sol1-Golang]\nfunc findUnsortedSubarray(nums []int) int {\n    if sort.IntsAreSorted(nums) {\n        return 0\n    }\n    numsSorted := append([]int(nil), nums...)\n    sort.Ints(numsSorted)\n    left, right := 0, len(nums)-1\n    for nums[left] == numsSorted[left] {\n        left++\n    }\n    for nums[right] == numsSorted[right] {\n        right--\n    }\n    return right - left + 1\n}\n```\n\n```C [sol1-C]\nbool is_sorted(int* arr, int arrSize) {\n    for (int i = 1; i < arrSize; i++) {\n        if (arr[i - 1] > arr[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint cmp(int* a, int* b) {\n    return *a - *b;\n}\n\nint findUnsortedSubarray(int* nums, int numsSize) {\n    if (is_sorted(nums, numsSize)) {\n        return 0;\n    }\n    int numsSorted[numsSize];\n    memcpy(numsSorted, nums, sizeof(int) * numsSize);\n    qsort(numsSorted, numsSize, sizeof(int), cmp);\n    int left = 0;\n    while (nums[left] == numsSorted[left]) {\n        left++;\n    }\n    int right = numsSize - 1;\n    while (nums[right] == numsSorted[right]) {\n        right--;\n    }\n    return right - left + 1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n \\log n)$，其中 $n$ 为给定数组的长度。我们需要 $O(n \\log n)$ 的时间进行排序，以及 $O(n)$ 的时间遍历数组，因此总时间复杂度为 $O(n)$。\n\n- 空间复杂度：$O(n)$，其中 $n$ 为给定数组的长度。我们需要额外的一个数组保存排序后的数组 $\\textit{numsSorted}$。\n\n#### 方法二：一次遍历\n\n**思路与算法**\n\n假设 $\\textit{nums}_B$ 在 $\\textit{nums}$ 中对应区间为 $[\\textit{left},\\textit{right}]$。\n\n注意到 $\\textit{nums}_B$ 和 $\\textit{nums}_C$ 中任意一个数都大于等于 $\\textit{nums}_A$ 中任意一个数。因此有 $\\textit{nums}_A$ 中每一个数 $\\textit{nums}_i$ 都满足：\n\n$$\n\\textit{nums}_i \\leq \\min_{j=i+1}^{n-1} \\textit{nums}_j\n$$\n\n我们可以从大到小枚举 $i$，用一个变量 $\\textit{minn}$ 记录 $\\min_{j=i+1}^{n-1} \\textit{nums}_j$。每次移动 $i$，都可以 $O(1)$ 地更新 $\\textit{minn}$。这样最后一个使得不等式不成立的 $i$ 即为 $\\textit{left}$。$\\textit{left}$ 左侧即为 $\\textit{nums}_A$ 能取得的最大范围。\n\n同理，我们可以用类似的方法确定 $\\textit{right}$。在实际代码中，我们可以在一次循环中同时完成左右边界的计算。\n\n特别地，我们需要特判 $\\textit{nums}$ 有序的情况，此时 $\\textit{nums}_B$ 的长度为 $0$。当我们计算完成左右边界，即可返回 $\\textit{nums}_B$ 的长度。\n\n**代码**\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    int findUnsortedSubarray(vector<int>& nums) {\n        int n = nums.size();\n        int maxn = INT_MIN, right = -1;\n        int minn = INT_MAX, left = -1;\n        for (int i = 0; i < n; i++) {\n            if (maxn > nums[i]) {\n                right = i;\n            } else {\n                maxn = nums[i];\n            }\n            if (minn < nums[n - i - 1]) {\n                left = n - i - 1;\n            } else {\n                minn = nums[n - i - 1];\n            }\n        }\n        return right == -1 ? 0 : right - left + 1;\n    }\n};\n```\n\n```Java [sol2-Java]\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int n = nums.length;\n        int maxn = Integer.MIN_VALUE, right = -1;\n        int minn = Integer.MAX_VALUE, left = -1;\n        for (int i = 0; i < n; i++) {\n            if (maxn > nums[i]) {\n                right = i;\n            } else {\n                maxn = nums[i];\n            }\n            if (minn < nums[n - i - 1]) {\n                left = n - i - 1;\n            } else {\n                minn = nums[n - i - 1];\n            }\n        }\n        return right == -1 ? 0 : right - left + 1;\n    }\n}\n```\n\n```C# [sol2-C#]\npublic class Solution {\n    public int FindUnsortedSubarray(int[] nums) {\n        int n = nums.Length;\n        int maxn = int.MinValue, right = -1;\n        int minn = int.MaxValue, left = -1;\n        for (int i = 0; i < n; i++) {\n            if (maxn > nums[i]) {\n                right = i;\n            } else {\n                maxn = nums[i];\n            }\n            if (minn < nums[n - i - 1]) {\n                left = n - i - 1;\n            } else {\n                minn = nums[n - i - 1];\n            }\n        }\n        return right == -1 ? 0 : right - left + 1;\n    }\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def findUnsortedSubarray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxn, right = float(\"-inf\"), -1\n        minn, left = float(\"inf\"), -1\n\n        for i in range(n):\n            if maxn > nums[i]:\n                right = i\n            else:\n                maxn = nums[i]\n            \n            if minn < nums[n - i - 1]:\n                left = n - i - 1\n            else:\n                minn = nums[n - i - 1]\n        \n        return 0 if right == -1 else right - left + 1\n```\n\n```JavaScript [sol2-JavaScript]\nvar findUnsortedSubarray = function(nums) {\n    const n = nums.length;\n    let maxn = -Number.MAX_VALUE, right = -1;\n    let minn = Number.MAX_VALUE, left = -1;\n    for (let i = 0; i < n; i++) {\n        if (maxn > nums[i]) {\n            right = i;\n        } else {\n            maxn = nums[i];\n        }\n        if (minn < nums[n - i - 1]) {\n            left = n - i - 1;\n        } else {\n            minn = nums[n - i - 1];\n        }\n    }\n    return right === -1 ? 0 : right - left + 1;\n};\n```\n\n```go [sol2-Golang]\nfunc findUnsortedSubarray(nums []int) int {\n    n := len(nums)\n    minn, maxn := math.MaxInt64, math.MinInt64\n    left, right := -1, -1\n    for i, num := range nums {\n        if maxn > num {\n            right = i\n        } else {\n            maxn = num\n        }\n        if minn < nums[n-i-1] {\n            left = n - i - 1\n        } else {\n            minn = nums[n-i-1]\n        }\n    }\n    if right == -1 {\n        return 0\n    }\n    return right - left + 1\n}\n```\n\n```C [sol2-C]\nint findUnsortedSubarray(int* nums, int numsSize) {\n    int n = numsSize;\n    int maxn = INT_MIN, right = -1;\n    int minn = INT_MAX, left = -1;\n    for (int i = 0; i < n; i++) {\n        if (maxn > nums[i]) {\n            right = i;\n        } else {\n            maxn = nums[i];\n        }\n        if (minn < nums[n - i - 1]) {\n            left = n - i - 1;\n        } else {\n            minn = nums[n - i - 1];\n        }\n    }\n    return right == -1 ? 0 : right - left + 1;\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：$O(n)$，其中 $n$ 是给定数组的长度，我们仅需要遍历该数组一次。\n\n- 时间复杂度：$O(1)$。我们只需要常数的空间保存若干变量。",
      "createdAt": "2021-08-02T15:10:42.117008+00:00",
      "hitCount": 43937,
      "identifier": "P9I7YW",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "si-lu-qing-xi-ming-liao-kan-bu-dong-bu-cun-zai-de-",
        "title": "思路清晰明了，看不懂？？不存在的！！"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "shortest-unsorted-continuous-subarray"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 82,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf",
      "status": "PUBLISHED",
      "summary": "方法一：排序 思路与算法 我们将给定的数组 $\\textit{nums}$ 表示为三段子数组拼接的形式，分别记作 $\\textit{nums}_A$，$\\textit{nums}_B$，$\\textit{nums}_C$。当我们对 $\\textit{nums}_B$ 进行排序，整个数组将变为有序。换而言之，当我们对整个",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C#",
          "nameTranslated": "",
          "slug": "csharp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "java",
          "nameTranslated": "",
          "slug": "java-11",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "最短无序连续子数组",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 109,
        "id": 911677,
        "viewCount": 26544
      },
      "uuid": "P9I7YW",
      "videosInfo": []
    }
  }
}
