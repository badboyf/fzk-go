{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "vanilla111",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/vanilla111/avatar_1566265236.png",
          "userSlug": "vanilla111"
        },
        "username": "vanilla111"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "本题需要一点前置知识，那就是**给定下标[i, j] (i <= j)需要在O(1)时间复杂度内判断该范围内的子串是否是回文**。如果不知道怎么做，请先尝试解决[647. 回文子串](https://leetcode-cn.com/problems/palindromic-substrings/)。\n\n如果清楚了以上问题，我们就可以使用动态规划预处理字符串，得到一张映射表，然后用回溯算法就可以解决该问题了（其实就是不断枚举不相交的区间）。\n\n``` java\nclass Solution {\n    public String[][] partition(String s) {\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        // 预处理\n        boolean[][] dp = new boolean[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = true;\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                dp[i][j] = (arr[i] == arr[j] && dp[i + 1][j - 1]);\n            }\n        }\n        List<List<String>> res = new ArrayList<>();\n        List<String> path = new ArrayList<>();\n        dfs(res, path, s, n, dp, 0);\n        // List<List<String>> 转 String[][]，这里不重要\n        String[][] ans = new String[res.size()][];\n        for (int i = 0; i < res.size(); i++) {\n            ans[i] = new String[res.get(i).size()];\n            for (int j = 0; j < ans[i].length; j++) {\n                ans[i][j] = res.get(i).get(j);\n            }\n        }\n        return ans;\n    }\n\n    public void dfs(List<List<String>> res, List<String> path, String s, int n, boolean[][] dp, int pos) {\n        if (pos == n) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = pos; i < n; i++) {\n            // s[pos:i] （闭区间）是一个回文，所以递归搜索s[i+1, s.length()-1] \n            if (dp[pos][i]) {\n                path.add(s.substring(pos, i + 1));\n                dfs(res, path, s, n, dp, i + 1);\n                path.remove(path.size() - 1);\n            }\n        }\n    }\n}\n```\n",
      "createdAt": "2021-09-12T04:49:51.956628+00:00",
      "hitCount": 1249,
      "identifier": "cpTNHs",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "jian-zhi-offer-2-mian-shi-ti-86-shu-zhon-gstd",
        "title": "《剑指offer 2 面试题86》 书中算法C++实现"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "M99OJA"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 8,
          "reactionType": "UPVOTE"
        }
      ],
      "rewardEnabled": null,
      "slug": "java-dong-tai-gui-hua-yu-chu-li-shen-du-ougcx",
      "status": "PREPUBLISH",
      "summary": "本题需要一点前置知识，那就是给定下标[i, j] (i <= j)需要在O(1)时间复杂度内判断该范围内的子串是否是回文。如果不知道怎么做，请先尝试解决647. 回文子串。\n如果清楚了以上问题，我们就可以使用动态规划预处理字符串，得到一张映射表，然后用回溯算法就可以解决该问题了（其实就是不断枚举不相交的区间）。",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "回溯法",
          "nameTranslated": "",
          "slug": "hui-su-fa",
          "tagType": "ADDITIONAL_TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "深度优先",
          "nameTranslated": "",
          "slug": "shen-du-you-xian",
          "tagType": "ADDITIONAL_TOPIC"
        }
      ],
      "thumbnail": "",
      "title": "Java 动态规划/预处理/深度优先搜索/回溯",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 0,
        "id": 993056,
        "viewCount": 855
      },
      "uuid": "cpTNHs",
      "videosInfo": []
    }
  }
}
