{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "### 📺视频题解  \n\n![155.最小栈_甜姨.mp4](11ac0cb3-e770-4e9e-b581-b884cae3eb82)\n\n### 📖文字题解\n\n#### 方法一：辅助栈\n\n**思路**\n\n要做出这道题目，首先要理解栈结构先进后出的性质。\n\n对于栈来说，如果一个元素 `a` 在入栈时，栈里有其它的元素 `b, c, d`，那么无论这个栈在之后经历了什么操作，只要 `a` 在栈中，`b, c, d` 就一定在栈中，因为在 `a` 被弹出之前，`b, c, d` 不会被弹出。\n\n因此，在操作过程中的任意一个时刻，只要栈顶的元素是 `a`，那么我们就可以确定栈里面现在的元素一定是 `a, b, c, d`。\n\n那么，我们可以在每个元素 `a` 入栈时把当前栈的最小值 `m` 存储起来。在这之后无论何时，如果栈顶元素是 `a`，我们就可以直接返回存储的最小值 `m`。\n\n![fig1](https://assets.leetcode-cn.com/solution-static/155/155_fig1.gif)\n\n**算法**\n\n按照上面的思路，我们只需要设计一个数据结构，使得每个元素 `a` 与其相应的最小值 `m` 时刻保持一一对应。因此我们可以使用一个辅助栈，与元素栈同步插入与删除，用于存储与每个元素对应的最小值。\n\n- 当一个元素要入栈时，我们取当前辅助栈的栈顶存储的最小值，与当前元素比较得出最小值，将这个最小值插入辅助栈中；\n\n- 当一个元素要出栈时，我们把辅助栈的栈顶元素也一并弹出；\n\n- 在任意一个时刻，栈内元素的最小值就存储在辅助栈的栈顶元素中。\n\n```Python [sol1-Python3]\nclass MinStack:\n    def __init__(self):\n        self.stack = []\n        self.min_stack = [math.inf]\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        self.min_stack.append(min(x, self.min_stack[-1]))\n\n    def pop(self) -> None:\n        self.stack.pop()\n        self.min_stack.pop()\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def getMin(self) -> int:\n        return self.min_stack[-1]\n```\n\n```C++ [sol1-C++]\nclass MinStack {\n    stack<int> x_stack;\n    stack<int> min_stack;\npublic:\n    MinStack() {\n        min_stack.push(INT_MAX);\n    }\n    \n    void push(int x) {\n        x_stack.push(x);\n        min_stack.push(min(min_stack.top(), x));\n    }\n    \n    void pop() {\n        x_stack.pop();\n        min_stack.pop();\n    }\n    \n    int top() {\n        return x_stack.top();\n    }\n    \n    int getMin() {\n        return min_stack.top();\n    }\n};\n```\n\n```Java [sol1-Java]\nclass MinStack {\n    Deque<Integer> xStack;\n    Deque<Integer> minStack;\n\n    public MinStack() {\n        xStack = new LinkedList<Integer>();\n        minStack = new LinkedList<Integer>();\n        minStack.push(Integer.MAX_VALUE);\n    }\n    \n    public void push(int x) {\n        xStack.push(x);\n        minStack.push(Math.min(minStack.peek(), x));\n    }\n    \n    public void pop() {\n        xStack.pop();\n        minStack.pop();\n    }\n    \n    public int top() {\n        return xStack.peek();\n    }\n    \n    public int getMin() {\n        return minStack.peek();\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar MinStack = function() {\n    this.x_stack = [];\n    this.min_stack = [Infinity];\n};\n\nMinStack.prototype.push = function(x) {\n    this.x_stack.push(x);\n    this.min_stack.push(Math.min(this.min_stack[this.min_stack.length - 1], x));\n};\n\nMinStack.prototype.pop = function() {\n    this.x_stack.pop();\n    this.min_stack.pop();\n};\n\nMinStack.prototype.top = function() {\n    return this.x_stack[this.x_stack.length - 1];\n};\n\nMinStack.prototype.getMin = function() {\n    return this.min_stack[this.min_stack.length - 1];\n};\n```\n\n```golang [sol1-Golang]\ntype MinStack struct {\n    stack []int\n    minStack []int\n}\n\nfunc Constructor() MinStack {\n    return MinStack{\n        stack: []int{},\n        minStack: []int{math.MaxInt64},\n    }\n}\n\nfunc (this *MinStack) Push(x int)  {\n    this.stack = append(this.stack, x)\n    top := this.minStack[len(this.minStack)-1]\n    this.minStack = append(this.minStack, min(x, top))\n}\n\nfunc (this *MinStack) Pop()  {\n    this.stack = this.stack[:len(this.stack)-1]\n    this.minStack = this.minStack[:len(this.minStack)-1]\n}\n\nfunc (this *MinStack) Top() int {\n    return this.stack[len(this.stack)-1]\n}\n\nfunc (this *MinStack) GetMin() int {\n    return this.minStack[len(this.minStack)-1]\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：对于题目中的所有操作，时间复杂度均为 $O(1)$。因为栈的插入、删除与读取操作都是 $O(1)$，我们定义的每个操作最多调用栈操作两次。\n\n* 空间复杂度：$O(n)$，其中 $n$ 为总操作数。最坏情况下，我们会连续插入 $n$ 个元素，此时两个栈占用的空间为 $O(n)$。",
      "createdAt": "2020-05-11T08:47:37.831663+00:00",
      "hitCount": 165041,
      "identifier": "ScYVMm",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "zui-yi-dong-yi-ge-zhan-tong-shi-bao-cun-dang-qian-",
        "title": "一个栈同时保存当前值和栈内最小值"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "min-stack"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 167,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 19,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 9,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "zui-xiao-zhan-by-leetcode-solution",
      "status": "PUBLISHED",
      "summary": "📺视频题解 📖文字题解 方法一：辅助栈 思路 要做出这道题目，首先要理解栈结构先进后出的性质。 对于栈来说，如果一个元素 a 在入栈时，栈里有其它的元素 b, c, d，那么无论这个栈在之后经历了什么操作，只要 a 在栈中，b, c, d 就一定在栈中，因为在 a 被弹出之前，b, c, d 不会被弹出。 因此，在操作",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Design",
          "nameTranslated": "设计",
          "slug": "design",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "最小栈",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 291,
        "id": 242190,
        "viewCount": 117247
      },
      "uuid": "ScYVMm",
      "videosInfo": [
        {
          "__typename": "VideoInfoNode",
          "coverUrl": "https://video.leetcode-cn.com/image/cover/FC4292AE521B46198E72682A6A006C0C-6-2.png",
          "duration": 424.4693,
          "videoId": "a5f35d0a17654c7f887992e2b14fd782"
        }
      ]
    }
  }
}
