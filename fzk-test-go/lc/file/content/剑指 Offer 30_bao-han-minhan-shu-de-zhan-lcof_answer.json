{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "Krahets",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/jyd/avatar_1589712294.png",
          "userSlug": "jyd"
        },
        "username": "jyd"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路：\r\n\r\n> 普通栈的 `push()` 和 `pop()` 函数的复杂度为 $O(1)$ ；而获取栈最小值 `min()` 函数需要遍历整个栈，复杂度为 $O(N)$ 。\r\n\r\n- **本题难点：** 将 `min()` 函数复杂度降为 $O(1)$ ，可通过建立辅助栈实现；\r\n  - **数据栈 $A$ ：** 栈 $A$ 用于存储所有元素，保证入栈 `push()` 函数、出栈 `pop()` 函数、获取栈顶 `top()` 函数的正常逻辑。  \r\n  - **辅助栈 $B$ ：** 栈 $B$ 中存储栈 $A$ 中所有 **非严格降序** 的元素，则栈 $A$ 中的最小元素始终对应栈 $B$ 的栈顶元素，即 `min()` 函数只需返回栈 $B$ 的栈顶元素即可。\r\n- 因此，只需设法维护好 栈 $B$ 的元素，使其保持非严格降序，即可实现 `min()` 函数的 $O(1)$ 复杂度。\r\n\r\n![Picture1.png](https://pic.leetcode-cn.com/f31f4b7f5e91d46ea610b6685c593e12bf798a9b8336b0560b6b520956dd5272-Picture1.png){:width=400}\r\n\r\n##### 函数设计：\r\n\r\n- **`push(x)` 函数：** 重点为保持栈 $B$ 的元素是 **非严格降序** 的。\r\n  1. 将 $x$ 压入栈 $A$ （即 `A.add(x)` ）；\r\n  2. 若 ① 栈 $B$ 为空 **或** ② $x$ **小于等于** 栈 $B$ 的栈顶元素，则将 $x$ 压入栈 $B$ （即 `B.add(x)` ）。\r\n\r\n- **`pop()` 函数：** 重点为保持栈 $A, B$ 的 **元素一致性** 。\r\n  1. 执行栈 $A$ 出栈（即 `A.pop()` ），将出栈元素记为 $y$ ；\r\n  2. 若 $y$ 等于栈 $B$ 的栈顶元素，则执行栈 `B` 出栈（即 `B.pop()` ）。\r\n\r\n- **`top()` 函数：** 直接返回栈 $A$ 的栈顶元素即可，即返回 `A.peek()` 。\r\n\r\n- **`min()` 函数：** 直接返回栈 $B$ 的栈顶元素即可，即返回 `B.peek()` 。\r\n\r\n<![Picture2.png](https://pic.leetcode-cn.com/41e9e4ac4dda8074c67ca6071977cd7016b413013d61fbb38c624db8c90840ed-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/fc6dc02d58dbc40a6794288b4dd3bb8769a356b5889304a66b7383912ac34e47-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/578658d253f71da5014c783812182433660a97265259e6508c0b5f8779e339f1-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/b2ede6eeed03eebbfac3fe4e58aea21651f76834c1bfb7e78f72aab968b89b12-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/850feccffa1077aaa92db035f41687509a3ddc570b22e9f8176d954e122edea7-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/2c767991204cd4f48c48dcb35364649189250a3815b3d5b3c0e377ce0aa3a821-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/f2ea855b1fab8fe5bb8bfd72013c302bf1b348e0dd3c723ddb73ebef0db797f9-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/d9ac45ba9c4167a3307b232cbfd51d05094d69f0ce8ecbd138160dea2b4f1e32-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/5d88dcf59f5904e3a5a1b7b0a53f383e23265da8c9b3462267d90f063fe346e1-Picture10.png)>\r\n\r\n##### 复杂度分析：\r\n\r\n- **时间复杂度 $O(1)$ ：** `push()`, `pop()`, `top()`, `min()` 四个函数的时间复杂度均为常数级别。\r\n- **空间复杂度 $O(N)$ ：** 当共有 $N$ 个待入栈元素时，辅助栈 $B$ 最差情况下存储 $N$ 个元素，使用 $O(N)$ 额外空间。\r\n\r\n#### 代码：\r\n\r\n> Java 代码中，由于 Stack 中存储的是 `int` 的包装类 `Integer` ，因此需要使用 `equals()` 代替 `==` 来比较值是否相等。\r\n\r\n```python []\r\nclass MinStack:\r\n    def __init__(self):\r\n        self.A, self.B = [], []\r\n\r\n    def push(self, x: int) -> None:\r\n        self.A.append(x)\r\n        if not self.B or self.B[-1] >= x:\r\n            self.B.append(x)\r\n\r\n    def pop(self) -> None:\r\n        if self.A.pop() == self.B[-1]:\r\n            self.B.pop()\r\n\r\n    def top(self) -> int:\r\n        return self.A[-1]\r\n\r\n    def min(self) -> int:\r\n        return self.B[-1]\r\n```\r\n\r\n```java []\r\nclass MinStack {\r\n    Stack<Integer> A, B;\r\n    public MinStack() {\r\n        A = new Stack<>();\r\n        B = new Stack<>();\r\n    }\r\n    public void push(int x) {\r\n        A.add(x);\r\n        if(B.empty() || B.peek() >= x)\r\n            B.add(x);\r\n    }\r\n    public void pop() {\r\n        if(A.pop().equals(B.peek()))\r\n            B.pop();\r\n    }\r\n    public int top() {\r\n        return A.peek();\r\n    }\r\n    public int min() {\r\n        return B.peek();\r\n    }\r\n}\r\n```",
      "createdAt": "2020-03-05T17:19:54.549188+00:00",
      "hitCount": 140430,
      "identifier": "VBjKgE",
      "isEditorsPick": true,
      "isMostPopular": true,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "bao-han-minhan-shu-de-zhan-2ge-zhan-shi-0atge",
        "title": "剑指 Offer 30. 包含min函数的栈：2个栈实现"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "bao-han-minhan-shu-de-zhan-lcof"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 309,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 30,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 6,
          "reactionType": "CONFUSED"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 2,
          "reactionType": "THUMBS_DOWN"
        }
      ],
      "rewardEnabled": null,
      "slug": "mian-shi-ti-30-bao-han-minhan-shu-de-zhan-fu-zhu-z",
      "status": "PUBLISHED",
      "summary": " 解题思路：\n\n普通栈的 push() 和 pop() 函数的复杂度为 O(1) ；而获取栈最小值 min() 函数需要遍历整个栈，复杂度为 O(N) 。\n\n\n本题难点： 将 min() 函数复杂度降为 O(1) ，可通过建立辅助栈实现；\n\n数据栈 A ： 栈 A 用于存储所有元素，保证入栈 push() 函数、出栈 ",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Stack",
          "nameTranslated": "栈",
          "slug": "stack",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python3",
          "nameTranslated": "",
          "slug": "python3",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/f31f4b7f5e91d46ea610b6685c593e12bf798a9b8336b0560b6b520956dd5272-Picture1.png",
      "title": "面试题30. 包含 min 函数的栈（辅助栈，清晰图解）",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 285,
        "id": 133760,
        "viewCount": 94577
      },
      "uuid": "VBjKgE",
      "videosInfo": []
    }
  }
}
