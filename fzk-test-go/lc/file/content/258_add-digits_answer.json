{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "陈越",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/liveforexperience/avatar_1560833384.png",
          "userSlug": "liveforexperience"
        },
        "username": "liveforexperience"
      },
      "byLeetcode": false,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 解题思路\r\n时间复杂度为 $O(1)$的解法：\r\n- 除个位外，每一位上的值都是通过 `(9+1)` 进位的过程得到的，想一下 **拨算盘进位**\r\n- 把整数 n 看成 n 样物品，原本是以 10 个 1 份打包的，现在从这些 10 个 1 份打包好的里面，拿出 1 个，让它们以 9 个为 1 份打包。\r\n- 这样就出现了两部分的东西：\r\n    - 原本 10 个现在 9 个 1 份的，打包好的物品，这些，我们不用管\r\n    - 零散的物品，它们还可以分成：\r\n        - 从原来打包的里面拿出来的物品，它们的总和 =》 **原来打包好的份数** =》 **10进制进位的次数** =》 **10 进制下，除个位外其他位上的值的总和**\r\n        - 以 10 个 1 份打包时，打不进去的零散物品 =》 **10 进制个位上的值**\r\n- 如上零散物品的总数，就是第一次处理 num 后得到的累加值\r\n- 如果这个累加值 >9，那么如题就还需要将各个位上的值再相加，直到结果为个位数为止。也就意味着还需要来一遍如上的过程。\r\n- 那么按照如上的思路，似乎可以通过 **n % 9** 得到最后的值\r\n- 但是有1个关键的问题，如果 num 是 9 的倍数，那么就不适用上述逻辑。原本我是想得到 **n 被打包成 10 个 1 份的份数**+**打不进 10 个 1 份的散落个数**的和。**通过与 9 取模，去获得那个不能整除的 1，作为计算份数的方式**，但是如果可以被 9 整除，我就无法得到那个 1，也得不到个位上的数。\r\n- 所以需要做一下特殊处理，**(num - 1) % 9 + 1**\r\n- 可以这么做的原因：原本可以被完美分成 9 个为一份的 n 样物品，我故意去掉一个，那么就又可以回到上述逻辑中去得到我要的**n 被打包成 10 个一份的份数**+**打不进 10 个一份的散落个数**的和。而这个减去的 1 就相当于从，在 10 个 1 份打包的时候散落的个数中借走的，本来就不影响原来 10 个 1 份打包的份数，先拿走再放回来，都只影响散落的个数，所以没有关系。\r\n#### 代码 \r\n```Java []\r\nclass Solution {\r\n    public int addDigits(int num) {\r\n        return (num - 1) % 9 + 1;\r\n    }\r\n}\r\n```",
      "createdAt": "2019-07-20T09:06:52.576710+00:00",
      "hitCount": 33580,
      "identifier": "pcDoHZ",
      "isEditorsPick": true,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-5-7",
        "title": "详细通俗的思路分析，多解法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "add-digits"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 284,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 11,
          "reactionType": "AWESOME"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 3,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "java-o1jie-fa-de-ge-ren-li-jie-by-liveforexperienc",
      "status": "PUBLISHED",
      "summary": "解题思路\n时间复杂度为 O(1)的解法：\n\n除个位外，每一位上的值都是通过 (9+1) 进位的过程得到的，想一下 拨算盘进位\n把整数 n 看成 n 样物品，原本是以 10 个 1 份打包的，现在从这些 10 个 1 份打包好的里面，拿出 1 个，让它们以 9 个为 1 份打包。\n这样就出现了两部分的东西：\n\n原本 1",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "【Java】O(1)解法的个人理解",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 151,
        "id": 15652,
        "viewCount": 27041
      },
      "uuid": "pcDoHZ",
      "videosInfo": []
    }
  }
}
