{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣官方题解",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/users/leetcode-solution/avatar_1582018938.png",
          "userSlug": "leetcode-solution"
        },
        "username": "LeetCode-Solution"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：模拟\n\n模拟矩阵的生成。按照要求，初始位置设为矩阵的左上角，初始方向设为向右。若下一步的位置超出矩阵边界，或者是之前访问过的位置，则顺时针旋转，进入下一个方向。如此反复直至填入 $n^2$ 个元素。\n\n记 $\\textit{matrix}$ 为生成的矩阵，其初始元素设为 $0$。由于填入的元素均为正数，我们可以判断当前位置的元素值，若不为 $0$，则说明已经访问过此位置。\n\n```Java [sol1-Java]\nclass Solution {\n    public int[][] generateMatrix(int n) {\n        int maxNum = n * n;\n        int curNum = 1;\n        int[][] matrix = new int[n][n];\n        int row = 0, column = 0;\n        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // 右下左上\n        int directionIndex = 0;\n        while (curNum <= maxNum) {\n            matrix[row][column] = curNum;\n            curNum++;\n            int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n            if (nextRow < 0 || nextRow >= n || nextColumn < 0 || nextColumn >= n || matrix[nextRow][nextColumn] != 0) {\n                directionIndex = (directionIndex + 1) % 4; // 顺时针旋转至下一个方向\n            }\n            row = row + directions[directionIndex][0];\n            column = column + directions[directionIndex][1];\n        }\n        return matrix;\n    }\n}\n```\n\n```JavaScript [sol1-JavaScript]\nvar generateMatrix = function(n) {\n    const maxNum = n * n;\n    let curNum = 1;\n    const matrix = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let row = 0, column = 0;\n    const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]; // 右下左上\n    let directionIndex = 0;\n    while (curNum <= maxNum) {\n        matrix[row][column] = curNum;\n        curNum++;\n        const nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n        if (nextRow < 0 || nextRow >= n || nextColumn < 0 || nextColumn >= n || matrix[nextRow][nextColumn] !== 0) {\n            directionIndex = (directionIndex + 1) % 4; // 顺时针旋转至下一个方向\n        }\n        row = row + directions[directionIndex][0];\n        column = column + directions[directionIndex][1];\n    }\n    return matrix;\n};\n```\n\n```go [sol1-Golang]\ntype pair struct{ x, y int }\nvar dirs = []pair{{0, 1}, {1, 0}, {0, -1}, {-1, 0}} // 右下左上\n\nfunc generateMatrix(n int) [][]int {\n    matrix := make([][]int, n)\n    for i := range matrix {\n        matrix[i] = make([]int, n)\n    }\n    row, col, dirIdx := 0, 0, 0\n    for i := 1; i <= n*n; i++ {\n        matrix[row][col] = i\n        dir := dirs[dirIdx]\n        if r, c := row+dir.x, col+dir.y; r < 0 || r >= n || c < 0 || c >= n || matrix[r][c] > 0 {\n            dirIdx = (dirIdx + 1) % 4 // 顺时针旋转至下一个方向\n            dir = dirs[dirIdx]\n        }\n        row += dir.x\n        col += dir.y\n    }\n    return matrix\n}\n```\n\n```Python [sol1-Python3]\nclass Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        matrix = [[0] * n for _ in range(n)]\n        row, col, dirIdx = 0, 0, 0\n        for i in range(n * n):\n            matrix[row][col] = i + 1\n            dx, dy = dirs[dirIdx]\n            r, c = row + dx, col + dy\n            if r < 0 or r >= n or c < 0 or c >= n or matrix[r][c] > 0:\n                dirIdx = (dirIdx + 1) % 4   # 顺时针旋转至下一个方向\n                dx, dy = dirs[dirIdx]\n            row, col = row + dx, col + dy\n        \n        return matrix\n```\n\n```C++ [sol1-C++]\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        int maxNum = n * n;\n        int curNum = 1;\n        vector<vector<int>> matrix(n, vector<int>(n));\n        int row = 0, column = 0;\n        vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};  // 右下左上\n        int directionIndex = 0;\n        while (curNum <= maxNum) {\n            matrix[row][column] = curNum;\n            curNum++;\n            int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n            if (nextRow < 0 || nextRow >= n || nextColumn < 0 || nextColumn >= n || matrix[nextRow][nextColumn] != 0) {\n                directionIndex = (directionIndex + 1) % 4;  // 顺时针旋转至下一个方向\n            }\n            row = row + directions[directionIndex][0];\n            column = column + directions[directionIndex][1];\n        }\n        return matrix;\n    }\n};\n```\n\n```C [sol1-C]\nint** generateMatrix(int n, int* returnSize, int** returnColumnSizes) {\n    int maxNum = n * n;\n    int curNum = 1;\n    int** matrix = malloc(sizeof(int*) * n);\n    *returnSize = n;\n    *returnColumnSizes = malloc(sizeof(int) * n);\n    for (int i = 0; i < n; i++) {\n        matrix[i] = malloc(sizeof(int) * n);\n        memset(matrix[i], 0, sizeof(int) * n);\n        (*returnColumnSizes)[i] = n;\n    }\n    int row = 0, column = 0;\n    int directions[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};  // 右下左上\n    int directionIndex = 0;\n    while (curNum <= maxNum) {\n        matrix[row][column] = curNum;\n        curNum++;\n        int nextRow = row + directions[directionIndex][0], nextColumn = column + directions[directionIndex][1];\n        if (nextRow < 0 || nextRow >= n || nextColumn < 0 || nextColumn >= n || matrix[nextRow][nextColumn] != 0) {\n            directionIndex = (directionIndex + 1) % 4;  // 顺时针旋转至下一个方向\n        }\n        row = row + directions[directionIndex][0];\n        column = column + directions[directionIndex][1];\n    }\n    return matrix;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$，其中 $n$ 是给定的正整数。矩阵的大小是 $n \\times n$，需要填入矩阵中的每个元素。\n\n* 空间复杂度：$O(1)$。除了返回的矩阵以外，空间复杂度是常数。\n\n#### 方法二：按层模拟\n\n可以将矩阵看成若干层，首先填入矩阵最外层的元素，其次填入矩阵次外层的元素，直到填入矩阵最内层的元素。\n\n定义矩阵的第 $k$ 层是到最近边界距离为 $k$ 的所有顶点。例如，下图矩阵最外层元素都是第 $1$ 层，次外层元素都是第 $2$ 层，最内层元素都是第 $3$ 层。\n\n```\n[[1, 1, 1, 1, 1, 1],\n [1, 2, 2, 2, 2, 1],\n [1, 2, 3, 3, 2, 1],\n [1, 2, 3, 3, 2, 1],\n [1, 2, 2, 2, 2, 1],\n [1, 1, 1, 1, 1, 1]]\n```\n\n对于每层，从左上方开始以顺时针的顺序填入所有元素。假设当前层的左上角位于 $(\\textit{top}, \\textit{left})$，右下角位于 $(\\textit{bottom}, \\textit{right})$，按照如下顺序填入当前层的元素。\n\n1. 从左到右填入上侧元素，依次为 $(\\textit{top}, \\textit{left})$ 到 $(\\textit{top}, \\textit{right})$。\n\n2. 从上到下填入右侧元素，依次为 $(\\textit{top} + 1, \\textit{right})$ 到 $(\\textit{bottom}, \\textit{right})$。\n\n3. 如果 $\\textit{left} < \\textit{right}$ 且 $\\textit{top} < \\textit{bottom}$，则从右到左填入下侧元素，依次为 $(\\textit{bottom}, \\textit{right} - 1)$ 到 $(\\textit{bottom}, \\textit{left} + 1)$，以及从下到上填入左侧元素，依次为 $(\\textit{bottom}, \\textit{left})$ 到 $(\\textit{top} + 1, \\textit{left})$。\n\n填完当前层的元素之后，将 $\\textit{left}$ 和 $\\textit{top}$ 分别增加 $1$，将 $\\textit{right}$ 和 $\\textit{bottom}$ 分别减少 $1$，进入下一层继续填入元素，直到填完所有元素为止。\n\n<![ppt1](https://assets.leetcode-cn.com/solution-static/59/1.png),![ppt2](https://assets.leetcode-cn.com/solution-static/59/2.png),![ppt3](https://assets.leetcode-cn.com/solution-static/59/3.png),![ppt4](https://assets.leetcode-cn.com/solution-static/59/4.png),![ppt5](https://assets.leetcode-cn.com/solution-static/59/5.png),![ppt6](https://assets.leetcode-cn.com/solution-static/59/6.png),![ppt7](https://assets.leetcode-cn.com/solution-static/59/7.png),![ppt8](https://assets.leetcode-cn.com/solution-static/59/8.png),![ppt9](https://assets.leetcode-cn.com/solution-static/59/9.png),![ppt10](https://assets.leetcode-cn.com/solution-static/59/10.png),![ppt11](https://assets.leetcode-cn.com/solution-static/59/11.png),![ppt12](https://assets.leetcode-cn.com/solution-static/59/12.png),![ppt13](https://assets.leetcode-cn.com/solution-static/59/13.png),![ppt14](https://assets.leetcode-cn.com/solution-static/59/14.png),![ppt15](https://assets.leetcode-cn.com/solution-static/59/15.png)>\n\n```Java [sol2-Java]\nclass Solution {\n    public int[][] generateMatrix(int n) {\n        int num = 1;\n        int[][] matrix = new int[n][n];\n        int left = 0, right = n - 1, top = 0, bottom = n - 1;\n        while (left <= right && top <= bottom) {\n            for (int column = left; column <= right; column++) {\n                matrix[top][column] = num;\n                num++;\n            }\n            for (int row = top + 1; row <= bottom; row++) {\n                matrix[row][right] = num;\n                num++;\n            }\n            if (left < right && top < bottom) {\n                for (int column = right - 1; column > left; column--) {\n                    matrix[bottom][column] = num;\n                    num++;\n                }\n                for (int row = bottom; row > top; row--) {\n                    matrix[row][left] = num;\n                    num++;\n                }\n            }\n            left++;\n            right--;\n            top++;\n            bottom--;\n        }\n        return matrix;\n    }\n}\n```\n\n```JavaScript [sol2-JavaScript]\nvar generateMatrix = function(n) {\n    let num = 1;\n    const matrix = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    let left = 0, right = n - 1, top = 0, bottom = n - 1;\n    while (left <= right && top <= bottom) {\n        for (let column = left; column <= right; column++) {\n            matrix[top][column] = num;\n            num++;\n        }\n        for (let row = top + 1; row <= bottom; row++) {\n            matrix[row][right] = num;\n            num++;\n        }\n        if (left < right && top < bottom) {\n            for (let column = right - 1; column > left; column--) {\n                matrix[bottom][column] = num;\n                num++;\n            }\n            for (let row = bottom; row > top; row--) {\n                matrix[row][left] = num;\n                num++;\n            }\n        }\n        left++;\n        right--;\n        top++;\n        bottom--;\n    }\n    return matrix;\n};\n```\n\n```go [sol2-Golang]\nfunc generateMatrix(n int) [][]int {\n    matrix := make([][]int, n)\n    for i := range matrix {\n        matrix[i] = make([]int, n)\n    }\n    num := 1\n    left, right, top, bottom := 0, n-1, 0, n-1\n    for left <= right && top <= bottom {\n        for column := left; column <= right; column++ {\n            matrix[top][column] = num\n            num++\n        }\n        for row := top + 1; row <= bottom; row++ {\n            matrix[row][right] = num\n            num++\n        }\n        if left < right && top < bottom {\n            for column := right - 1; column > left; column-- {\n                matrix[bottom][column] = num\n                num++\n            }\n            for row := bottom; row > top; row-- {\n                matrix[row][left] = num\n                num++\n            }\n        }\n        left++\n        right--\n        top++\n        bottom--\n    }\n    return matrix\n}\n```\n\n```Python [sol2-Python3]\nclass Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n\n        while left <= right and top <= bottom:\n            for col in range(left, right + 1):\n                matrix[top][col] = num\n                num += 1\n            for row in range(top + 1, bottom + 1):\n                matrix[row][right] = num\n                num += 1\n            if left < right and top < bottom:\n                for col in range(right - 1, left, -1):\n                    matrix[bottom][col] = num\n                    num += 1\n                for row in range(bottom, top, -1):\n                    matrix[row][left] = num\n                    num += 1\n            left += 1\n            right -= 1\n            top += 1\n            bottom -= 1\n\n        return matrix\n```\n\n```C++ [sol2-C++]\nclass Solution {\npublic:\n    vector<vector<int>> generateMatrix(int n) {\n        int num = 1;\n        vector<vector<int>> matrix(n, vector<int>(n));\n        int left = 0, right = n - 1, top = 0, bottom = n - 1;\n        while (left <= right && top <= bottom) {\n            for (int column = left; column <= right; column++) {\n                matrix[top][column] = num;\n                num++;\n            }\n            for (int row = top + 1; row <= bottom; row++) {\n                matrix[row][right] = num;\n                num++;\n            }\n            if (left < right && top < bottom) {\n                for (int column = right - 1; column > left; column--) {\n                    matrix[bottom][column] = num;\n                    num++;\n                }\n                for (int row = bottom; row > top; row--) {\n                    matrix[row][left] = num;\n                    num++;\n                }\n            }\n            left++;\n            right--;\n            top++;\n            bottom--;\n        }\n        return matrix;\n    }\n};\n```\n\n```C [sol2-C]\nint** generateMatrix(int n, int* returnSize, int** returnColumnSizes) {\n    int num = 1;\n    int** matrix = malloc(sizeof(int*) * n);\n    *returnSize = n;\n    *returnColumnSizes = malloc(sizeof(int) * n);\n    for (int i = 0; i < n; i++) {\n        matrix[i] = malloc(sizeof(int) * n);\n        memset(matrix[i], 0, sizeof(int) * n);\n        (*returnColumnSizes)[i] = n;\n    }\n    int left = 0, right = n - 1, top = 0, bottom = n - 1;\n    while (left <= right && top <= bottom) {\n        for (int column = left; column <= right; column++) {\n            matrix[top][column] = num;\n            num++;\n        }\n        for (int row = top + 1; row <= bottom; row++) {\n            matrix[row][right] = num;\n            num++;\n        }\n        if (left < right && top < bottom) {\n            for (int column = right - 1; column > left; column--) {\n                matrix[bottom][column] = num;\n                num++;\n            }\n            for (int row = bottom; row > top; row--) {\n                matrix[row][left] = num;\n                num++;\n            }\n        }\n        left++;\n        right--;\n        top++;\n        bottom--;\n    }\n    return matrix;\n}\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(n^2)$，其中 $n$ 是给定的正整数。矩阵的大小是 $n \\times n$，需要填入矩阵中的每个元素。\n\n* 空间复杂度：$O(1)$。除了返回的矩阵以外，空间复杂度是常数。",
      "createdAt": "2021-03-15T13:39:09.397960+00:00",
      "hitCount": 48132,
      "identifier": "HALdzL",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "spiral-matrix-ii-mo-ni-fa-she-ding-bian-jie-qing-x",
        "title": "Spiral Matrix II （模拟法，设定边界，代码简短清晰）"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "spiral-matrix-ii"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 47,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 0,
          "reactionType": "AWESOME"
        }
      ],
      "rewardEnabled": null,
      "slug": "luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp",
      "status": "PREPUBLISH",
      "summary": "方法一：模拟 模拟矩阵的生成。按照要求，初始位置设为矩阵的左上角，初始方向设为向右。若下一步的位置超出矩阵边界，或者是之前访问过的位置，则顺时针旋转，进入下一个方向。如此反复直至填入 $n^2$ 个元素。 记 $\\textit{matrix}$ 为生成的矩阵，其初始元素设为 $0$。由于填入的元素均为正数，我们可以判断",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Array",
          "nameTranslated": "数组",
          "slug": "array",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C",
          "nameTranslated": "",
          "slug": "c",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "C++",
          "nameTranslated": "",
          "slug": "cpp",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Go",
          "nameTranslated": "",
          "slug": "golang",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "JavaScript",
          "nameTranslated": "",
          "slug": "javascript",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "",
      "title": "螺旋矩阵 II",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 103,
        "id": 658676,
        "viewCount": 36077
      },
      "uuid": "HALdzL",
      "videosInfo": []
    }
  }
}
