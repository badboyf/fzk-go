{
  "data": {
    "solutionArticle": {
      "__typename": "SolutionArticleNode",
      "author": {
        "__typename": "UserNode",
        "profile": {
          "__typename": "UserProfileNode",
          "realName": "力扣 (LeetCode)",
          "userAvatar": "https://assets.leetcode-cn.com/aliyun-lc-upload/uploaded_files/2021/03/73c9f099-abbe-4d94-853f-f8abffd459cd/leetcode.png",
          "userSlug": "leetcode"
        },
        "username": "LeetCode"
      },
      "byLeetcode": true,
      "canEdit": false,
      "canEditReward": false,
      "canSee": true,
      "chargeType": "FREE",
      "content": "#### 方法一：穷举搜索【超出时间限制】\n\n**思路和算法**\n\n每个点都可以转换成两个子点，递归搜索所有子点。\n\n```java [solution1-Java]\nclass Solution {\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n        if (sx > tx || sy > ty) return false;\n        if (sx == tx && sy == ty) return true;\n        return reachingPoints(sx+sy, sy, tx, ty) || reachingPoints(sx, sx+sy, tx, ty);\n    }\n}\n```\n\n```python [solution1-Python]\nclass Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        if sx > tx or sy > ty: return False\n        if sx == tx and sy == ty: return True\n        return self.reachingPoints(sx+sy, sy, tx, ty) or \\\n               self.reachingPoints(sx, sx+sy, tx, ty)\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(2^{tx + ty})$，每一步转换都是 `(x, y) -> (x+1, y)` 或者 `(x, y) -> (x, y+1)`。\n\n* 空间复杂度：$O(tx * ty)$，隐式调用栈的大小。\n\n#### 方法二：动态规划【超出时间限制】\n\n**思路和算法**\n\n为了避免重复计算，使用一个集合 `seen` 存储*方法一*中递归搜索到的子点。\n\n```java [solution2-Java]\nimport java.awt.Point;\n\nclass Solution {\n    Set<Point> seen;\n    int tx, ty;\n\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n        seen = new HashSet();\n        this.tx = tx;\n        this.ty = ty;\n        search(new Point(sx, sy));\n        return seen.contains(new Point(tx, ty));\n    }\n\n    public void search(Point P) {\n        if (seen.contains(P)) return;\n        if (P.x > tx || P.y > ty) return;\n        seen.add(P);\n        search(new Point(P.x + P.y, P.y));\n        search(new Point(P.x, P.x + P.y));\n    }\n}\n```\n\n```python [solution2-Python]\nclass Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        seen = set()\n        def search(x, y):\n            if (x, y) in seen: return\n            if x > tx or y > ty: return\n            seen.add((x, y))\n            search(x+y, y)\n            search(x, x+y)\n\n        search(sx, sy)\n        return (tx, ty) in seen\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(tx * ty)$，最多 `tx * ty` 个点被搜索一次。\n\n* 空间复杂度：$O(tx * ty)$，隐式调用栈的大小。\n\n#### 方法三：回溯法（简单变体）【超出时间限制】\n\n**思路**\n\n每个父点 `(x, y)` 都有两个子点 `(x, x+y)` 和 `(x+y, y)`。由于坐标不能为负，每个子点 `(x, y)` 只能有一个父点，当 `x >= y` 时父点为 `(x-y, y)`；当 `y > x` 时父点为 `(x, y-x)`。\n\n![](https://pic.leetcode-cn.com/Figures/780/tree.png){:width=500}\n\n从终点开始不断向上求解父点，可以判断给定点是否是正确的起点。例如，当终点是 `(19, 12)` 时，它的父点是 `(7, 12)`， `(7, 5)` 和 `(2, 5)`。因此 `(2, 5)` 是 `(19, 12)` 的起点。\n\n**算法**\n\n反复使用 `{tx, ty}` 中较大的值减去较小的值更新点，到达点 `{sx, sy}` 时返回 `true`。\n\n```java [solution3-Java]\nclass Solution {\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n        while (tx >= sx && ty >= sy) {\n            if (sx == tx && sy == ty)\n                return true;\n            if (tx > ty) tx -= ty;\n            else ty -= tx;\n        }\n        return false;\n    }\n}\n```\n\n```python[solution3-Python]\nclass Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        while tx >= sx and ty >= sy:\n            if sx == tx and sy == ty: return True\n            if tx > ty:\n                tx -= ty\n            else:\n                ty -= tx\n        return False\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\max(tx, ty))$，如果 `ty = 1`，需要做 `tx` 次减法。 \n\n* 空间复杂度：$O(1)$。\n\n#### 方法四：回溯法 （取模变体）【通过】\n\n**思路**\n\n与*方法三*一样，使用回溯法。通过求解父点完成 `(x, y) -> (x-y, y) 或 (x, y-x)` 的转换，具体使用哪一种转换取决于哪种结果没有负数。\n\n可以使用模运算加速求解父点的过程。\n\n**算法**\n\n当 `tx > ty` 时，求解父点的运算是 `tx - ty`，并且它的往上 `tx = tx % ty` 个父点都是减去 `ty`。当同时满足 `tx > ty 和 ty <= sy` 时，可以一次性执行所有的这些操作，直接令 `tx %= ty`。\n\n否则，如果满足 `tx > ty 和 ty <= sy`，那么 `ty` 不再改变，只能不断从 `tx` 中减去 `ty`。因此， `(tx - sx) % ty == 0` 是结果为 `true` 的充要条件。\n\n上面的分析是针对 `tx > ty` 的情况，对于 `ty > tx` 的情况类似。 当 `tx == ty` 时，无法再求解父点。\n\n```java [solution4-Java]\nclass Solution {\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n        while (tx >= sx && ty >= sy) {\n            if (tx == ty) break;\n            if (tx > ty) {\n                if (ty > sy) tx %= ty;\n                else return (tx - sx) % ty == 0;\n            } else {\n                if (tx > sx) ty %= tx;\n                else return (ty - sy) % tx == 0;\n            }\n        }\n        return (tx == sx && ty == sy);\n    }\n}\n```\n\n```python [solution4-Python]\nclass Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        while tx >= sx and ty >= sy:\n            if tx == ty:\n                break\n            elif tx > ty:\n                if ty > sy:\n                    tx %= ty\n                else:\n                    return (tx - sx) % ty == 0\n            else:\n                if tx > sx:\n                    ty %= tx\n                else:\n                    return (ty - sy) % tx == 0\n\n        return tx == sx and ty == sy\n```\n\n**复杂度分析**\n\n* 时间复杂度：$O(\\log(\\max{(tx, ty)}))$。 与欧几里得算法相似，假定模运算可以在 $O(1)$ 时间内完成。\n\n* 空间复杂度：$O(1)$。",
      "createdAt": "2019-11-20T07:17:10.525051+00:00",
      "hitCount": 4352,
      "identifier": "gaYlHA",
      "isEditorsPick": false,
      "isMostPopular": false,
      "isMyFavorite": false,
      "next": {
        "__typename": "BriefSolutionNode",
        "slug": "c-zhan-zhuan-xiang-chu-fa-by-zqy1018",
        "title": "c++ 辗转相除法"
      },
      "position": 1,
      "prev": null,
      "question": {
        "__typename": "QuestionNode",
        "questionTitleSlug": "reaching-points"
      },
      "reactionType": null,
      "reactionsV2": [
        {
          "__typename": "ReactionCountNode",
          "count": 15,
          "reactionType": "UPVOTE"
        },
        {
          "__typename": "ReactionCountNode",
          "count": 1,
          "reactionType": "CONFUSED"
        }
      ],
      "rewardEnabled": null,
      "slug": "dao-da-zhong-dian-by-leetcode",
      "status": "PUBLISHED",
      "summary": "§ 方法一：穷举搜索【超出时间限制】\n思路和算法\n每个点都可以转换成两个子点，递归搜索所有子点。\n复杂度分析\n\n\n时间复杂度：O(2^{tx + ty})，每一步转换都是 (x, y) -> (x+1, y) 或者 (x, y) -> (x, y+1)。\n\n\n空间复杂度：O(tx * ty)，隐式调用栈的大小。\n\n\n§",
      "sunk": false,
      "tags": [
        {
          "__typename": "CommonTagNode",
          "name": "Dynamic Programming",
          "nameTranslated": "动态规划",
          "slug": "dynamic-programming",
          "tagType": "TOPIC"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Java",
          "nameTranslated": "",
          "slug": "java",
          "tagType": "LANGUAGE"
        },
        {
          "__typename": "CommonTagNode",
          "name": "Python",
          "nameTranslated": "",
          "slug": "python",
          "tagType": "LANGUAGE"
        }
      ],
      "thumbnail": "https://pic.leetcode-cn.com/Figures/780/tree.png",
      "title": "到达终点",
      "topic": {
        "__typename": "TopicNode",
        "commentCount": 11,
        "id": 45562,
        "viewCount": 3113
      },
      "uuid": "gaYlHA",
      "videosInfo": []
    }
  }
}
